// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gstruct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Gstruct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Gstruct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Gstruct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Gstruct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Gstruct_2eproto;
namespace Protocol {
class CarDataList;
struct CarDataListDefaultTypeInternal;
extern CarDataListDefaultTypeInternal _CarDataList_default_instance_;
class Character;
struct CharacterDefaultTypeInternal;
extern CharacterDefaultTypeInternal _Character_default_instance_;
class Character_Attack;
struct Character_AttackDefaultTypeInternal;
extern Character_AttackDefaultTypeInternal _Character_Attack_default_instance_;
class Detected;
struct DetectedDefaultTypeInternal;
extern DetectedDefaultTypeInternal _Detected_default_instance_;
class Equip_Item;
struct Equip_ItemDefaultTypeInternal;
extern Equip_ItemDefaultTypeInternal _Equip_Item_default_instance_;
class ItemDataList;
struct ItemDataListDefaultTypeInternal;
extern ItemDataListDefaultTypeInternal _ItemDataList_default_instance_;
class PatrolPath;
struct PatrolPathDefaultTypeInternal;
extern PatrolPathDefaultTypeInternal _PatrolPath_default_instance_;
class Time;
struct TimeDefaultTypeInternal;
extern TimeDefaultTypeInternal _Time_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
class Zombie;
struct ZombieDefaultTypeInternal;
extern ZombieDefaultTypeInternal _Zombie_default_instance_;
class ZombieDataList;
struct ZombieDataListDefaultTypeInternal;
extern ZombieDataListDefaultTypeInternal _ZombieDataList_default_instance_;
class ZombiePath;
struct ZombiePathDefaultTypeInternal;
extern ZombiePathDefaultTypeInternal _ZombiePath_default_instance_;
class Zombie_attack;
struct Zombie_attackDefaultTypeInternal;
extern Zombie_attackDefaultTypeInternal _Zombie_attack_default_instance_;
class Zombie_hp;
struct Zombie_hpDefaultTypeInternal;
extern Zombie_hpDefaultTypeInternal _Zombie_hp_default_instance_;
class destroy_item;
struct destroy_itemDefaultTypeInternal;
extern destroy_itemDefaultTypeInternal _destroy_item_default_instance_;
class drop_item;
struct drop_itemDefaultTypeInternal;
extern drop_itemDefaultTypeInternal _drop_item_default_instance_;
class escape;
struct escapeDefaultTypeInternal;
extern escapeDefaultTypeInternal _escape_default_instance_;
class game_clear;
struct game_clearDefaultTypeInternal;
extern game_clearDefaultTypeInternal _game_clear_default_instance_;
class get_key;
struct get_keyDefaultTypeInternal;
extern get_keyDefaultTypeInternal _get_key_default_instance_;
class jump;
struct jumpDefaultTypeInternal;
extern jumpDefaultTypeInternal _jump_default_instance_;
class patrol_hit;
struct patrol_hitDefaultTypeInternal;
extern patrol_hitDefaultTypeInternal _patrol_hit_default_instance_;
class ping;
struct pingDefaultTypeInternal;
extern pingDefaultTypeInternal _ping_default_instance_;
class send_complete;
struct send_completeDefaultTypeInternal;
extern send_completeDefaultTypeInternal _send_complete_default_instance_;
class set_car;
struct set_carDefaultTypeInternal;
extern set_carDefaultTypeInternal _set_car_default_instance_;
class set_item;
struct set_itemDefaultTypeInternal;
extern set_itemDefaultTypeInternal _set_item_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::CarDataList* Arena::CreateMaybeMessage<::Protocol::CarDataList>(Arena*);
template<> ::Protocol::Character* Arena::CreateMaybeMessage<::Protocol::Character>(Arena*);
template<> ::Protocol::Character_Attack* Arena::CreateMaybeMessage<::Protocol::Character_Attack>(Arena*);
template<> ::Protocol::Detected* Arena::CreateMaybeMessage<::Protocol::Detected>(Arena*);
template<> ::Protocol::Equip_Item* Arena::CreateMaybeMessage<::Protocol::Equip_Item>(Arena*);
template<> ::Protocol::ItemDataList* Arena::CreateMaybeMessage<::Protocol::ItemDataList>(Arena*);
template<> ::Protocol::PatrolPath* Arena::CreateMaybeMessage<::Protocol::PatrolPath>(Arena*);
template<> ::Protocol::Time* Arena::CreateMaybeMessage<::Protocol::Time>(Arena*);
template<> ::Protocol::Vector3* Arena::CreateMaybeMessage<::Protocol::Vector3>(Arena*);
template<> ::Protocol::Zombie* Arena::CreateMaybeMessage<::Protocol::Zombie>(Arena*);
template<> ::Protocol::ZombieDataList* Arena::CreateMaybeMessage<::Protocol::ZombieDataList>(Arena*);
template<> ::Protocol::ZombiePath* Arena::CreateMaybeMessage<::Protocol::ZombiePath>(Arena*);
template<> ::Protocol::Zombie_attack* Arena::CreateMaybeMessage<::Protocol::Zombie_attack>(Arena*);
template<> ::Protocol::Zombie_hp* Arena::CreateMaybeMessage<::Protocol::Zombie_hp>(Arena*);
template<> ::Protocol::destroy_item* Arena::CreateMaybeMessage<::Protocol::destroy_item>(Arena*);
template<> ::Protocol::drop_item* Arena::CreateMaybeMessage<::Protocol::drop_item>(Arena*);
template<> ::Protocol::escape* Arena::CreateMaybeMessage<::Protocol::escape>(Arena*);
template<> ::Protocol::game_clear* Arena::CreateMaybeMessage<::Protocol::game_clear>(Arena*);
template<> ::Protocol::get_key* Arena::CreateMaybeMessage<::Protocol::get_key>(Arena*);
template<> ::Protocol::jump* Arena::CreateMaybeMessage<::Protocol::jump>(Arena*);
template<> ::Protocol::patrol_hit* Arena::CreateMaybeMessage<::Protocol::patrol_hit>(Arena*);
template<> ::Protocol::ping* Arena::CreateMaybeMessage<::Protocol::ping>(Arena*);
template<> ::Protocol::send_complete* Arena::CreateMaybeMessage<::Protocol::send_complete>(Arena*);
template<> ::Protocol::set_car* Arena::CreateMaybeMessage<::Protocol::set_car>(Arena*);
template<> ::Protocol::set_item* Arena::CreateMaybeMessage<::Protocol::set_item>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class Character final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Character) */ {
 public:
  inline Character() : Character(nullptr) {}
  ~Character() override;
  explicit PROTOBUF_CONSTEXPR Character(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Character(const Character& from);
  Character(Character&& from) noexcept
    : Character() {
    *this = ::std::move(from);
  }

  inline Character& operator=(const Character& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character& operator=(Character&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character* internal_default_instance() {
    return reinterpret_cast<const Character*>(
               &_Character_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Character& a, Character& b) {
    a.Swap(&b);
  }
  inline void Swap(Character* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Character& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Character& from) {
    Character::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Character";
  }
  protected:
  explicit Character(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 14,
    kPacketTypeFieldNumber = 1,
    kPlayeridFieldNumber = 2,
    kCharactertypeFieldNumber = 3,
    kXFieldNumber = 4,
    kYFieldNumber = 5,
    kZFieldNumber = 6,
    kPitchFieldNumber = 7,
    kYawFieldNumber = 8,
    kRollFieldNumber = 9,
    kHpFieldNumber = 10,
    kBRunFieldNumber = 11,
    kBJumpFieldNumber = 12,
    kIsingameFieldNumber = 13,
  };
  // string username = 14;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 playerid = 2;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // uint32 charactertype = 3;
  void clear_charactertype();
  uint32_t charactertype() const;
  void set_charactertype(uint32_t value);
  private:
  uint32_t _internal_charactertype() const;
  void _internal_set_charactertype(uint32_t value);
  public:

  // float x = 4;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 5;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 6;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float pitch = 7;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float yaw = 8;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float roll = 9;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // float hp = 10;
  void clear_hp();
  float hp() const;
  void set_hp(float value);
  private:
  float _internal_hp() const;
  void _internal_set_hp(float value);
  public:

  // uint32 b_run = 11;
  void clear_b_run();
  uint32_t b_run() const;
  void set_b_run(uint32_t value);
  private:
  uint32_t _internal_b_run() const;
  void _internal_set_b_run(uint32_t value);
  public:

  // uint32 b_jump = 12;
  void clear_b_jump();
  uint32_t b_jump() const;
  void set_b_jump(uint32_t value);
  private:
  uint32_t _internal_b_jump() const;
  void _internal_set_b_jump(uint32_t value);
  public:

  // bool isingame = 13;
  void clear_isingame();
  bool isingame() const;
  void set_isingame(bool value);
  private:
  bool _internal_isingame() const;
  void _internal_set_isingame(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Character)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    uint32_t packet_type_;
    uint32_t playerid_;
    uint32_t charactertype_;
    float x_;
    float y_;
    float z_;
    float pitch_;
    float yaw_;
    float roll_;
    float hp_;
    uint32_t b_run_;
    uint32_t b_jump_;
    bool isingame_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class jump final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.jump) */ {
 public:
  inline jump() : jump(nullptr) {}
  ~jump() override;
  explicit PROTOBUF_CONSTEXPR jump(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  jump(const jump& from);
  jump(jump&& from) noexcept
    : jump() {
    *this = ::std::move(from);
  }

  inline jump& operator=(const jump& from) {
    CopyFrom(from);
    return *this;
  }
  inline jump& operator=(jump&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const jump& default_instance() {
    return *internal_default_instance();
  }
  static inline const jump* internal_default_instance() {
    return reinterpret_cast<const jump*>(
               &_jump_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(jump& a, jump& b) {
    a.Swap(&b);
  }
  inline void Swap(jump* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(jump* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  jump* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<jump>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const jump& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const jump& from) {
    jump::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(jump* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.jump";
  }
  protected:
  explicit jump(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketTypeFieldNumber = 1,
    kPlayeridFieldNumber = 2,
  };
  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 playerid = 2;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.jump)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t packet_type_;
    uint32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class Character_Attack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Character_Attack) */ {
 public:
  inline Character_Attack() : Character_Attack(nullptr) {}
  ~Character_Attack() override;
  explicit PROTOBUF_CONSTEXPR Character_Attack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Character_Attack(const Character_Attack& from);
  Character_Attack(Character_Attack&& from) noexcept
    : Character_Attack() {
    *this = ::std::move(from);
  }

  inline Character_Attack& operator=(const Character_Attack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_Attack& operator=(Character_Attack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character_Attack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character_Attack* internal_default_instance() {
    return reinterpret_cast<const Character_Attack*>(
               &_Character_Attack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Character_Attack& a, Character_Attack& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_Attack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_Attack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character_Attack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character_Attack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Character_Attack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Character_Attack& from) {
    Character_Attack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character_Attack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Character_Attack";
  }
  protected:
  explicit Character_Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketTypeFieldNumber = 1,
    kPlayeridFieldNumber = 2,
    kAttackFieldNumber = 3,
  };
  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 playerid = 2;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // bool attack = 3;
  void clear_attack();
  bool attack() const;
  void set_attack(bool value);
  private:
  bool _internal_attack() const;
  void _internal_set_attack(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Character_Attack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t packet_type_;
    uint32_t playerid_;
    bool attack_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class Zombie final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Zombie) */ {
 public:
  inline Zombie() : Zombie(nullptr) {}
  ~Zombie() override;
  explicit PROTOBUF_CONSTEXPR Zombie(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Zombie(const Zombie& from);
  Zombie(Zombie&& from) noexcept
    : Zombie() {
    *this = ::std::move(from);
  }

  inline Zombie& operator=(const Zombie& from) {
    CopyFrom(from);
    return *this;
  }
  inline Zombie& operator=(Zombie&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Zombie& default_instance() {
    return *internal_default_instance();
  }
  static inline const Zombie* internal_default_instance() {
    return reinterpret_cast<const Zombie*>(
               &_Zombie_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Zombie& a, Zombie& b) {
    a.Swap(&b);
  }
  inline void Swap(Zombie* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Zombie* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Zombie* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Zombie>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Zombie& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Zombie& from) {
    Zombie::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Zombie* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Zombie";
  }
  protected:
  explicit Zombie(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketTypeFieldNumber = 1,
    kZombieidFieldNumber = 2,
    kZombietypeFieldNumber = 3,
    kXFieldNumber = 4,
    kYFieldNumber = 5,
    kZFieldNumber = 6,
    kPitchFieldNumber = 7,
    kYawFieldNumber = 8,
    kRollFieldNumber = 9,
  };
  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 zombieid = 2;
  void clear_zombieid();
  uint32_t zombieid() const;
  void set_zombieid(uint32_t value);
  private:
  uint32_t _internal_zombieid() const;
  void _internal_set_zombieid(uint32_t value);
  public:

  // uint32 zombietype = 3;
  void clear_zombietype();
  uint32_t zombietype() const;
  void set_zombietype(uint32_t value);
  private:
  uint32_t _internal_zombietype() const;
  void _internal_set_zombietype(uint32_t value);
  public:

  // float x = 4;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 5;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 6;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float pitch = 7;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float yaw = 8;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float roll = 9;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Zombie)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t packet_type_;
    uint32_t zombieid_;
    uint32_t zombietype_;
    float x_;
    float y_;
    float z_;
    float pitch_;
    float yaw_;
    float roll_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class Zombie_attack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Zombie_attack) */ {
 public:
  inline Zombie_attack() : Zombie_attack(nullptr) {}
  ~Zombie_attack() override;
  explicit PROTOBUF_CONSTEXPR Zombie_attack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Zombie_attack(const Zombie_attack& from);
  Zombie_attack(Zombie_attack&& from) noexcept
    : Zombie_attack() {
    *this = ::std::move(from);
  }

  inline Zombie_attack& operator=(const Zombie_attack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Zombie_attack& operator=(Zombie_attack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Zombie_attack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Zombie_attack* internal_default_instance() {
    return reinterpret_cast<const Zombie_attack*>(
               &_Zombie_attack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Zombie_attack& a, Zombie_attack& b) {
    a.Swap(&b);
  }
  inline void Swap(Zombie_attack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Zombie_attack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Zombie_attack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Zombie_attack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Zombie_attack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Zombie_attack& from) {
    Zombie_attack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Zombie_attack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Zombie_attack";
  }
  protected:
  explicit Zombie_attack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketTypeFieldNumber = 1,
    kZombieidFieldNumber = 2,
    kPlayeridFieldNumber = 3,
  };
  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 zombieid = 2;
  void clear_zombieid();
  uint32_t zombieid() const;
  void set_zombieid(uint32_t value);
  private:
  uint32_t _internal_zombieid() const;
  void _internal_set_zombieid(uint32_t value);
  public:

  // uint32 playerid = 3;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Zombie_attack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t packet_type_;
    uint32_t zombieid_;
    uint32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class Zombie_hp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Zombie_hp) */ {
 public:
  inline Zombie_hp() : Zombie_hp(nullptr) {}
  ~Zombie_hp() override;
  explicit PROTOBUF_CONSTEXPR Zombie_hp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Zombie_hp(const Zombie_hp& from);
  Zombie_hp(Zombie_hp&& from) noexcept
    : Zombie_hp() {
    *this = ::std::move(from);
  }

  inline Zombie_hp& operator=(const Zombie_hp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Zombie_hp& operator=(Zombie_hp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Zombie_hp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Zombie_hp* internal_default_instance() {
    return reinterpret_cast<const Zombie_hp*>(
               &_Zombie_hp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Zombie_hp& a, Zombie_hp& b) {
    a.Swap(&b);
  }
  inline void Swap(Zombie_hp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Zombie_hp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Zombie_hp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Zombie_hp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Zombie_hp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Zombie_hp& from) {
    Zombie_hp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Zombie_hp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Zombie_hp";
  }
  protected:
  explicit Zombie_hp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketTypeFieldNumber = 1,
    kZombieidFieldNumber = 2,
    kDamageFieldNumber = 3,
  };
  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 zombieid = 2;
  void clear_zombieid();
  uint32_t zombieid() const;
  void set_zombieid(uint32_t value);
  private:
  uint32_t _internal_zombieid() const;
  void _internal_set_zombieid(uint32_t value);
  public:

  // float damage = 3;
  void clear_damage();
  float damage() const;
  void set_damage(float value);
  private:
  float _internal_damage() const;
  void _internal_set_damage(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Zombie_hp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t packet_type_;
    uint32_t zombieid_;
    float damage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class ZombieDataList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ZombieDataList) */ {
 public:
  inline ZombieDataList() : ZombieDataList(nullptr) {}
  ~ZombieDataList() override;
  explicit PROTOBUF_CONSTEXPR ZombieDataList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZombieDataList(const ZombieDataList& from);
  ZombieDataList(ZombieDataList&& from) noexcept
    : ZombieDataList() {
    *this = ::std::move(from);
  }

  inline ZombieDataList& operator=(const ZombieDataList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZombieDataList& operator=(ZombieDataList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZombieDataList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZombieDataList* internal_default_instance() {
    return reinterpret_cast<const ZombieDataList*>(
               &_ZombieDataList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ZombieDataList& a, ZombieDataList& b) {
    a.Swap(&b);
  }
  inline void Swap(ZombieDataList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZombieDataList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZombieDataList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZombieDataList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZombieDataList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZombieDataList& from) {
    ZombieDataList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZombieDataList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ZombieDataList";
  }
  protected:
  explicit ZombieDataList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZombiesFieldNumber = 2,
    kPacketTypeFieldNumber = 1,
  };
  // repeated .Protocol.Zombie zombies = 2;
  int zombies_size() const;
  private:
  int _internal_zombies_size() const;
  public:
  void clear_zombies();
  ::Protocol::Zombie* mutable_zombies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Zombie >*
      mutable_zombies();
  private:
  const ::Protocol::Zombie& _internal_zombies(int index) const;
  ::Protocol::Zombie* _internal_add_zombies();
  public:
  const ::Protocol::Zombie& zombies(int index) const;
  ::Protocol::Zombie* add_zombies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Zombie >&
      zombies() const;

  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ZombieDataList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Zombie > zombies_;
    uint32_t packet_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit PROTOBUF_CONSTEXPR Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector3& from) {
    Vector3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class ZombiePath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ZombiePath) */ {
 public:
  inline ZombiePath() : ZombiePath(nullptr) {}
  ~ZombiePath() override;
  explicit PROTOBUF_CONSTEXPR ZombiePath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZombiePath(const ZombiePath& from);
  ZombiePath(ZombiePath&& from) noexcept
    : ZombiePath() {
    *this = ::std::move(from);
  }

  inline ZombiePath& operator=(const ZombiePath& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZombiePath& operator=(ZombiePath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZombiePath& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZombiePath* internal_default_instance() {
    return reinterpret_cast<const ZombiePath*>(
               &_ZombiePath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ZombiePath& a, ZombiePath& b) {
    a.Swap(&b);
  }
  inline void Swap(ZombiePath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZombiePath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZombiePath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZombiePath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZombiePath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZombiePath& from) {
    ZombiePath::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZombiePath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ZombiePath";
  }
  protected:
  explicit ZombiePath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPath1FieldNumber = 3,
    kPath2FieldNumber = 4,
    kLocationFieldNumber = 5,
    kPacketTypeFieldNumber = 1,
    kZombieidFieldNumber = 2,
  };
  // .Protocol.Vector3 path1 = 3;
  bool has_path1() const;
  private:
  bool _internal_has_path1() const;
  public:
  void clear_path1();
  const ::Protocol::Vector3& path1() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_path1();
  ::Protocol::Vector3* mutable_path1();
  void set_allocated_path1(::Protocol::Vector3* path1);
  private:
  const ::Protocol::Vector3& _internal_path1() const;
  ::Protocol::Vector3* _internal_mutable_path1();
  public:
  void unsafe_arena_set_allocated_path1(
      ::Protocol::Vector3* path1);
  ::Protocol::Vector3* unsafe_arena_release_path1();

  // .Protocol.Vector3 path2 = 4;
  bool has_path2() const;
  private:
  bool _internal_has_path2() const;
  public:
  void clear_path2();
  const ::Protocol::Vector3& path2() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_path2();
  ::Protocol::Vector3* mutable_path2();
  void set_allocated_path2(::Protocol::Vector3* path2);
  private:
  const ::Protocol::Vector3& _internal_path2() const;
  ::Protocol::Vector3* _internal_mutable_path2();
  public:
  void unsafe_arena_set_allocated_path2(
      ::Protocol::Vector3* path2);
  ::Protocol::Vector3* unsafe_arena_release_path2();

  // .Protocol.Vector3 location = 5;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::Protocol::Vector3& location() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_location();
  ::Protocol::Vector3* mutable_location();
  void set_allocated_location(::Protocol::Vector3* location);
  private:
  const ::Protocol::Vector3& _internal_location() const;
  ::Protocol::Vector3* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::Protocol::Vector3* location);
  ::Protocol::Vector3* unsafe_arena_release_location();

  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 zombieid = 2;
  void clear_zombieid();
  uint32_t zombieid() const;
  void set_zombieid(uint32_t value);
  private:
  uint32_t _internal_zombieid() const;
  void _internal_set_zombieid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ZombiePath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* path1_;
    ::Protocol::Vector3* path2_;
    ::Protocol::Vector3* location_;
    uint32_t packet_type_;
    uint32_t zombieid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class PatrolPath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PatrolPath) */ {
 public:
  inline PatrolPath() : PatrolPath(nullptr) {}
  ~PatrolPath() override;
  explicit PROTOBUF_CONSTEXPR PatrolPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatrolPath(const PatrolPath& from);
  PatrolPath(PatrolPath&& from) noexcept
    : PatrolPath() {
    *this = ::std::move(from);
  }

  inline PatrolPath& operator=(const PatrolPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatrolPath& operator=(PatrolPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatrolPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatrolPath* internal_default_instance() {
    return reinterpret_cast<const PatrolPath*>(
               &_PatrolPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PatrolPath& a, PatrolPath& b) {
    a.Swap(&b);
  }
  inline void Swap(PatrolPath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatrolPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatrolPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatrolPath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatrolPath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PatrolPath& from) {
    PatrolPath::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatrolPath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PatrolPath";
  }
  protected:
  explicit PatrolPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 3,
    kLocationFieldNumber = 4,
    kPacketTypeFieldNumber = 1,
    kZombieidFieldNumber = 2,
  };
  // .Protocol.Vector3 path = 3;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const ::Protocol::Vector3& path() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_path();
  ::Protocol::Vector3* mutable_path();
  void set_allocated_path(::Protocol::Vector3* path);
  private:
  const ::Protocol::Vector3& _internal_path() const;
  ::Protocol::Vector3* _internal_mutable_path();
  public:
  void unsafe_arena_set_allocated_path(
      ::Protocol::Vector3* path);
  ::Protocol::Vector3* unsafe_arena_release_path();

  // .Protocol.Vector3 location = 4;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::Protocol::Vector3& location() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_location();
  ::Protocol::Vector3* mutable_location();
  void set_allocated_location(::Protocol::Vector3* location);
  private:
  const ::Protocol::Vector3& _internal_location() const;
  ::Protocol::Vector3* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::Protocol::Vector3* location);
  ::Protocol::Vector3* unsafe_arena_release_location();

  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 zombieid = 2;
  void clear_zombieid();
  uint32_t zombieid() const;
  void set_zombieid(uint32_t value);
  private:
  uint32_t _internal_zombieid() const;
  void _internal_set_zombieid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PatrolPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* path_;
    ::Protocol::Vector3* location_;
    uint32_t packet_type_;
    uint32_t zombieid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class Detected final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Detected) */ {
 public:
  inline Detected() : Detected(nullptr) {}
  ~Detected() override;
  explicit PROTOBUF_CONSTEXPR Detected(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Detected(const Detected& from);
  Detected(Detected&& from) noexcept
    : Detected() {
    *this = ::std::move(from);
  }

  inline Detected& operator=(const Detected& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detected& operator=(Detected&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Detected& default_instance() {
    return *internal_default_instance();
  }
  static inline const Detected* internal_default_instance() {
    return reinterpret_cast<const Detected*>(
               &_Detected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Detected& a, Detected& b) {
    a.Swap(&b);
  }
  inline void Swap(Detected* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detected* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Detected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Detected>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Detected& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Detected& from) {
    Detected::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detected* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Detected";
  }
  protected:
  explicit Detected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketTypeFieldNumber = 1,
    kZombieidFieldNumber = 2,
    kPlayeridFieldNumber = 3,
    kPlayerInsightFieldNumber = 4,
  };
  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 zombieid = 2;
  void clear_zombieid();
  uint32_t zombieid() const;
  void set_zombieid(uint32_t value);
  private:
  uint32_t _internal_zombieid() const;
  void _internal_set_zombieid(uint32_t value);
  public:

  // uint32 playerid = 3;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // bool player_insight = 4;
  void clear_player_insight();
  bool player_insight() const;
  void set_player_insight(bool value);
  private:
  bool _internal_player_insight() const;
  void _internal_set_player_insight(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Detected)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t packet_type_;
    uint32_t zombieid_;
    uint32_t playerid_;
    bool player_insight_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class Time final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Time) */ {
 public:
  inline Time() : Time(nullptr) {}
  ~Time() override;
  explicit PROTOBUF_CONSTEXPR Time(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Time(const Time& from);
  Time(Time&& from) noexcept
    : Time() {
    *this = ::std::move(from);
  }

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }
  inline Time& operator=(Time&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Time& default_instance() {
    return *internal_default_instance();
  }
  static inline const Time* internal_default_instance() {
    return reinterpret_cast<const Time*>(
               &_Time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Time& a, Time& b) {
    a.Swap(&b);
  }
  inline void Swap(Time* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Time* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Time* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Time>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Time& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Time& from) {
    Time::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Time";
  }
  protected:
  explicit Time(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketTypeFieldNumber = 1,
    kTimerFieldNumber = 2,
  };
  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // float timer = 2;
  void clear_timer();
  float timer() const;
  void set_timer(float value);
  private:
  float _internal_timer() const;
  void _internal_set_timer(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Time)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t packet_type_;
    float timer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class Equip_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Equip_Item) */ {
 public:
  inline Equip_Item() : Equip_Item(nullptr) {}
  ~Equip_Item() override;
  explicit PROTOBUF_CONSTEXPR Equip_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Equip_Item(const Equip_Item& from);
  Equip_Item(Equip_Item&& from) noexcept
    : Equip_Item() {
    *this = ::std::move(from);
  }

  inline Equip_Item& operator=(const Equip_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Equip_Item& operator=(Equip_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Equip_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const Equip_Item* internal_default_instance() {
    return reinterpret_cast<const Equip_Item*>(
               &_Equip_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Equip_Item& a, Equip_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Equip_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Equip_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Equip_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Equip_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Equip_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Equip_Item& from) {
    Equip_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Equip_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Equip_Item";
  }
  protected:
  explicit Equip_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemnameFieldNumber = 3,
    kPacketTypeFieldNumber = 1,
    kPlayeridFieldNumber = 2,
    kItemtypeFieldNumber = 4,
  };
  // string itemname = 3;
  void clear_itemname();
  const std::string& itemname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_itemname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_itemname();
  PROTOBUF_NODISCARD std::string* release_itemname();
  void set_allocated_itemname(std::string* itemname);
  private:
  const std::string& _internal_itemname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_itemname(const std::string& value);
  std::string* _internal_mutable_itemname();
  public:

  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 playerid = 2;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // uint32 itemtype = 4;
  void clear_itemtype();
  uint32_t itemtype() const;
  void set_itemtype(uint32_t value);
  private:
  uint32_t _internal_itemtype() const;
  void _internal_set_itemtype(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Equip_Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr itemname_;
    uint32_t packet_type_;
    uint32_t playerid_;
    uint32_t itemtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class ping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ping) */ {
 public:
  inline ping() : ping(nullptr) {}
  ~ping() override;
  explicit PROTOBUF_CONSTEXPR ping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ping(const ping& from);
  ping(ping&& from) noexcept
    : ping() {
    *this = ::std::move(from);
  }

  inline ping& operator=(const ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline ping& operator=(ping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const ping* internal_default_instance() {
    return reinterpret_cast<const ping*>(
               &_ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ping& a, ping& b) {
    a.Swap(&b);
  }
  inline void Swap(ping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ping& from) {
    ping::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ping";
  }
  protected:
  explicit ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketTypeFieldNumber = 1,
    kPlayeridFieldNumber = 2,
  };
  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 playerid = 2;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t packet_type_;
    uint32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class patrol_hit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.patrol_hit) */ {
 public:
  inline patrol_hit() : patrol_hit(nullptr) {}
  ~patrol_hit() override;
  explicit PROTOBUF_CONSTEXPR patrol_hit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  patrol_hit(const patrol_hit& from);
  patrol_hit(patrol_hit&& from) noexcept
    : patrol_hit() {
    *this = ::std::move(from);
  }

  inline patrol_hit& operator=(const patrol_hit& from) {
    CopyFrom(from);
    return *this;
  }
  inline patrol_hit& operator=(patrol_hit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const patrol_hit& default_instance() {
    return *internal_default_instance();
  }
  static inline const patrol_hit* internal_default_instance() {
    return reinterpret_cast<const patrol_hit*>(
               &_patrol_hit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(patrol_hit& a, patrol_hit& b) {
    a.Swap(&b);
  }
  inline void Swap(patrol_hit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(patrol_hit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  patrol_hit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<patrol_hit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const patrol_hit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const patrol_hit& from) {
    patrol_hit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(patrol_hit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.patrol_hit";
  }
  protected:
  explicit patrol_hit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketTypeFieldNumber = 1,
    kZombieidFieldNumber = 2,
  };
  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 zombieid = 2;
  void clear_zombieid();
  uint32_t zombieid() const;
  void set_zombieid(uint32_t value);
  private:
  uint32_t _internal_zombieid() const;
  void _internal_set_zombieid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.patrol_hit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t packet_type_;
    uint32_t zombieid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class set_item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.set_item) */ {
 public:
  inline set_item() : set_item(nullptr) {}
  ~set_item() override;
  explicit PROTOBUF_CONSTEXPR set_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  set_item(const set_item& from);
  set_item(set_item&& from) noexcept
    : set_item() {
    *this = ::std::move(from);
  }

  inline set_item& operator=(const set_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline set_item& operator=(set_item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const set_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const set_item* internal_default_instance() {
    return reinterpret_cast<const set_item*>(
               &_set_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(set_item& a, set_item& b) {
    a.Swap(&b);
  }
  inline void Swap(set_item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(set_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  set_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<set_item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const set_item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const set_item& from) {
    set_item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(set_item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.set_item";
  }
  protected:
  explicit set_item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemnameFieldNumber = 3,
    kTexturePathFieldNumber = 5,
    kPacketTypeFieldNumber = 1,
    kItemidFieldNumber = 2,
    kItemclassFieldNumber = 4,
    kCountFieldNumber = 6,
    kFloorFieldNumber = 7,
    kPosxFieldNumber = 8,
    kPosyFieldNumber = 9,
    kPoszFieldNumber = 10,
  };
  // string itemname = 3;
  void clear_itemname();
  const std::string& itemname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_itemname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_itemname();
  PROTOBUF_NODISCARD std::string* release_itemname();
  void set_allocated_itemname(std::string* itemname);
  private:
  const std::string& _internal_itemname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_itemname(const std::string& value);
  std::string* _internal_mutable_itemname();
  public:

  // string texture_path = 5;
  void clear_texture_path();
  const std::string& texture_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_texture_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_texture_path();
  PROTOBUF_NODISCARD std::string* release_texture_path();
  void set_allocated_texture_path(std::string* texture_path);
  private:
  const std::string& _internal_texture_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_texture_path(const std::string& value);
  std::string* _internal_mutable_texture_path();
  public:

  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 itemid = 2;
  void clear_itemid();
  uint32_t itemid() const;
  void set_itemid(uint32_t value);
  private:
  uint32_t _internal_itemid() const;
  void _internal_set_itemid(uint32_t value);
  public:

  // uint32 itemclass = 4;
  void clear_itemclass();
  uint32_t itemclass() const;
  void set_itemclass(uint32_t value);
  private:
  uint32_t _internal_itemclass() const;
  void _internal_set_itemclass(uint32_t value);
  public:

  // uint32 count = 6;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // uint32 floor = 7;
  void clear_floor();
  uint32_t floor() const;
  void set_floor(uint32_t value);
  private:
  uint32_t _internal_floor() const;
  void _internal_set_floor(uint32_t value);
  public:

  // float posx = 8;
  void clear_posx();
  float posx() const;
  void set_posx(float value);
  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);
  public:

  // float posy = 9;
  void clear_posy();
  float posy() const;
  void set_posy(float value);
  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);
  public:

  // float posz = 10;
  void clear_posz();
  float posz() const;
  void set_posz(float value);
  private:
  float _internal_posz() const;
  void _internal_set_posz(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.set_item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr itemname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr texture_path_;
    uint32_t packet_type_;
    uint32_t itemid_;
    uint32_t itemclass_;
    uint32_t count_;
    uint32_t floor_;
    float posx_;
    float posy_;
    float posz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class ItemDataList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ItemDataList) */ {
 public:
  inline ItemDataList() : ItemDataList(nullptr) {}
  ~ItemDataList() override;
  explicit PROTOBUF_CONSTEXPR ItemDataList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemDataList(const ItemDataList& from);
  ItemDataList(ItemDataList&& from) noexcept
    : ItemDataList() {
    *this = ::std::move(from);
  }

  inline ItemDataList& operator=(const ItemDataList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemDataList& operator=(ItemDataList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemDataList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemDataList* internal_default_instance() {
    return reinterpret_cast<const ItemDataList*>(
               &_ItemDataList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ItemDataList& a, ItemDataList& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemDataList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemDataList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemDataList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemDataList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ItemDataList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ItemDataList& from) {
    ItemDataList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemDataList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ItemDataList";
  }
  protected:
  explicit ItemDataList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kPacketTypeFieldNumber = 1,
  };
  // repeated .Protocol.set_item items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::Protocol::set_item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::set_item >*
      mutable_items();
  private:
  const ::Protocol::set_item& _internal_items(int index) const;
  ::Protocol::set_item* _internal_add_items();
  public:
  const ::Protocol::set_item& items(int index) const;
  ::Protocol::set_item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::set_item >&
      items() const;

  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ItemDataList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::set_item > items_;
    uint32_t packet_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class set_car final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.set_car) */ {
 public:
  inline set_car() : set_car(nullptr) {}
  ~set_car() override;
  explicit PROTOBUF_CONSTEXPR set_car(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  set_car(const set_car& from);
  set_car(set_car&& from) noexcept
    : set_car() {
    *this = ::std::move(from);
  }

  inline set_car& operator=(const set_car& from) {
    CopyFrom(from);
    return *this;
  }
  inline set_car& operator=(set_car&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const set_car& default_instance() {
    return *internal_default_instance();
  }
  static inline const set_car* internal_default_instance() {
    return reinterpret_cast<const set_car*>(
               &_set_car_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(set_car& a, set_car& b) {
    a.Swap(&b);
  }
  inline void Swap(set_car* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(set_car* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  set_car* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<set_car>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const set_car& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const set_car& from) {
    set_car::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(set_car* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.set_car";
  }
  protected:
  explicit set_car(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCarnameFieldNumber = 3,
    kCarkeynameFieldNumber = 10,
    kPacketTypeFieldNumber = 1,
    kCaridFieldNumber = 2,
    kPosxFieldNumber = 4,
    kPosyFieldNumber = 5,
    kPoszFieldNumber = 6,
    kPitchFieldNumber = 7,
    kYawFieldNumber = 8,
    kRollFieldNumber = 9,
  };
  // string carname = 3;
  void clear_carname();
  const std::string& carname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_carname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_carname();
  PROTOBUF_NODISCARD std::string* release_carname();
  void set_allocated_carname(std::string* carname);
  private:
  const std::string& _internal_carname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_carname(const std::string& value);
  std::string* _internal_mutable_carname();
  public:

  // string carkeyname = 10;
  void clear_carkeyname();
  const std::string& carkeyname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_carkeyname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_carkeyname();
  PROTOBUF_NODISCARD std::string* release_carkeyname();
  void set_allocated_carkeyname(std::string* carkeyname);
  private:
  const std::string& _internal_carkeyname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_carkeyname(const std::string& value);
  std::string* _internal_mutable_carkeyname();
  public:

  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 carid = 2;
  void clear_carid();
  uint32_t carid() const;
  void set_carid(uint32_t value);
  private:
  uint32_t _internal_carid() const;
  void _internal_set_carid(uint32_t value);
  public:

  // float posx = 4;
  void clear_posx();
  float posx() const;
  void set_posx(float value);
  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);
  public:

  // float posy = 5;
  void clear_posy();
  float posy() const;
  void set_posy(float value);
  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);
  public:

  // float posz = 6;
  void clear_posz();
  float posz() const;
  void set_posz(float value);
  private:
  float _internal_posz() const;
  void _internal_set_posz(float value);
  public:

  // float pitch = 7;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float yaw = 8;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float roll = 9;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.set_car)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr carname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr carkeyname_;
    uint32_t packet_type_;
    uint32_t carid_;
    float posx_;
    float posy_;
    float posz_;
    float pitch_;
    float yaw_;
    float roll_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class CarDataList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CarDataList) */ {
 public:
  inline CarDataList() : CarDataList(nullptr) {}
  ~CarDataList() override;
  explicit PROTOBUF_CONSTEXPR CarDataList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CarDataList(const CarDataList& from);
  CarDataList(CarDataList&& from) noexcept
    : CarDataList() {
    *this = ::std::move(from);
  }

  inline CarDataList& operator=(const CarDataList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarDataList& operator=(CarDataList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CarDataList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CarDataList* internal_default_instance() {
    return reinterpret_cast<const CarDataList*>(
               &_CarDataList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CarDataList& a, CarDataList& b) {
    a.Swap(&b);
  }
  inline void Swap(CarDataList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CarDataList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CarDataList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CarDataList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CarDataList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CarDataList& from) {
    CarDataList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarDataList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CarDataList";
  }
  protected:
  explicit CarDataList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCarsFieldNumber = 2,
    kPacketTypeFieldNumber = 1,
  };
  // repeated .Protocol.set_car cars = 2;
  int cars_size() const;
  private:
  int _internal_cars_size() const;
  public:
  void clear_cars();
  ::Protocol::set_car* mutable_cars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::set_car >*
      mutable_cars();
  private:
  const ::Protocol::set_car& _internal_cars(int index) const;
  ::Protocol::set_car* _internal_add_cars();
  public:
  const ::Protocol::set_car& cars(int index) const;
  ::Protocol::set_car* add_cars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::set_car >&
      cars() const;

  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.CarDataList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::set_car > cars_;
    uint32_t packet_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class destroy_item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.destroy_item) */ {
 public:
  inline destroy_item() : destroy_item(nullptr) {}
  ~destroy_item() override;
  explicit PROTOBUF_CONSTEXPR destroy_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  destroy_item(const destroy_item& from);
  destroy_item(destroy_item&& from) noexcept
    : destroy_item() {
    *this = ::std::move(from);
  }

  inline destroy_item& operator=(const destroy_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline destroy_item& operator=(destroy_item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const destroy_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const destroy_item* internal_default_instance() {
    return reinterpret_cast<const destroy_item*>(
               &_destroy_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(destroy_item& a, destroy_item& b) {
    a.Swap(&b);
  }
  inline void Swap(destroy_item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(destroy_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  destroy_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<destroy_item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const destroy_item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const destroy_item& from) {
    destroy_item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(destroy_item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.destroy_item";
  }
  protected:
  explicit destroy_item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketTypeFieldNumber = 1,
    kItemidFieldNumber = 2,
    kPlayeridFieldNumber = 3,
  };
  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 itemid = 2;
  void clear_itemid();
  uint32_t itemid() const;
  void set_itemid(uint32_t value);
  private:
  uint32_t _internal_itemid() const;
  void _internal_set_itemid(uint32_t value);
  public:

  // uint32 playerid = 3;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.destroy_item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t packet_type_;
    uint32_t itemid_;
    uint32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class drop_item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.drop_item) */ {
 public:
  inline drop_item() : drop_item(nullptr) {}
  ~drop_item() override;
  explicit PROTOBUF_CONSTEXPR drop_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  drop_item(const drop_item& from);
  drop_item(drop_item&& from) noexcept
    : drop_item() {
    *this = ::std::move(from);
  }

  inline drop_item& operator=(const drop_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline drop_item& operator=(drop_item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const drop_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const drop_item* internal_default_instance() {
    return reinterpret_cast<const drop_item*>(
               &_drop_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(drop_item& a, drop_item& b) {
    a.Swap(&b);
  }
  inline void Swap(drop_item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(drop_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  drop_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<drop_item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const drop_item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const drop_item& from) {
    drop_item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(drop_item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.drop_item";
  }
  protected:
  explicit drop_item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemnameFieldNumber = 3,
    kTexturePathFieldNumber = 5,
    kPacketTypeFieldNumber = 1,
    kItemidFieldNumber = 2,
    kItemclassFieldNumber = 4,
    kCountFieldNumber = 6,
    kFloorFieldNumber = 7,
    kPosxFieldNumber = 8,
    kPosyFieldNumber = 9,
    kPoszFieldNumber = 10,
  };
  // string itemname = 3;
  void clear_itemname();
  const std::string& itemname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_itemname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_itemname();
  PROTOBUF_NODISCARD std::string* release_itemname();
  void set_allocated_itemname(std::string* itemname);
  private:
  const std::string& _internal_itemname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_itemname(const std::string& value);
  std::string* _internal_mutable_itemname();
  public:

  // string texture_path = 5;
  void clear_texture_path();
  const std::string& texture_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_texture_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_texture_path();
  PROTOBUF_NODISCARD std::string* release_texture_path();
  void set_allocated_texture_path(std::string* texture_path);
  private:
  const std::string& _internal_texture_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_texture_path(const std::string& value);
  std::string* _internal_mutable_texture_path();
  public:

  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 itemid = 2;
  void clear_itemid();
  uint32_t itemid() const;
  void set_itemid(uint32_t value);
  private:
  uint32_t _internal_itemid() const;
  void _internal_set_itemid(uint32_t value);
  public:

  // uint32 itemclass = 4;
  void clear_itemclass();
  uint32_t itemclass() const;
  void set_itemclass(uint32_t value);
  private:
  uint32_t _internal_itemclass() const;
  void _internal_set_itemclass(uint32_t value);
  public:

  // uint32 count = 6;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // uint32 floor = 7;
  void clear_floor();
  uint32_t floor() const;
  void set_floor(uint32_t value);
  private:
  uint32_t _internal_floor() const;
  void _internal_set_floor(uint32_t value);
  public:

  // float posx = 8;
  void clear_posx();
  float posx() const;
  void set_posx(float value);
  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);
  public:

  // float posy = 9;
  void clear_posy();
  float posy() const;
  void set_posy(float value);
  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);
  public:

  // float posz = 10;
  void clear_posz();
  float posz() const;
  void set_posz(float value);
  private:
  float _internal_posz() const;
  void _internal_set_posz(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.drop_item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr itemname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr texture_path_;
    uint32_t packet_type_;
    uint32_t itemid_;
    uint32_t itemclass_;
    uint32_t count_;
    uint32_t floor_;
    float posx_;
    float posy_;
    float posz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class get_key final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.get_key) */ {
 public:
  inline get_key() : get_key(nullptr) {}
  ~get_key() override;
  explicit PROTOBUF_CONSTEXPR get_key(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_key(const get_key& from);
  get_key(get_key&& from) noexcept
    : get_key() {
    *this = ::std::move(from);
  }

  inline get_key& operator=(const get_key& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_key& operator=(get_key&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_key& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_key* internal_default_instance() {
    return reinterpret_cast<const get_key*>(
               &_get_key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(get_key& a, get_key& b) {
    a.Swap(&b);
  }
  inline void Swap(get_key* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_key* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  get_key* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<get_key>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_key& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const get_key& from) {
    get_key::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_key* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.get_key";
  }
  protected:
  explicit get_key(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketTypeFieldNumber = 1,
    kItemidFieldNumber = 2,
    kItemboxidFieldNumber = 3,
    kPlayeridFieldNumber = 4,
  };
  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 itemid = 2;
  void clear_itemid();
  uint32_t itemid() const;
  void set_itemid(uint32_t value);
  private:
  uint32_t _internal_itemid() const;
  void _internal_set_itemid(uint32_t value);
  public:

  // uint32 itemboxid = 3;
  void clear_itemboxid();
  uint32_t itemboxid() const;
  void set_itemboxid(uint32_t value);
  private:
  uint32_t _internal_itemboxid() const;
  void _internal_set_itemboxid(uint32_t value);
  public:

  // uint32 playerid = 4;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.get_key)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t packet_type_;
    uint32_t itemid_;
    uint32_t itemboxid_;
    uint32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class escape final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.escape) */ {
 public:
  inline escape() : escape(nullptr) {}
  ~escape() override;
  explicit PROTOBUF_CONSTEXPR escape(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  escape(const escape& from);
  escape(escape&& from) noexcept
    : escape() {
    *this = ::std::move(from);
  }

  inline escape& operator=(const escape& from) {
    CopyFrom(from);
    return *this;
  }
  inline escape& operator=(escape&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const escape& default_instance() {
    return *internal_default_instance();
  }
  static inline const escape* internal_default_instance() {
    return reinterpret_cast<const escape*>(
               &_escape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(escape& a, escape& b) {
    a.Swap(&b);
  }
  inline void Swap(escape* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(escape* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  escape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<escape>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const escape& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const escape& from) {
    escape::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(escape* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.escape";
  }
  protected:
  explicit escape(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketTypeFieldNumber = 1,
    kPlayeridFieldNumber = 2,
    kRootFieldNumber = 3,
  };
  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 playerid = 2;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // uint32 root = 3;
  void clear_root();
  uint32_t root() const;
  void set_root(uint32_t value);
  private:
  uint32_t _internal_root() const;
  void _internal_set_root(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.escape)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t packet_type_;
    uint32_t playerid_;
    uint32_t root_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class game_clear final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.game_clear) */ {
 public:
  inline game_clear() : game_clear(nullptr) {}
  ~game_clear() override;
  explicit PROTOBUF_CONSTEXPR game_clear(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  game_clear(const game_clear& from);
  game_clear(game_clear&& from) noexcept
    : game_clear() {
    *this = ::std::move(from);
  }

  inline game_clear& operator=(const game_clear& from) {
    CopyFrom(from);
    return *this;
  }
  inline game_clear& operator=(game_clear&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const game_clear& default_instance() {
    return *internal_default_instance();
  }
  static inline const game_clear* internal_default_instance() {
    return reinterpret_cast<const game_clear*>(
               &_game_clear_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(game_clear& a, game_clear& b) {
    a.Swap(&b);
  }
  inline void Swap(game_clear* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(game_clear* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  game_clear* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<game_clear>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const game_clear& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const game_clear& from) {
    game_clear::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(game_clear* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.game_clear";
  }
  protected:
  explicit game_clear(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenPlayerFieldNumber = 5,
    kBestKillPlayerFieldNumber = 7,
    kPacketTypeFieldNumber = 1,
    kRootFieldNumber = 2,
    kAlivePlayersFieldNumber = 3,
    kDeadPlayersFieldNumber = 4,
    kMyKillcountFieldNumber = 6,
    kBestKillcountFieldNumber = 8,
  };
  // string open_player = 5;
  void clear_open_player();
  const std::string& open_player() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_open_player(ArgT0&& arg0, ArgT... args);
  std::string* mutable_open_player();
  PROTOBUF_NODISCARD std::string* release_open_player();
  void set_allocated_open_player(std::string* open_player);
  private:
  const std::string& _internal_open_player() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_player(const std::string& value);
  std::string* _internal_mutable_open_player();
  public:

  // string best_kill_player = 7;
  void clear_best_kill_player();
  const std::string& best_kill_player() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_best_kill_player(ArgT0&& arg0, ArgT... args);
  std::string* mutable_best_kill_player();
  PROTOBUF_NODISCARD std::string* release_best_kill_player();
  void set_allocated_best_kill_player(std::string* best_kill_player);
  private:
  const std::string& _internal_best_kill_player() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_best_kill_player(const std::string& value);
  std::string* _internal_mutable_best_kill_player();
  public:

  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 root = 2;
  void clear_root();
  uint32_t root() const;
  void set_root(uint32_t value);
  private:
  uint32_t _internal_root() const;
  void _internal_set_root(uint32_t value);
  public:

  // uint32 alive_players = 3;
  void clear_alive_players();
  uint32_t alive_players() const;
  void set_alive_players(uint32_t value);
  private:
  uint32_t _internal_alive_players() const;
  void _internal_set_alive_players(uint32_t value);
  public:

  // uint32 dead_players = 4;
  void clear_dead_players();
  uint32_t dead_players() const;
  void set_dead_players(uint32_t value);
  private:
  uint32_t _internal_dead_players() const;
  void _internal_set_dead_players(uint32_t value);
  public:

  // uint32 my_killcount = 6;
  void clear_my_killcount();
  uint32_t my_killcount() const;
  void set_my_killcount(uint32_t value);
  private:
  uint32_t _internal_my_killcount() const;
  void _internal_set_my_killcount(uint32_t value);
  public:

  // uint32 best_killcount = 8;
  void clear_best_killcount();
  uint32_t best_killcount() const;
  void set_best_killcount(uint32_t value);
  private:
  uint32_t _internal_best_killcount() const;
  void _internal_set_best_killcount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.game_clear)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_player_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr best_kill_player_;
    uint32_t packet_type_;
    uint32_t root_;
    uint32_t alive_players_;
    uint32_t dead_players_;
    uint32_t my_killcount_;
    uint32_t best_killcount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// -------------------------------------------------------------------

class send_complete final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.send_complete) */ {
 public:
  inline send_complete() : send_complete(nullptr) {}
  ~send_complete() override;
  explicit PROTOBUF_CONSTEXPR send_complete(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  send_complete(const send_complete& from);
  send_complete(send_complete&& from) noexcept
    : send_complete() {
    *this = ::std::move(from);
  }

  inline send_complete& operator=(const send_complete& from) {
    CopyFrom(from);
    return *this;
  }
  inline send_complete& operator=(send_complete&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const send_complete& default_instance() {
    return *internal_default_instance();
  }
  static inline const send_complete* internal_default_instance() {
    return reinterpret_cast<const send_complete*>(
               &_send_complete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(send_complete& a, send_complete& b) {
    a.Swap(&b);
  }
  inline void Swap(send_complete* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(send_complete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  send_complete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<send_complete>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const send_complete& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const send_complete& from) {
    send_complete::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(send_complete* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.send_complete";
  }
  protected:
  explicit send_complete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketTypeFieldNumber = 1,
    kCompleteTypeFieldNumber = 2,
  };
  // uint32 packet_type = 1;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 complete_type = 2;
  void clear_complete_type();
  uint32_t complete_type() const;
  void set_complete_type(uint32_t value);
  private:
  uint32_t _internal_complete_type() const;
  void _internal_set_complete_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.send_complete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t packet_type_;
    uint32_t complete_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gstruct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Character

// uint32 packet_type = 1;
inline void Character::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t Character::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t Character::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.packet_type)
  return _internal_packet_type();
}
inline void Character::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void Character::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.packet_type)
}

// uint32 playerid = 2;
inline void Character::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t Character::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t Character::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.playerid)
  return _internal_playerid();
}
inline void Character::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void Character::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.playerid)
}

// uint32 charactertype = 3;
inline void Character::clear_charactertype() {
  _impl_.charactertype_ = 0u;
}
inline uint32_t Character::_internal_charactertype() const {
  return _impl_.charactertype_;
}
inline uint32_t Character::charactertype() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.charactertype)
  return _internal_charactertype();
}
inline void Character::_internal_set_charactertype(uint32_t value) {
  
  _impl_.charactertype_ = value;
}
inline void Character::set_charactertype(uint32_t value) {
  _internal_set_charactertype(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.charactertype)
}

// float x = 4;
inline void Character::clear_x() {
  _impl_.x_ = 0;
}
inline float Character::_internal_x() const {
  return _impl_.x_;
}
inline float Character::x() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.x)
  return _internal_x();
}
inline void Character::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Character::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.x)
}

// float y = 5;
inline void Character::clear_y() {
  _impl_.y_ = 0;
}
inline float Character::_internal_y() const {
  return _impl_.y_;
}
inline float Character::y() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.y)
  return _internal_y();
}
inline void Character::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Character::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.y)
}

// float z = 6;
inline void Character::clear_z() {
  _impl_.z_ = 0;
}
inline float Character::_internal_z() const {
  return _impl_.z_;
}
inline float Character::z() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.z)
  return _internal_z();
}
inline void Character::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Character::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.z)
}

// float pitch = 7;
inline void Character::clear_pitch() {
  _impl_.pitch_ = 0;
}
inline float Character::_internal_pitch() const {
  return _impl_.pitch_;
}
inline float Character::pitch() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.pitch)
  return _internal_pitch();
}
inline void Character::_internal_set_pitch(float value) {
  
  _impl_.pitch_ = value;
}
inline void Character::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.pitch)
}

// float yaw = 8;
inline void Character::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float Character::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float Character::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.yaw)
  return _internal_yaw();
}
inline void Character::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void Character::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.yaw)
}

// float roll = 9;
inline void Character::clear_roll() {
  _impl_.roll_ = 0;
}
inline float Character::_internal_roll() const {
  return _impl_.roll_;
}
inline float Character::roll() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.roll)
  return _internal_roll();
}
inline void Character::_internal_set_roll(float value) {
  
  _impl_.roll_ = value;
}
inline void Character::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.roll)
}

// float hp = 10;
inline void Character::clear_hp() {
  _impl_.hp_ = 0;
}
inline float Character::_internal_hp() const {
  return _impl_.hp_;
}
inline float Character::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.hp)
  return _internal_hp();
}
inline void Character::_internal_set_hp(float value) {
  
  _impl_.hp_ = value;
}
inline void Character::set_hp(float value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.hp)
}

// uint32 b_run = 11;
inline void Character::clear_b_run() {
  _impl_.b_run_ = 0u;
}
inline uint32_t Character::_internal_b_run() const {
  return _impl_.b_run_;
}
inline uint32_t Character::b_run() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.b_run)
  return _internal_b_run();
}
inline void Character::_internal_set_b_run(uint32_t value) {
  
  _impl_.b_run_ = value;
}
inline void Character::set_b_run(uint32_t value) {
  _internal_set_b_run(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.b_run)
}

// uint32 b_jump = 12;
inline void Character::clear_b_jump() {
  _impl_.b_jump_ = 0u;
}
inline uint32_t Character::_internal_b_jump() const {
  return _impl_.b_jump_;
}
inline uint32_t Character::b_jump() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.b_jump)
  return _internal_b_jump();
}
inline void Character::_internal_set_b_jump(uint32_t value) {
  
  _impl_.b_jump_ = value;
}
inline void Character::set_b_jump(uint32_t value) {
  _internal_set_b_jump(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.b_jump)
}

// bool isingame = 13;
inline void Character::clear_isingame() {
  _impl_.isingame_ = false;
}
inline bool Character::_internal_isingame() const {
  return _impl_.isingame_;
}
inline bool Character::isingame() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.isingame)
  return _internal_isingame();
}
inline void Character::_internal_set_isingame(bool value) {
  
  _impl_.isingame_ = value;
}
inline void Character::set_isingame(bool value) {
  _internal_set_isingame(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.isingame)
}

// string username = 14;
inline void Character::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& Character::username() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Character::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.Character.username)
}
inline std::string* Character::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Protocol.Character.username)
  return _s;
}
inline const std::string& Character::_internal_username() const {
  return _impl_.username_.Get();
}
inline void Character::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* Character::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* Character::release_username() {
  // @@protoc_insertion_point(field_release:Protocol.Character.username)
  return _impl_.username_.Release();
}
inline void Character::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.Character.username)
}

// -------------------------------------------------------------------

// jump

// uint32 packet_type = 1;
inline void jump::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t jump::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t jump::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.jump.packet_type)
  return _internal_packet_type();
}
inline void jump::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void jump::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.jump.packet_type)
}

// uint32 playerid = 2;
inline void jump::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t jump::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t jump::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.jump.playerid)
  return _internal_playerid();
}
inline void jump::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void jump::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.jump.playerid)
}

// -------------------------------------------------------------------

// Character_Attack

// uint32 packet_type = 1;
inline void Character_Attack::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t Character_Attack::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t Character_Attack::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.Character_Attack.packet_type)
  return _internal_packet_type();
}
inline void Character_Attack::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void Character_Attack::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.Character_Attack.packet_type)
}

// uint32 playerid = 2;
inline void Character_Attack::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t Character_Attack::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t Character_Attack::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.Character_Attack.playerid)
  return _internal_playerid();
}
inline void Character_Attack::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void Character_Attack::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.Character_Attack.playerid)
}

// bool attack = 3;
inline void Character_Attack::clear_attack() {
  _impl_.attack_ = false;
}
inline bool Character_Attack::_internal_attack() const {
  return _impl_.attack_;
}
inline bool Character_Attack::attack() const {
  // @@protoc_insertion_point(field_get:Protocol.Character_Attack.attack)
  return _internal_attack();
}
inline void Character_Attack::_internal_set_attack(bool value) {
  
  _impl_.attack_ = value;
}
inline void Character_Attack::set_attack(bool value) {
  _internal_set_attack(value);
  // @@protoc_insertion_point(field_set:Protocol.Character_Attack.attack)
}

// -------------------------------------------------------------------

// Zombie

// uint32 packet_type = 1;
inline void Zombie::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t Zombie::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t Zombie::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.packet_type)
  return _internal_packet_type();
}
inline void Zombie::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void Zombie::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.packet_type)
}

// uint32 zombieid = 2;
inline void Zombie::clear_zombieid() {
  _impl_.zombieid_ = 0u;
}
inline uint32_t Zombie::_internal_zombieid() const {
  return _impl_.zombieid_;
}
inline uint32_t Zombie::zombieid() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.zombieid)
  return _internal_zombieid();
}
inline void Zombie::_internal_set_zombieid(uint32_t value) {
  
  _impl_.zombieid_ = value;
}
inline void Zombie::set_zombieid(uint32_t value) {
  _internal_set_zombieid(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.zombieid)
}

// uint32 zombietype = 3;
inline void Zombie::clear_zombietype() {
  _impl_.zombietype_ = 0u;
}
inline uint32_t Zombie::_internal_zombietype() const {
  return _impl_.zombietype_;
}
inline uint32_t Zombie::zombietype() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.zombietype)
  return _internal_zombietype();
}
inline void Zombie::_internal_set_zombietype(uint32_t value) {
  
  _impl_.zombietype_ = value;
}
inline void Zombie::set_zombietype(uint32_t value) {
  _internal_set_zombietype(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.zombietype)
}

// float x = 4;
inline void Zombie::clear_x() {
  _impl_.x_ = 0;
}
inline float Zombie::_internal_x() const {
  return _impl_.x_;
}
inline float Zombie::x() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.x)
  return _internal_x();
}
inline void Zombie::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Zombie::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.x)
}

// float y = 5;
inline void Zombie::clear_y() {
  _impl_.y_ = 0;
}
inline float Zombie::_internal_y() const {
  return _impl_.y_;
}
inline float Zombie::y() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.y)
  return _internal_y();
}
inline void Zombie::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Zombie::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.y)
}

// float z = 6;
inline void Zombie::clear_z() {
  _impl_.z_ = 0;
}
inline float Zombie::_internal_z() const {
  return _impl_.z_;
}
inline float Zombie::z() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.z)
  return _internal_z();
}
inline void Zombie::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Zombie::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.z)
}

// float pitch = 7;
inline void Zombie::clear_pitch() {
  _impl_.pitch_ = 0;
}
inline float Zombie::_internal_pitch() const {
  return _impl_.pitch_;
}
inline float Zombie::pitch() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.pitch)
  return _internal_pitch();
}
inline void Zombie::_internal_set_pitch(float value) {
  
  _impl_.pitch_ = value;
}
inline void Zombie::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.pitch)
}

// float yaw = 8;
inline void Zombie::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float Zombie::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float Zombie::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.yaw)
  return _internal_yaw();
}
inline void Zombie::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void Zombie::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.yaw)
}

// float roll = 9;
inline void Zombie::clear_roll() {
  _impl_.roll_ = 0;
}
inline float Zombie::_internal_roll() const {
  return _impl_.roll_;
}
inline float Zombie::roll() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.roll)
  return _internal_roll();
}
inline void Zombie::_internal_set_roll(float value) {
  
  _impl_.roll_ = value;
}
inline void Zombie::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.roll)
}

// -------------------------------------------------------------------

// Zombie_attack

// uint32 packet_type = 1;
inline void Zombie_attack::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t Zombie_attack::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t Zombie_attack::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie_attack.packet_type)
  return _internal_packet_type();
}
inline void Zombie_attack::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void Zombie_attack::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie_attack.packet_type)
}

// uint32 zombieid = 2;
inline void Zombie_attack::clear_zombieid() {
  _impl_.zombieid_ = 0u;
}
inline uint32_t Zombie_attack::_internal_zombieid() const {
  return _impl_.zombieid_;
}
inline uint32_t Zombie_attack::zombieid() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie_attack.zombieid)
  return _internal_zombieid();
}
inline void Zombie_attack::_internal_set_zombieid(uint32_t value) {
  
  _impl_.zombieid_ = value;
}
inline void Zombie_attack::set_zombieid(uint32_t value) {
  _internal_set_zombieid(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie_attack.zombieid)
}

// uint32 playerid = 3;
inline void Zombie_attack::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t Zombie_attack::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t Zombie_attack::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie_attack.playerid)
  return _internal_playerid();
}
inline void Zombie_attack::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void Zombie_attack::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie_attack.playerid)
}

// -------------------------------------------------------------------

// Zombie_hp

// uint32 packet_type = 1;
inline void Zombie_hp::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t Zombie_hp::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t Zombie_hp::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie_hp.packet_type)
  return _internal_packet_type();
}
inline void Zombie_hp::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void Zombie_hp::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie_hp.packet_type)
}

// uint32 zombieid = 2;
inline void Zombie_hp::clear_zombieid() {
  _impl_.zombieid_ = 0u;
}
inline uint32_t Zombie_hp::_internal_zombieid() const {
  return _impl_.zombieid_;
}
inline uint32_t Zombie_hp::zombieid() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie_hp.zombieid)
  return _internal_zombieid();
}
inline void Zombie_hp::_internal_set_zombieid(uint32_t value) {
  
  _impl_.zombieid_ = value;
}
inline void Zombie_hp::set_zombieid(uint32_t value) {
  _internal_set_zombieid(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie_hp.zombieid)
}

// float damage = 3;
inline void Zombie_hp::clear_damage() {
  _impl_.damage_ = 0;
}
inline float Zombie_hp::_internal_damage() const {
  return _impl_.damage_;
}
inline float Zombie_hp::damage() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie_hp.damage)
  return _internal_damage();
}
inline void Zombie_hp::_internal_set_damage(float value) {
  
  _impl_.damage_ = value;
}
inline void Zombie_hp::set_damage(float value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie_hp.damage)
}

// -------------------------------------------------------------------

// ZombieDataList

// uint32 packet_type = 1;
inline void ZombieDataList::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t ZombieDataList::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t ZombieDataList::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.ZombieDataList.packet_type)
  return _internal_packet_type();
}
inline void ZombieDataList::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void ZombieDataList::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.ZombieDataList.packet_type)
}

// repeated .Protocol.Zombie zombies = 2;
inline int ZombieDataList::_internal_zombies_size() const {
  return _impl_.zombies_.size();
}
inline int ZombieDataList::zombies_size() const {
  return _internal_zombies_size();
}
inline void ZombieDataList::clear_zombies() {
  _impl_.zombies_.Clear();
}
inline ::Protocol::Zombie* ZombieDataList::mutable_zombies(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.ZombieDataList.zombies)
  return _impl_.zombies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Zombie >*
ZombieDataList::mutable_zombies() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.ZombieDataList.zombies)
  return &_impl_.zombies_;
}
inline const ::Protocol::Zombie& ZombieDataList::_internal_zombies(int index) const {
  return _impl_.zombies_.Get(index);
}
inline const ::Protocol::Zombie& ZombieDataList::zombies(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.ZombieDataList.zombies)
  return _internal_zombies(index);
}
inline ::Protocol::Zombie* ZombieDataList::_internal_add_zombies() {
  return _impl_.zombies_.Add();
}
inline ::Protocol::Zombie* ZombieDataList::add_zombies() {
  ::Protocol::Zombie* _add = _internal_add_zombies();
  // @@protoc_insertion_point(field_add:Protocol.ZombieDataList.zombies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Zombie >&
ZombieDataList::zombies() const {
  // @@protoc_insertion_point(field_list:Protocol.ZombieDataList.zombies)
  return _impl_.zombies_;
}

// -------------------------------------------------------------------

// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector3::_internal_x() const {
  return _impl_.x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector3::_internal_y() const {
  return _impl_.y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  _impl_.z_ = 0;
}
inline float Vector3::_internal_z() const {
  return _impl_.z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.z)
}

// -------------------------------------------------------------------

// ZombiePath

// uint32 packet_type = 1;
inline void ZombiePath::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t ZombiePath::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t ZombiePath::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.ZombiePath.packet_type)
  return _internal_packet_type();
}
inline void ZombiePath::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void ZombiePath::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.ZombiePath.packet_type)
}

// uint32 zombieid = 2;
inline void ZombiePath::clear_zombieid() {
  _impl_.zombieid_ = 0u;
}
inline uint32_t ZombiePath::_internal_zombieid() const {
  return _impl_.zombieid_;
}
inline uint32_t ZombiePath::zombieid() const {
  // @@protoc_insertion_point(field_get:Protocol.ZombiePath.zombieid)
  return _internal_zombieid();
}
inline void ZombiePath::_internal_set_zombieid(uint32_t value) {
  
  _impl_.zombieid_ = value;
}
inline void ZombiePath::set_zombieid(uint32_t value) {
  _internal_set_zombieid(value);
  // @@protoc_insertion_point(field_set:Protocol.ZombiePath.zombieid)
}

// .Protocol.Vector3 path1 = 3;
inline bool ZombiePath::_internal_has_path1() const {
  return this != internal_default_instance() && _impl_.path1_ != nullptr;
}
inline bool ZombiePath::has_path1() const {
  return _internal_has_path1();
}
inline void ZombiePath::clear_path1() {
  if (GetArenaForAllocation() == nullptr && _impl_.path1_ != nullptr) {
    delete _impl_.path1_;
  }
  _impl_.path1_ = nullptr;
}
inline const ::Protocol::Vector3& ZombiePath::_internal_path1() const {
  const ::Protocol::Vector3* p = _impl_.path1_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& ZombiePath::path1() const {
  // @@protoc_insertion_point(field_get:Protocol.ZombiePath.path1)
  return _internal_path1();
}
inline void ZombiePath::unsafe_arena_set_allocated_path1(
    ::Protocol::Vector3* path1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.path1_);
  }
  _impl_.path1_ = path1;
  if (path1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ZombiePath.path1)
}
inline ::Protocol::Vector3* ZombiePath::release_path1() {
  
  ::Protocol::Vector3* temp = _impl_.path1_;
  _impl_.path1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* ZombiePath::unsafe_arena_release_path1() {
  // @@protoc_insertion_point(field_release:Protocol.ZombiePath.path1)
  
  ::Protocol::Vector3* temp = _impl_.path1_;
  _impl_.path1_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* ZombiePath::_internal_mutable_path1() {
  
  if (_impl_.path1_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.path1_ = p;
  }
  return _impl_.path1_;
}
inline ::Protocol::Vector3* ZombiePath::mutable_path1() {
  ::Protocol::Vector3* _msg = _internal_mutable_path1();
  // @@protoc_insertion_point(field_mutable:Protocol.ZombiePath.path1)
  return _msg;
}
inline void ZombiePath::set_allocated_path1(::Protocol::Vector3* path1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.path1_;
  }
  if (path1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(path1);
    if (message_arena != submessage_arena) {
      path1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.path1_ = path1;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ZombiePath.path1)
}

// .Protocol.Vector3 path2 = 4;
inline bool ZombiePath::_internal_has_path2() const {
  return this != internal_default_instance() && _impl_.path2_ != nullptr;
}
inline bool ZombiePath::has_path2() const {
  return _internal_has_path2();
}
inline void ZombiePath::clear_path2() {
  if (GetArenaForAllocation() == nullptr && _impl_.path2_ != nullptr) {
    delete _impl_.path2_;
  }
  _impl_.path2_ = nullptr;
}
inline const ::Protocol::Vector3& ZombiePath::_internal_path2() const {
  const ::Protocol::Vector3* p = _impl_.path2_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& ZombiePath::path2() const {
  // @@protoc_insertion_point(field_get:Protocol.ZombiePath.path2)
  return _internal_path2();
}
inline void ZombiePath::unsafe_arena_set_allocated_path2(
    ::Protocol::Vector3* path2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.path2_);
  }
  _impl_.path2_ = path2;
  if (path2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ZombiePath.path2)
}
inline ::Protocol::Vector3* ZombiePath::release_path2() {
  
  ::Protocol::Vector3* temp = _impl_.path2_;
  _impl_.path2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* ZombiePath::unsafe_arena_release_path2() {
  // @@protoc_insertion_point(field_release:Protocol.ZombiePath.path2)
  
  ::Protocol::Vector3* temp = _impl_.path2_;
  _impl_.path2_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* ZombiePath::_internal_mutable_path2() {
  
  if (_impl_.path2_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.path2_ = p;
  }
  return _impl_.path2_;
}
inline ::Protocol::Vector3* ZombiePath::mutable_path2() {
  ::Protocol::Vector3* _msg = _internal_mutable_path2();
  // @@protoc_insertion_point(field_mutable:Protocol.ZombiePath.path2)
  return _msg;
}
inline void ZombiePath::set_allocated_path2(::Protocol::Vector3* path2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.path2_;
  }
  if (path2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(path2);
    if (message_arena != submessage_arena) {
      path2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path2, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.path2_ = path2;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ZombiePath.path2)
}

// .Protocol.Vector3 location = 5;
inline bool ZombiePath::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool ZombiePath::has_location() const {
  return _internal_has_location();
}
inline void ZombiePath::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
inline const ::Protocol::Vector3& ZombiePath::_internal_location() const {
  const ::Protocol::Vector3* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& ZombiePath::location() const {
  // @@protoc_insertion_point(field_get:Protocol.ZombiePath.location)
  return _internal_location();
}
inline void ZombiePath::unsafe_arena_set_allocated_location(
    ::Protocol::Vector3* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ZombiePath.location)
}
inline ::Protocol::Vector3* ZombiePath::release_location() {
  
  ::Protocol::Vector3* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* ZombiePath::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:Protocol.ZombiePath.location)
  
  ::Protocol::Vector3* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* ZombiePath::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::Protocol::Vector3* ZombiePath::mutable_location() {
  ::Protocol::Vector3* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:Protocol.ZombiePath.location)
  return _msg;
}
inline void ZombiePath::set_allocated_location(::Protocol::Vector3* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ZombiePath.location)
}

// -------------------------------------------------------------------

// PatrolPath

// uint32 packet_type = 1;
inline void PatrolPath::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t PatrolPath::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t PatrolPath::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.PatrolPath.packet_type)
  return _internal_packet_type();
}
inline void PatrolPath::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void PatrolPath::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.PatrolPath.packet_type)
}

// uint32 zombieid = 2;
inline void PatrolPath::clear_zombieid() {
  _impl_.zombieid_ = 0u;
}
inline uint32_t PatrolPath::_internal_zombieid() const {
  return _impl_.zombieid_;
}
inline uint32_t PatrolPath::zombieid() const {
  // @@protoc_insertion_point(field_get:Protocol.PatrolPath.zombieid)
  return _internal_zombieid();
}
inline void PatrolPath::_internal_set_zombieid(uint32_t value) {
  
  _impl_.zombieid_ = value;
}
inline void PatrolPath::set_zombieid(uint32_t value) {
  _internal_set_zombieid(value);
  // @@protoc_insertion_point(field_set:Protocol.PatrolPath.zombieid)
}

// .Protocol.Vector3 path = 3;
inline bool PatrolPath::_internal_has_path() const {
  return this != internal_default_instance() && _impl_.path_ != nullptr;
}
inline bool PatrolPath::has_path() const {
  return _internal_has_path();
}
inline void PatrolPath::clear_path() {
  if (GetArenaForAllocation() == nullptr && _impl_.path_ != nullptr) {
    delete _impl_.path_;
  }
  _impl_.path_ = nullptr;
}
inline const ::Protocol::Vector3& PatrolPath::_internal_path() const {
  const ::Protocol::Vector3* p = _impl_.path_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& PatrolPath::path() const {
  // @@protoc_insertion_point(field_get:Protocol.PatrolPath.path)
  return _internal_path();
}
inline void PatrolPath::unsafe_arena_set_allocated_path(
    ::Protocol::Vector3* path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.path_);
  }
  _impl_.path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PatrolPath.path)
}
inline ::Protocol::Vector3* PatrolPath::release_path() {
  
  ::Protocol::Vector3* temp = _impl_.path_;
  _impl_.path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* PatrolPath::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_release:Protocol.PatrolPath.path)
  
  ::Protocol::Vector3* temp = _impl_.path_;
  _impl_.path_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* PatrolPath::_internal_mutable_path() {
  
  if (_impl_.path_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.path_ = p;
  }
  return _impl_.path_;
}
inline ::Protocol::Vector3* PatrolPath::mutable_path() {
  ::Protocol::Vector3* _msg = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:Protocol.PatrolPath.path)
  return _msg;
}
inline void PatrolPath::set_allocated_path(::Protocol::Vector3* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(path);
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.path_ = path;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PatrolPath.path)
}

// .Protocol.Vector3 location = 4;
inline bool PatrolPath::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool PatrolPath::has_location() const {
  return _internal_has_location();
}
inline void PatrolPath::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
inline const ::Protocol::Vector3& PatrolPath::_internal_location() const {
  const ::Protocol::Vector3* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& PatrolPath::location() const {
  // @@protoc_insertion_point(field_get:Protocol.PatrolPath.location)
  return _internal_location();
}
inline void PatrolPath::unsafe_arena_set_allocated_location(
    ::Protocol::Vector3* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PatrolPath.location)
}
inline ::Protocol::Vector3* PatrolPath::release_location() {
  
  ::Protocol::Vector3* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* PatrolPath::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:Protocol.PatrolPath.location)
  
  ::Protocol::Vector3* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* PatrolPath::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::Protocol::Vector3* PatrolPath::mutable_location() {
  ::Protocol::Vector3* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:Protocol.PatrolPath.location)
  return _msg;
}
inline void PatrolPath::set_allocated_location(::Protocol::Vector3* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PatrolPath.location)
}

// -------------------------------------------------------------------

// Detected

// uint32 packet_type = 1;
inline void Detected::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t Detected::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t Detected::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.Detected.packet_type)
  return _internal_packet_type();
}
inline void Detected::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void Detected::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.Detected.packet_type)
}

// uint32 zombieid = 2;
inline void Detected::clear_zombieid() {
  _impl_.zombieid_ = 0u;
}
inline uint32_t Detected::_internal_zombieid() const {
  return _impl_.zombieid_;
}
inline uint32_t Detected::zombieid() const {
  // @@protoc_insertion_point(field_get:Protocol.Detected.zombieid)
  return _internal_zombieid();
}
inline void Detected::_internal_set_zombieid(uint32_t value) {
  
  _impl_.zombieid_ = value;
}
inline void Detected::set_zombieid(uint32_t value) {
  _internal_set_zombieid(value);
  // @@protoc_insertion_point(field_set:Protocol.Detected.zombieid)
}

// uint32 playerid = 3;
inline void Detected::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t Detected::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t Detected::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.Detected.playerid)
  return _internal_playerid();
}
inline void Detected::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void Detected::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.Detected.playerid)
}

// bool player_insight = 4;
inline void Detected::clear_player_insight() {
  _impl_.player_insight_ = false;
}
inline bool Detected::_internal_player_insight() const {
  return _impl_.player_insight_;
}
inline bool Detected::player_insight() const {
  // @@protoc_insertion_point(field_get:Protocol.Detected.player_insight)
  return _internal_player_insight();
}
inline void Detected::_internal_set_player_insight(bool value) {
  
  _impl_.player_insight_ = value;
}
inline void Detected::set_player_insight(bool value) {
  _internal_set_player_insight(value);
  // @@protoc_insertion_point(field_set:Protocol.Detected.player_insight)
}

// -------------------------------------------------------------------

// Time

// uint32 packet_type = 1;
inline void Time::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t Time::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t Time::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.Time.packet_type)
  return _internal_packet_type();
}
inline void Time::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void Time::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.Time.packet_type)
}

// float timer = 2;
inline void Time::clear_timer() {
  _impl_.timer_ = 0;
}
inline float Time::_internal_timer() const {
  return _impl_.timer_;
}
inline float Time::timer() const {
  // @@protoc_insertion_point(field_get:Protocol.Time.timer)
  return _internal_timer();
}
inline void Time::_internal_set_timer(float value) {
  
  _impl_.timer_ = value;
}
inline void Time::set_timer(float value) {
  _internal_set_timer(value);
  // @@protoc_insertion_point(field_set:Protocol.Time.timer)
}

// -------------------------------------------------------------------

// Equip_Item

// uint32 packet_type = 1;
inline void Equip_Item::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t Equip_Item::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t Equip_Item::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.Equip_Item.packet_type)
  return _internal_packet_type();
}
inline void Equip_Item::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void Equip_Item::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.Equip_Item.packet_type)
}

// uint32 playerid = 2;
inline void Equip_Item::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t Equip_Item::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t Equip_Item::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.Equip_Item.playerid)
  return _internal_playerid();
}
inline void Equip_Item::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void Equip_Item::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.Equip_Item.playerid)
}

// string itemname = 3;
inline void Equip_Item::clear_itemname() {
  _impl_.itemname_.ClearToEmpty();
}
inline const std::string& Equip_Item::itemname() const {
  // @@protoc_insertion_point(field_get:Protocol.Equip_Item.itemname)
  return _internal_itemname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Equip_Item::set_itemname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.itemname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.Equip_Item.itemname)
}
inline std::string* Equip_Item::mutable_itemname() {
  std::string* _s = _internal_mutable_itemname();
  // @@protoc_insertion_point(field_mutable:Protocol.Equip_Item.itemname)
  return _s;
}
inline const std::string& Equip_Item::_internal_itemname() const {
  return _impl_.itemname_.Get();
}
inline void Equip_Item::_internal_set_itemname(const std::string& value) {
  
  _impl_.itemname_.Set(value, GetArenaForAllocation());
}
inline std::string* Equip_Item::_internal_mutable_itemname() {
  
  return _impl_.itemname_.Mutable(GetArenaForAllocation());
}
inline std::string* Equip_Item::release_itemname() {
  // @@protoc_insertion_point(field_release:Protocol.Equip_Item.itemname)
  return _impl_.itemname_.Release();
}
inline void Equip_Item::set_allocated_itemname(std::string* itemname) {
  if (itemname != nullptr) {
    
  } else {
    
  }
  _impl_.itemname_.SetAllocated(itemname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.itemname_.IsDefault()) {
    _impl_.itemname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.Equip_Item.itemname)
}

// uint32 itemtype = 4;
inline void Equip_Item::clear_itemtype() {
  _impl_.itemtype_ = 0u;
}
inline uint32_t Equip_Item::_internal_itemtype() const {
  return _impl_.itemtype_;
}
inline uint32_t Equip_Item::itemtype() const {
  // @@protoc_insertion_point(field_get:Protocol.Equip_Item.itemtype)
  return _internal_itemtype();
}
inline void Equip_Item::_internal_set_itemtype(uint32_t value) {
  
  _impl_.itemtype_ = value;
}
inline void Equip_Item::set_itemtype(uint32_t value) {
  _internal_set_itemtype(value);
  // @@protoc_insertion_point(field_set:Protocol.Equip_Item.itemtype)
}

// -------------------------------------------------------------------

// ping

// uint32 packet_type = 1;
inline void ping::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t ping::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t ping::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.ping.packet_type)
  return _internal_packet_type();
}
inline void ping::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void ping::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.ping.packet_type)
}

// uint32 playerid = 2;
inline void ping::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t ping::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t ping::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.ping.playerid)
  return _internal_playerid();
}
inline void ping::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void ping::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.ping.playerid)
}

// -------------------------------------------------------------------

// patrol_hit

// uint32 packet_type = 1;
inline void patrol_hit::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t patrol_hit::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t patrol_hit::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.patrol_hit.packet_type)
  return _internal_packet_type();
}
inline void patrol_hit::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void patrol_hit::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.patrol_hit.packet_type)
}

// uint32 zombieid = 2;
inline void patrol_hit::clear_zombieid() {
  _impl_.zombieid_ = 0u;
}
inline uint32_t patrol_hit::_internal_zombieid() const {
  return _impl_.zombieid_;
}
inline uint32_t patrol_hit::zombieid() const {
  // @@protoc_insertion_point(field_get:Protocol.patrol_hit.zombieid)
  return _internal_zombieid();
}
inline void patrol_hit::_internal_set_zombieid(uint32_t value) {
  
  _impl_.zombieid_ = value;
}
inline void patrol_hit::set_zombieid(uint32_t value) {
  _internal_set_zombieid(value);
  // @@protoc_insertion_point(field_set:Protocol.patrol_hit.zombieid)
}

// -------------------------------------------------------------------

// set_item

// uint32 packet_type = 1;
inline void set_item::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t set_item::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t set_item::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.set_item.packet_type)
  return _internal_packet_type();
}
inline void set_item::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void set_item::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.set_item.packet_type)
}

// uint32 itemid = 2;
inline void set_item::clear_itemid() {
  _impl_.itemid_ = 0u;
}
inline uint32_t set_item::_internal_itemid() const {
  return _impl_.itemid_;
}
inline uint32_t set_item::itemid() const {
  // @@protoc_insertion_point(field_get:Protocol.set_item.itemid)
  return _internal_itemid();
}
inline void set_item::_internal_set_itemid(uint32_t value) {
  
  _impl_.itemid_ = value;
}
inline void set_item::set_itemid(uint32_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:Protocol.set_item.itemid)
}

// string itemname = 3;
inline void set_item::clear_itemname() {
  _impl_.itemname_.ClearToEmpty();
}
inline const std::string& set_item::itemname() const {
  // @@protoc_insertion_point(field_get:Protocol.set_item.itemname)
  return _internal_itemname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void set_item::set_itemname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.itemname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.set_item.itemname)
}
inline std::string* set_item::mutable_itemname() {
  std::string* _s = _internal_mutable_itemname();
  // @@protoc_insertion_point(field_mutable:Protocol.set_item.itemname)
  return _s;
}
inline const std::string& set_item::_internal_itemname() const {
  return _impl_.itemname_.Get();
}
inline void set_item::_internal_set_itemname(const std::string& value) {
  
  _impl_.itemname_.Set(value, GetArenaForAllocation());
}
inline std::string* set_item::_internal_mutable_itemname() {
  
  return _impl_.itemname_.Mutable(GetArenaForAllocation());
}
inline std::string* set_item::release_itemname() {
  // @@protoc_insertion_point(field_release:Protocol.set_item.itemname)
  return _impl_.itemname_.Release();
}
inline void set_item::set_allocated_itemname(std::string* itemname) {
  if (itemname != nullptr) {
    
  } else {
    
  }
  _impl_.itemname_.SetAllocated(itemname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.itemname_.IsDefault()) {
    _impl_.itemname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.set_item.itemname)
}

// uint32 itemclass = 4;
inline void set_item::clear_itemclass() {
  _impl_.itemclass_ = 0u;
}
inline uint32_t set_item::_internal_itemclass() const {
  return _impl_.itemclass_;
}
inline uint32_t set_item::itemclass() const {
  // @@protoc_insertion_point(field_get:Protocol.set_item.itemclass)
  return _internal_itemclass();
}
inline void set_item::_internal_set_itemclass(uint32_t value) {
  
  _impl_.itemclass_ = value;
}
inline void set_item::set_itemclass(uint32_t value) {
  _internal_set_itemclass(value);
  // @@protoc_insertion_point(field_set:Protocol.set_item.itemclass)
}

// string texture_path = 5;
inline void set_item::clear_texture_path() {
  _impl_.texture_path_.ClearToEmpty();
}
inline const std::string& set_item::texture_path() const {
  // @@protoc_insertion_point(field_get:Protocol.set_item.texture_path)
  return _internal_texture_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void set_item::set_texture_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.texture_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.set_item.texture_path)
}
inline std::string* set_item::mutable_texture_path() {
  std::string* _s = _internal_mutable_texture_path();
  // @@protoc_insertion_point(field_mutable:Protocol.set_item.texture_path)
  return _s;
}
inline const std::string& set_item::_internal_texture_path() const {
  return _impl_.texture_path_.Get();
}
inline void set_item::_internal_set_texture_path(const std::string& value) {
  
  _impl_.texture_path_.Set(value, GetArenaForAllocation());
}
inline std::string* set_item::_internal_mutable_texture_path() {
  
  return _impl_.texture_path_.Mutable(GetArenaForAllocation());
}
inline std::string* set_item::release_texture_path() {
  // @@protoc_insertion_point(field_release:Protocol.set_item.texture_path)
  return _impl_.texture_path_.Release();
}
inline void set_item::set_allocated_texture_path(std::string* texture_path) {
  if (texture_path != nullptr) {
    
  } else {
    
  }
  _impl_.texture_path_.SetAllocated(texture_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.texture_path_.IsDefault()) {
    _impl_.texture_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.set_item.texture_path)
}

// uint32 count = 6;
inline void set_item::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t set_item::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t set_item::count() const {
  // @@protoc_insertion_point(field_get:Protocol.set_item.count)
  return _internal_count();
}
inline void set_item::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void set_item::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Protocol.set_item.count)
}

// uint32 floor = 7;
inline void set_item::clear_floor() {
  _impl_.floor_ = 0u;
}
inline uint32_t set_item::_internal_floor() const {
  return _impl_.floor_;
}
inline uint32_t set_item::floor() const {
  // @@protoc_insertion_point(field_get:Protocol.set_item.floor)
  return _internal_floor();
}
inline void set_item::_internal_set_floor(uint32_t value) {
  
  _impl_.floor_ = value;
}
inline void set_item::set_floor(uint32_t value) {
  _internal_set_floor(value);
  // @@protoc_insertion_point(field_set:Protocol.set_item.floor)
}

// float posx = 8;
inline void set_item::clear_posx() {
  _impl_.posx_ = 0;
}
inline float set_item::_internal_posx() const {
  return _impl_.posx_;
}
inline float set_item::posx() const {
  // @@protoc_insertion_point(field_get:Protocol.set_item.posx)
  return _internal_posx();
}
inline void set_item::_internal_set_posx(float value) {
  
  _impl_.posx_ = value;
}
inline void set_item::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:Protocol.set_item.posx)
}

// float posy = 9;
inline void set_item::clear_posy() {
  _impl_.posy_ = 0;
}
inline float set_item::_internal_posy() const {
  return _impl_.posy_;
}
inline float set_item::posy() const {
  // @@protoc_insertion_point(field_get:Protocol.set_item.posy)
  return _internal_posy();
}
inline void set_item::_internal_set_posy(float value) {
  
  _impl_.posy_ = value;
}
inline void set_item::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:Protocol.set_item.posy)
}

// float posz = 10;
inline void set_item::clear_posz() {
  _impl_.posz_ = 0;
}
inline float set_item::_internal_posz() const {
  return _impl_.posz_;
}
inline float set_item::posz() const {
  // @@protoc_insertion_point(field_get:Protocol.set_item.posz)
  return _internal_posz();
}
inline void set_item::_internal_set_posz(float value) {
  
  _impl_.posz_ = value;
}
inline void set_item::set_posz(float value) {
  _internal_set_posz(value);
  // @@protoc_insertion_point(field_set:Protocol.set_item.posz)
}

// -------------------------------------------------------------------

// ItemDataList

// uint32 packet_type = 1;
inline void ItemDataList::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t ItemDataList::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t ItemDataList::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemDataList.packet_type)
  return _internal_packet_type();
}
inline void ItemDataList::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void ItemDataList::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemDataList.packet_type)
}

// repeated .Protocol.set_item items = 2;
inline int ItemDataList::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int ItemDataList::items_size() const {
  return _internal_items_size();
}
inline void ItemDataList::clear_items() {
  _impl_.items_.Clear();
}
inline ::Protocol::set_item* ItemDataList::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.ItemDataList.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::set_item >*
ItemDataList::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.ItemDataList.items)
  return &_impl_.items_;
}
inline const ::Protocol::set_item& ItemDataList::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::Protocol::set_item& ItemDataList::items(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.ItemDataList.items)
  return _internal_items(index);
}
inline ::Protocol::set_item* ItemDataList::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::Protocol::set_item* ItemDataList::add_items() {
  ::Protocol::set_item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:Protocol.ItemDataList.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::set_item >&
ItemDataList::items() const {
  // @@protoc_insertion_point(field_list:Protocol.ItemDataList.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// set_car

// uint32 packet_type = 1;
inline void set_car::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t set_car::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t set_car::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.set_car.packet_type)
  return _internal_packet_type();
}
inline void set_car::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void set_car::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.set_car.packet_type)
}

// uint32 carid = 2;
inline void set_car::clear_carid() {
  _impl_.carid_ = 0u;
}
inline uint32_t set_car::_internal_carid() const {
  return _impl_.carid_;
}
inline uint32_t set_car::carid() const {
  // @@protoc_insertion_point(field_get:Protocol.set_car.carid)
  return _internal_carid();
}
inline void set_car::_internal_set_carid(uint32_t value) {
  
  _impl_.carid_ = value;
}
inline void set_car::set_carid(uint32_t value) {
  _internal_set_carid(value);
  // @@protoc_insertion_point(field_set:Protocol.set_car.carid)
}

// string carname = 3;
inline void set_car::clear_carname() {
  _impl_.carname_.ClearToEmpty();
}
inline const std::string& set_car::carname() const {
  // @@protoc_insertion_point(field_get:Protocol.set_car.carname)
  return _internal_carname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void set_car::set_carname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.carname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.set_car.carname)
}
inline std::string* set_car::mutable_carname() {
  std::string* _s = _internal_mutable_carname();
  // @@protoc_insertion_point(field_mutable:Protocol.set_car.carname)
  return _s;
}
inline const std::string& set_car::_internal_carname() const {
  return _impl_.carname_.Get();
}
inline void set_car::_internal_set_carname(const std::string& value) {
  
  _impl_.carname_.Set(value, GetArenaForAllocation());
}
inline std::string* set_car::_internal_mutable_carname() {
  
  return _impl_.carname_.Mutable(GetArenaForAllocation());
}
inline std::string* set_car::release_carname() {
  // @@protoc_insertion_point(field_release:Protocol.set_car.carname)
  return _impl_.carname_.Release();
}
inline void set_car::set_allocated_carname(std::string* carname) {
  if (carname != nullptr) {
    
  } else {
    
  }
  _impl_.carname_.SetAllocated(carname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.carname_.IsDefault()) {
    _impl_.carname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.set_car.carname)
}

// float posx = 4;
inline void set_car::clear_posx() {
  _impl_.posx_ = 0;
}
inline float set_car::_internal_posx() const {
  return _impl_.posx_;
}
inline float set_car::posx() const {
  // @@protoc_insertion_point(field_get:Protocol.set_car.posx)
  return _internal_posx();
}
inline void set_car::_internal_set_posx(float value) {
  
  _impl_.posx_ = value;
}
inline void set_car::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:Protocol.set_car.posx)
}

// float posy = 5;
inline void set_car::clear_posy() {
  _impl_.posy_ = 0;
}
inline float set_car::_internal_posy() const {
  return _impl_.posy_;
}
inline float set_car::posy() const {
  // @@protoc_insertion_point(field_get:Protocol.set_car.posy)
  return _internal_posy();
}
inline void set_car::_internal_set_posy(float value) {
  
  _impl_.posy_ = value;
}
inline void set_car::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:Protocol.set_car.posy)
}

// float posz = 6;
inline void set_car::clear_posz() {
  _impl_.posz_ = 0;
}
inline float set_car::_internal_posz() const {
  return _impl_.posz_;
}
inline float set_car::posz() const {
  // @@protoc_insertion_point(field_get:Protocol.set_car.posz)
  return _internal_posz();
}
inline void set_car::_internal_set_posz(float value) {
  
  _impl_.posz_ = value;
}
inline void set_car::set_posz(float value) {
  _internal_set_posz(value);
  // @@protoc_insertion_point(field_set:Protocol.set_car.posz)
}

// float pitch = 7;
inline void set_car::clear_pitch() {
  _impl_.pitch_ = 0;
}
inline float set_car::_internal_pitch() const {
  return _impl_.pitch_;
}
inline float set_car::pitch() const {
  // @@protoc_insertion_point(field_get:Protocol.set_car.pitch)
  return _internal_pitch();
}
inline void set_car::_internal_set_pitch(float value) {
  
  _impl_.pitch_ = value;
}
inline void set_car::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:Protocol.set_car.pitch)
}

// float yaw = 8;
inline void set_car::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float set_car::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float set_car::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.set_car.yaw)
  return _internal_yaw();
}
inline void set_car::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void set_car::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.set_car.yaw)
}

// float roll = 9;
inline void set_car::clear_roll() {
  _impl_.roll_ = 0;
}
inline float set_car::_internal_roll() const {
  return _impl_.roll_;
}
inline float set_car::roll() const {
  // @@protoc_insertion_point(field_get:Protocol.set_car.roll)
  return _internal_roll();
}
inline void set_car::_internal_set_roll(float value) {
  
  _impl_.roll_ = value;
}
inline void set_car::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:Protocol.set_car.roll)
}

// string carkeyname = 10;
inline void set_car::clear_carkeyname() {
  _impl_.carkeyname_.ClearToEmpty();
}
inline const std::string& set_car::carkeyname() const {
  // @@protoc_insertion_point(field_get:Protocol.set_car.carkeyname)
  return _internal_carkeyname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void set_car::set_carkeyname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.carkeyname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.set_car.carkeyname)
}
inline std::string* set_car::mutable_carkeyname() {
  std::string* _s = _internal_mutable_carkeyname();
  // @@protoc_insertion_point(field_mutable:Protocol.set_car.carkeyname)
  return _s;
}
inline const std::string& set_car::_internal_carkeyname() const {
  return _impl_.carkeyname_.Get();
}
inline void set_car::_internal_set_carkeyname(const std::string& value) {
  
  _impl_.carkeyname_.Set(value, GetArenaForAllocation());
}
inline std::string* set_car::_internal_mutable_carkeyname() {
  
  return _impl_.carkeyname_.Mutable(GetArenaForAllocation());
}
inline std::string* set_car::release_carkeyname() {
  // @@protoc_insertion_point(field_release:Protocol.set_car.carkeyname)
  return _impl_.carkeyname_.Release();
}
inline void set_car::set_allocated_carkeyname(std::string* carkeyname) {
  if (carkeyname != nullptr) {
    
  } else {
    
  }
  _impl_.carkeyname_.SetAllocated(carkeyname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.carkeyname_.IsDefault()) {
    _impl_.carkeyname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.set_car.carkeyname)
}

// -------------------------------------------------------------------

// CarDataList

// uint32 packet_type = 1;
inline void CarDataList::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t CarDataList::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t CarDataList::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.CarDataList.packet_type)
  return _internal_packet_type();
}
inline void CarDataList::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void CarDataList::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.CarDataList.packet_type)
}

// repeated .Protocol.set_car cars = 2;
inline int CarDataList::_internal_cars_size() const {
  return _impl_.cars_.size();
}
inline int CarDataList::cars_size() const {
  return _internal_cars_size();
}
inline void CarDataList::clear_cars() {
  _impl_.cars_.Clear();
}
inline ::Protocol::set_car* CarDataList::mutable_cars(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.CarDataList.cars)
  return _impl_.cars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::set_car >*
CarDataList::mutable_cars() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.CarDataList.cars)
  return &_impl_.cars_;
}
inline const ::Protocol::set_car& CarDataList::_internal_cars(int index) const {
  return _impl_.cars_.Get(index);
}
inline const ::Protocol::set_car& CarDataList::cars(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.CarDataList.cars)
  return _internal_cars(index);
}
inline ::Protocol::set_car* CarDataList::_internal_add_cars() {
  return _impl_.cars_.Add();
}
inline ::Protocol::set_car* CarDataList::add_cars() {
  ::Protocol::set_car* _add = _internal_add_cars();
  // @@protoc_insertion_point(field_add:Protocol.CarDataList.cars)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::set_car >&
CarDataList::cars() const {
  // @@protoc_insertion_point(field_list:Protocol.CarDataList.cars)
  return _impl_.cars_;
}

// -------------------------------------------------------------------

// destroy_item

// uint32 packet_type = 1;
inline void destroy_item::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t destroy_item::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t destroy_item::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.destroy_item.packet_type)
  return _internal_packet_type();
}
inline void destroy_item::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void destroy_item::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.destroy_item.packet_type)
}

// uint32 itemid = 2;
inline void destroy_item::clear_itemid() {
  _impl_.itemid_ = 0u;
}
inline uint32_t destroy_item::_internal_itemid() const {
  return _impl_.itemid_;
}
inline uint32_t destroy_item::itemid() const {
  // @@protoc_insertion_point(field_get:Protocol.destroy_item.itemid)
  return _internal_itemid();
}
inline void destroy_item::_internal_set_itemid(uint32_t value) {
  
  _impl_.itemid_ = value;
}
inline void destroy_item::set_itemid(uint32_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:Protocol.destroy_item.itemid)
}

// uint32 playerid = 3;
inline void destroy_item::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t destroy_item::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t destroy_item::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.destroy_item.playerid)
  return _internal_playerid();
}
inline void destroy_item::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void destroy_item::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.destroy_item.playerid)
}

// -------------------------------------------------------------------

// drop_item

// uint32 packet_type = 1;
inline void drop_item::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t drop_item::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t drop_item::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.drop_item.packet_type)
  return _internal_packet_type();
}
inline void drop_item::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void drop_item::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.drop_item.packet_type)
}

// uint32 itemid = 2;
inline void drop_item::clear_itemid() {
  _impl_.itemid_ = 0u;
}
inline uint32_t drop_item::_internal_itemid() const {
  return _impl_.itemid_;
}
inline uint32_t drop_item::itemid() const {
  // @@protoc_insertion_point(field_get:Protocol.drop_item.itemid)
  return _internal_itemid();
}
inline void drop_item::_internal_set_itemid(uint32_t value) {
  
  _impl_.itemid_ = value;
}
inline void drop_item::set_itemid(uint32_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:Protocol.drop_item.itemid)
}

// string itemname = 3;
inline void drop_item::clear_itemname() {
  _impl_.itemname_.ClearToEmpty();
}
inline const std::string& drop_item::itemname() const {
  // @@protoc_insertion_point(field_get:Protocol.drop_item.itemname)
  return _internal_itemname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void drop_item::set_itemname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.itemname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.drop_item.itemname)
}
inline std::string* drop_item::mutable_itemname() {
  std::string* _s = _internal_mutable_itemname();
  // @@protoc_insertion_point(field_mutable:Protocol.drop_item.itemname)
  return _s;
}
inline const std::string& drop_item::_internal_itemname() const {
  return _impl_.itemname_.Get();
}
inline void drop_item::_internal_set_itemname(const std::string& value) {
  
  _impl_.itemname_.Set(value, GetArenaForAllocation());
}
inline std::string* drop_item::_internal_mutable_itemname() {
  
  return _impl_.itemname_.Mutable(GetArenaForAllocation());
}
inline std::string* drop_item::release_itemname() {
  // @@protoc_insertion_point(field_release:Protocol.drop_item.itemname)
  return _impl_.itemname_.Release();
}
inline void drop_item::set_allocated_itemname(std::string* itemname) {
  if (itemname != nullptr) {
    
  } else {
    
  }
  _impl_.itemname_.SetAllocated(itemname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.itemname_.IsDefault()) {
    _impl_.itemname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.drop_item.itemname)
}

// uint32 itemclass = 4;
inline void drop_item::clear_itemclass() {
  _impl_.itemclass_ = 0u;
}
inline uint32_t drop_item::_internal_itemclass() const {
  return _impl_.itemclass_;
}
inline uint32_t drop_item::itemclass() const {
  // @@protoc_insertion_point(field_get:Protocol.drop_item.itemclass)
  return _internal_itemclass();
}
inline void drop_item::_internal_set_itemclass(uint32_t value) {
  
  _impl_.itemclass_ = value;
}
inline void drop_item::set_itemclass(uint32_t value) {
  _internal_set_itemclass(value);
  // @@protoc_insertion_point(field_set:Protocol.drop_item.itemclass)
}

// string texture_path = 5;
inline void drop_item::clear_texture_path() {
  _impl_.texture_path_.ClearToEmpty();
}
inline const std::string& drop_item::texture_path() const {
  // @@protoc_insertion_point(field_get:Protocol.drop_item.texture_path)
  return _internal_texture_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void drop_item::set_texture_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.texture_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.drop_item.texture_path)
}
inline std::string* drop_item::mutable_texture_path() {
  std::string* _s = _internal_mutable_texture_path();
  // @@protoc_insertion_point(field_mutable:Protocol.drop_item.texture_path)
  return _s;
}
inline const std::string& drop_item::_internal_texture_path() const {
  return _impl_.texture_path_.Get();
}
inline void drop_item::_internal_set_texture_path(const std::string& value) {
  
  _impl_.texture_path_.Set(value, GetArenaForAllocation());
}
inline std::string* drop_item::_internal_mutable_texture_path() {
  
  return _impl_.texture_path_.Mutable(GetArenaForAllocation());
}
inline std::string* drop_item::release_texture_path() {
  // @@protoc_insertion_point(field_release:Protocol.drop_item.texture_path)
  return _impl_.texture_path_.Release();
}
inline void drop_item::set_allocated_texture_path(std::string* texture_path) {
  if (texture_path != nullptr) {
    
  } else {
    
  }
  _impl_.texture_path_.SetAllocated(texture_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.texture_path_.IsDefault()) {
    _impl_.texture_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.drop_item.texture_path)
}

// uint32 count = 6;
inline void drop_item::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t drop_item::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t drop_item::count() const {
  // @@protoc_insertion_point(field_get:Protocol.drop_item.count)
  return _internal_count();
}
inline void drop_item::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void drop_item::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Protocol.drop_item.count)
}

// uint32 floor = 7;
inline void drop_item::clear_floor() {
  _impl_.floor_ = 0u;
}
inline uint32_t drop_item::_internal_floor() const {
  return _impl_.floor_;
}
inline uint32_t drop_item::floor() const {
  // @@protoc_insertion_point(field_get:Protocol.drop_item.floor)
  return _internal_floor();
}
inline void drop_item::_internal_set_floor(uint32_t value) {
  
  _impl_.floor_ = value;
}
inline void drop_item::set_floor(uint32_t value) {
  _internal_set_floor(value);
  // @@protoc_insertion_point(field_set:Protocol.drop_item.floor)
}

// float posx = 8;
inline void drop_item::clear_posx() {
  _impl_.posx_ = 0;
}
inline float drop_item::_internal_posx() const {
  return _impl_.posx_;
}
inline float drop_item::posx() const {
  // @@protoc_insertion_point(field_get:Protocol.drop_item.posx)
  return _internal_posx();
}
inline void drop_item::_internal_set_posx(float value) {
  
  _impl_.posx_ = value;
}
inline void drop_item::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:Protocol.drop_item.posx)
}

// float posy = 9;
inline void drop_item::clear_posy() {
  _impl_.posy_ = 0;
}
inline float drop_item::_internal_posy() const {
  return _impl_.posy_;
}
inline float drop_item::posy() const {
  // @@protoc_insertion_point(field_get:Protocol.drop_item.posy)
  return _internal_posy();
}
inline void drop_item::_internal_set_posy(float value) {
  
  _impl_.posy_ = value;
}
inline void drop_item::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:Protocol.drop_item.posy)
}

// float posz = 10;
inline void drop_item::clear_posz() {
  _impl_.posz_ = 0;
}
inline float drop_item::_internal_posz() const {
  return _impl_.posz_;
}
inline float drop_item::posz() const {
  // @@protoc_insertion_point(field_get:Protocol.drop_item.posz)
  return _internal_posz();
}
inline void drop_item::_internal_set_posz(float value) {
  
  _impl_.posz_ = value;
}
inline void drop_item::set_posz(float value) {
  _internal_set_posz(value);
  // @@protoc_insertion_point(field_set:Protocol.drop_item.posz)
}

// -------------------------------------------------------------------

// get_key

// uint32 packet_type = 1;
inline void get_key::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t get_key::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t get_key::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.get_key.packet_type)
  return _internal_packet_type();
}
inline void get_key::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void get_key::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.get_key.packet_type)
}

// uint32 itemid = 2;
inline void get_key::clear_itemid() {
  _impl_.itemid_ = 0u;
}
inline uint32_t get_key::_internal_itemid() const {
  return _impl_.itemid_;
}
inline uint32_t get_key::itemid() const {
  // @@protoc_insertion_point(field_get:Protocol.get_key.itemid)
  return _internal_itemid();
}
inline void get_key::_internal_set_itemid(uint32_t value) {
  
  _impl_.itemid_ = value;
}
inline void get_key::set_itemid(uint32_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:Protocol.get_key.itemid)
}

// uint32 itemboxid = 3;
inline void get_key::clear_itemboxid() {
  _impl_.itemboxid_ = 0u;
}
inline uint32_t get_key::_internal_itemboxid() const {
  return _impl_.itemboxid_;
}
inline uint32_t get_key::itemboxid() const {
  // @@protoc_insertion_point(field_get:Protocol.get_key.itemboxid)
  return _internal_itemboxid();
}
inline void get_key::_internal_set_itemboxid(uint32_t value) {
  
  _impl_.itemboxid_ = value;
}
inline void get_key::set_itemboxid(uint32_t value) {
  _internal_set_itemboxid(value);
  // @@protoc_insertion_point(field_set:Protocol.get_key.itemboxid)
}

// uint32 playerid = 4;
inline void get_key::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t get_key::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t get_key::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.get_key.playerid)
  return _internal_playerid();
}
inline void get_key::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void get_key::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.get_key.playerid)
}

// -------------------------------------------------------------------

// escape

// uint32 packet_type = 1;
inline void escape::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t escape::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t escape::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.escape.packet_type)
  return _internal_packet_type();
}
inline void escape::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void escape::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.escape.packet_type)
}

// uint32 playerid = 2;
inline void escape::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t escape::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t escape::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.escape.playerid)
  return _internal_playerid();
}
inline void escape::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void escape::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.escape.playerid)
}

// uint32 root = 3;
inline void escape::clear_root() {
  _impl_.root_ = 0u;
}
inline uint32_t escape::_internal_root() const {
  return _impl_.root_;
}
inline uint32_t escape::root() const {
  // @@protoc_insertion_point(field_get:Protocol.escape.root)
  return _internal_root();
}
inline void escape::_internal_set_root(uint32_t value) {
  
  _impl_.root_ = value;
}
inline void escape::set_root(uint32_t value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:Protocol.escape.root)
}

// -------------------------------------------------------------------

// game_clear

// uint32 packet_type = 1;
inline void game_clear::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t game_clear::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t game_clear::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.game_clear.packet_type)
  return _internal_packet_type();
}
inline void game_clear::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void game_clear::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.game_clear.packet_type)
}

// uint32 root = 2;
inline void game_clear::clear_root() {
  _impl_.root_ = 0u;
}
inline uint32_t game_clear::_internal_root() const {
  return _impl_.root_;
}
inline uint32_t game_clear::root() const {
  // @@protoc_insertion_point(field_get:Protocol.game_clear.root)
  return _internal_root();
}
inline void game_clear::_internal_set_root(uint32_t value) {
  
  _impl_.root_ = value;
}
inline void game_clear::set_root(uint32_t value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:Protocol.game_clear.root)
}

// uint32 alive_players = 3;
inline void game_clear::clear_alive_players() {
  _impl_.alive_players_ = 0u;
}
inline uint32_t game_clear::_internal_alive_players() const {
  return _impl_.alive_players_;
}
inline uint32_t game_clear::alive_players() const {
  // @@protoc_insertion_point(field_get:Protocol.game_clear.alive_players)
  return _internal_alive_players();
}
inline void game_clear::_internal_set_alive_players(uint32_t value) {
  
  _impl_.alive_players_ = value;
}
inline void game_clear::set_alive_players(uint32_t value) {
  _internal_set_alive_players(value);
  // @@protoc_insertion_point(field_set:Protocol.game_clear.alive_players)
}

// uint32 dead_players = 4;
inline void game_clear::clear_dead_players() {
  _impl_.dead_players_ = 0u;
}
inline uint32_t game_clear::_internal_dead_players() const {
  return _impl_.dead_players_;
}
inline uint32_t game_clear::dead_players() const {
  // @@protoc_insertion_point(field_get:Protocol.game_clear.dead_players)
  return _internal_dead_players();
}
inline void game_clear::_internal_set_dead_players(uint32_t value) {
  
  _impl_.dead_players_ = value;
}
inline void game_clear::set_dead_players(uint32_t value) {
  _internal_set_dead_players(value);
  // @@protoc_insertion_point(field_set:Protocol.game_clear.dead_players)
}

// string open_player = 5;
inline void game_clear::clear_open_player() {
  _impl_.open_player_.ClearToEmpty();
}
inline const std::string& game_clear::open_player() const {
  // @@protoc_insertion_point(field_get:Protocol.game_clear.open_player)
  return _internal_open_player();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void game_clear::set_open_player(ArgT0&& arg0, ArgT... args) {
 
 _impl_.open_player_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.game_clear.open_player)
}
inline std::string* game_clear::mutable_open_player() {
  std::string* _s = _internal_mutable_open_player();
  // @@protoc_insertion_point(field_mutable:Protocol.game_clear.open_player)
  return _s;
}
inline const std::string& game_clear::_internal_open_player() const {
  return _impl_.open_player_.Get();
}
inline void game_clear::_internal_set_open_player(const std::string& value) {
  
  _impl_.open_player_.Set(value, GetArenaForAllocation());
}
inline std::string* game_clear::_internal_mutable_open_player() {
  
  return _impl_.open_player_.Mutable(GetArenaForAllocation());
}
inline std::string* game_clear::release_open_player() {
  // @@protoc_insertion_point(field_release:Protocol.game_clear.open_player)
  return _impl_.open_player_.Release();
}
inline void game_clear::set_allocated_open_player(std::string* open_player) {
  if (open_player != nullptr) {
    
  } else {
    
  }
  _impl_.open_player_.SetAllocated(open_player, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.open_player_.IsDefault()) {
    _impl_.open_player_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.game_clear.open_player)
}

// uint32 my_killcount = 6;
inline void game_clear::clear_my_killcount() {
  _impl_.my_killcount_ = 0u;
}
inline uint32_t game_clear::_internal_my_killcount() const {
  return _impl_.my_killcount_;
}
inline uint32_t game_clear::my_killcount() const {
  // @@protoc_insertion_point(field_get:Protocol.game_clear.my_killcount)
  return _internal_my_killcount();
}
inline void game_clear::_internal_set_my_killcount(uint32_t value) {
  
  _impl_.my_killcount_ = value;
}
inline void game_clear::set_my_killcount(uint32_t value) {
  _internal_set_my_killcount(value);
  // @@protoc_insertion_point(field_set:Protocol.game_clear.my_killcount)
}

// string best_kill_player = 7;
inline void game_clear::clear_best_kill_player() {
  _impl_.best_kill_player_.ClearToEmpty();
}
inline const std::string& game_clear::best_kill_player() const {
  // @@protoc_insertion_point(field_get:Protocol.game_clear.best_kill_player)
  return _internal_best_kill_player();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void game_clear::set_best_kill_player(ArgT0&& arg0, ArgT... args) {
 
 _impl_.best_kill_player_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.game_clear.best_kill_player)
}
inline std::string* game_clear::mutable_best_kill_player() {
  std::string* _s = _internal_mutable_best_kill_player();
  // @@protoc_insertion_point(field_mutable:Protocol.game_clear.best_kill_player)
  return _s;
}
inline const std::string& game_clear::_internal_best_kill_player() const {
  return _impl_.best_kill_player_.Get();
}
inline void game_clear::_internal_set_best_kill_player(const std::string& value) {
  
  _impl_.best_kill_player_.Set(value, GetArenaForAllocation());
}
inline std::string* game_clear::_internal_mutable_best_kill_player() {
  
  return _impl_.best_kill_player_.Mutable(GetArenaForAllocation());
}
inline std::string* game_clear::release_best_kill_player() {
  // @@protoc_insertion_point(field_release:Protocol.game_clear.best_kill_player)
  return _impl_.best_kill_player_.Release();
}
inline void game_clear::set_allocated_best_kill_player(std::string* best_kill_player) {
  if (best_kill_player != nullptr) {
    
  } else {
    
  }
  _impl_.best_kill_player_.SetAllocated(best_kill_player, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.best_kill_player_.IsDefault()) {
    _impl_.best_kill_player_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.game_clear.best_kill_player)
}

// uint32 best_killcount = 8;
inline void game_clear::clear_best_killcount() {
  _impl_.best_killcount_ = 0u;
}
inline uint32_t game_clear::_internal_best_killcount() const {
  return _impl_.best_killcount_;
}
inline uint32_t game_clear::best_killcount() const {
  // @@protoc_insertion_point(field_get:Protocol.game_clear.best_killcount)
  return _internal_best_killcount();
}
inline void game_clear::_internal_set_best_killcount(uint32_t value) {
  
  _impl_.best_killcount_ = value;
}
inline void game_clear::set_best_killcount(uint32_t value) {
  _internal_set_best_killcount(value);
  // @@protoc_insertion_point(field_set:Protocol.game_clear.best_killcount)
}

// -------------------------------------------------------------------

// send_complete

// uint32 packet_type = 1;
inline void send_complete::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t send_complete::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t send_complete::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.send_complete.packet_type)
  return _internal_packet_type();
}
inline void send_complete::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void send_complete::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.send_complete.packet_type)
}

// uint32 complete_type = 2;
inline void send_complete::clear_complete_type() {
  _impl_.complete_type_ = 0u;
}
inline uint32_t send_complete::_internal_complete_type() const {
  return _impl_.complete_type_;
}
inline uint32_t send_complete::complete_type() const {
  // @@protoc_insertion_point(field_get:Protocol.send_complete.complete_type)
  return _internal_complete_type();
}
inline void send_complete::_internal_set_complete_type(uint32_t value) {
  
  _impl_.complete_type_ = value;
}
inline void send_complete::set_complete_type(uint32_t value) {
  _internal_set_complete_type(value);
  // @@protoc_insertion_point(field_set:Protocol.send_complete.complete_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Gstruct_2eproto
