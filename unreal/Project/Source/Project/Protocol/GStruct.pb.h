// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GStruct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GStruct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GStruct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GStruct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GStruct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GStruct_2eproto;
namespace Protocol {
class Character;
struct CharacterDefaultTypeInternal;
extern CharacterDefaultTypeInternal _Character_default_instance_;
class Time;
struct TimeDefaultTypeInternal;
extern TimeDefaultTypeInternal _Time_default_instance_;
class Zombie;
struct ZombieDefaultTypeInternal;
extern ZombieDefaultTypeInternal _Zombie_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::Character* Arena::CreateMaybeMessage<::Protocol::Character>(Arena*);
template<> ::Protocol::Time* Arena::CreateMaybeMessage<::Protocol::Time>(Arena*);
template<> ::Protocol::Zombie* Arena::CreateMaybeMessage<::Protocol::Zombie>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class Character final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Character) */ {
 public:
  inline Character() : Character(nullptr) {}
  ~Character() override;
  explicit PROTOBUF_CONSTEXPR Character(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Character(const Character& from);
  Character(Character&& from) noexcept
    : Character() {
    *this = ::std::move(from);
  }

  inline Character& operator=(const Character& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character& operator=(Character&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character* internal_default_instance() {
    return reinterpret_cast<const Character*>(
               &_Character_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Character& a, Character& b) {
    a.Swap(&b);
  }
  inline void Swap(Character* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Character& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Character& from) {
    Character::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Character";
  }
  protected:
  explicit Character(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayeridFieldNumber = 1,
    kPacketSizeFieldNumber = 2,
    kPacketTypeFieldNumber = 3,
    kCharactertypeFieldNumber = 4,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
    kZFieldNumber = 7,
    kPitchFieldNumber = 8,
    kYawFieldNumber = 9,
    kRollFieldNumber = 10,
    kHpFieldNumber = 11,
    kWeaponFieldNumber = 12,
    kGetitemFieldNumber = 14,
    kAttackFieldNumber = 13,
    kIsingameFieldNumber = 15,
  };
  // uint32 playerid = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // uint32 packet_size = 2;
  void clear_packet_size();
  uint32_t packet_size() const;
  void set_packet_size(uint32_t value);
  private:
  uint32_t _internal_packet_size() const;
  void _internal_set_packet_size(uint32_t value);
  public:

  // uint32 packet_type = 3;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 charactertype = 4;
  void clear_charactertype();
  uint32_t charactertype() const;
  void set_charactertype(uint32_t value);
  private:
  uint32_t _internal_charactertype() const;
  void _internal_set_charactertype(uint32_t value);
  public:

  // float x = 5;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 6;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 7;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float pitch = 8;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float yaw = 9;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float roll = 10;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // float hp = 11;
  void clear_hp();
  float hp() const;
  void set_hp(float value);
  private:
  float _internal_hp() const;
  void _internal_set_hp(float value);
  public:

  // uint32 weapon = 12;
  void clear_weapon();
  uint32_t weapon() const;
  void set_weapon(uint32_t value);
  private:
  uint32_t _internal_weapon() const;
  void _internal_set_weapon(uint32_t value);
  public:

  // uint32 getitem = 14;
  void clear_getitem();
  uint32_t getitem() const;
  void set_getitem(uint32_t value);
  private:
  uint32_t _internal_getitem() const;
  void _internal_set_getitem(uint32_t value);
  public:

  // bool attack = 13;
  void clear_attack();
  bool attack() const;
  void set_attack(bool value);
  private:
  bool _internal_attack() const;
  void _internal_set_attack(bool value);
  public:

  // bool isingame = 15;
  void clear_isingame();
  bool isingame() const;
  void set_isingame(bool value);
  private:
  bool _internal_isingame() const;
  void _internal_set_isingame(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Character)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t playerid_;
    uint32_t packet_size_;
    uint32_t packet_type_;
    uint32_t charactertype_;
    float x_;
    float y_;
    float z_;
    float pitch_;
    float yaw_;
    float roll_;
    float hp_;
    uint32_t weapon_;
    uint32_t getitem_;
    bool attack_;
    bool isingame_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GStruct_2eproto;
};
// -------------------------------------------------------------------

class Zombie final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Zombie) */ {
 public:
  inline Zombie() : Zombie(nullptr) {}
  ~Zombie() override;
  explicit PROTOBUF_CONSTEXPR Zombie(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Zombie(const Zombie& from);
  Zombie(Zombie&& from) noexcept
    : Zombie() {
    *this = ::std::move(from);
  }

  inline Zombie& operator=(const Zombie& from) {
    CopyFrom(from);
    return *this;
  }
  inline Zombie& operator=(Zombie&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Zombie& default_instance() {
    return *internal_default_instance();
  }
  static inline const Zombie* internal_default_instance() {
    return reinterpret_cast<const Zombie*>(
               &_Zombie_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Zombie& a, Zombie& b) {
    a.Swap(&b);
  }
  inline void Swap(Zombie* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Zombie* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Zombie* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Zombie>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Zombie& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Zombie& from) {
    Zombie::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Zombie* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Zombie";
  }
  protected:
  explicit Zombie(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZombieidFieldNumber = 1,
    kPacketSizeFieldNumber = 2,
    kPacketTypeFieldNumber = 3,
    kZombietypeFieldNumber = 4,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
    kZFieldNumber = 7,
    kPitchFieldNumber = 8,
    kYawFieldNumber = 9,
    kRollFieldNumber = 10,
    kHpFieldNumber = 11,
    kAttackFieldNumber = 12,
  };
  // uint32 zombieid = 1;
  void clear_zombieid();
  uint32_t zombieid() const;
  void set_zombieid(uint32_t value);
  private:
  uint32_t _internal_zombieid() const;
  void _internal_set_zombieid(uint32_t value);
  public:

  // uint32 packet_size = 2;
  void clear_packet_size();
  uint32_t packet_size() const;
  void set_packet_size(uint32_t value);
  private:
  uint32_t _internal_packet_size() const;
  void _internal_set_packet_size(uint32_t value);
  public:

  // uint32 packet_type = 3;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // uint32 zombietype = 4;
  void clear_zombietype();
  uint32_t zombietype() const;
  void set_zombietype(uint32_t value);
  private:
  uint32_t _internal_zombietype() const;
  void _internal_set_zombietype(uint32_t value);
  public:

  // float x = 5;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 6;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 7;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float pitch = 8;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float yaw = 9;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float roll = 10;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // float hp = 11;
  void clear_hp();
  float hp() const;
  void set_hp(float value);
  private:
  float _internal_hp() const;
  void _internal_set_hp(float value);
  public:

  // bool attack = 12;
  void clear_attack();
  bool attack() const;
  void set_attack(bool value);
  private:
  bool _internal_attack() const;
  void _internal_set_attack(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Zombie)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t zombieid_;
    uint32_t packet_size_;
    uint32_t packet_type_;
    uint32_t zombietype_;
    float x_;
    float y_;
    float z_;
    float pitch_;
    float yaw_;
    float roll_;
    float hp_;
    bool attack_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GStruct_2eproto;
};
// -------------------------------------------------------------------

class Time final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Time) */ {
 public:
  inline Time() : Time(nullptr) {}
  ~Time() override;
  explicit PROTOBUF_CONSTEXPR Time(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Time(const Time& from);
  Time(Time&& from) noexcept
    : Time() {
    *this = ::std::move(from);
  }

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }
  inline Time& operator=(Time&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Time& default_instance() {
    return *internal_default_instance();
  }
  static inline const Time* internal_default_instance() {
    return reinterpret_cast<const Time*>(
               &_Time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Time& a, Time& b) {
    a.Swap(&b);
  }
  inline void Swap(Time* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Time* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Time* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Time>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Time& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Time& from) {
    Time::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Time";
  }
  protected:
  explicit Time(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimerFieldNumber = 1,
    kPacketTypeFieldNumber = 2,
  };
  // uint32 timer = 1;
  void clear_timer();
  uint32_t timer() const;
  void set_timer(uint32_t value);
  private:
  uint32_t _internal_timer() const;
  void _internal_set_timer(uint32_t value);
  public:

  // uint32 packet_type = 2;
  void clear_packet_type();
  uint32_t packet_type() const;
  void set_packet_type(uint32_t value);
  private:
  uint32_t _internal_packet_type() const;
  void _internal_set_packet_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Time)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t timer_;
    uint32_t packet_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GStruct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Character

// uint32 playerid = 1;
inline void Character::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t Character::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t Character::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.playerid)
  return _internal_playerid();
}
inline void Character::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void Character::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.playerid)
}

// uint32 packet_size = 2;
inline void Character::clear_packet_size() {
  _impl_.packet_size_ = 0u;
}
inline uint32_t Character::_internal_packet_size() const {
  return _impl_.packet_size_;
}
inline uint32_t Character::packet_size() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.packet_size)
  return _internal_packet_size();
}
inline void Character::_internal_set_packet_size(uint32_t value) {
  
  _impl_.packet_size_ = value;
}
inline void Character::set_packet_size(uint32_t value) {
  _internal_set_packet_size(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.packet_size)
}

// uint32 packet_type = 3;
inline void Character::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t Character::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t Character::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.packet_type)
  return _internal_packet_type();
}
inline void Character::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void Character::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.packet_type)
}

// uint32 charactertype = 4;
inline void Character::clear_charactertype() {
  _impl_.charactertype_ = 0u;
}
inline uint32_t Character::_internal_charactertype() const {
  return _impl_.charactertype_;
}
inline uint32_t Character::charactertype() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.charactertype)
  return _internal_charactertype();
}
inline void Character::_internal_set_charactertype(uint32_t value) {
  
  _impl_.charactertype_ = value;
}
inline void Character::set_charactertype(uint32_t value) {
  _internal_set_charactertype(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.charactertype)
}

// float x = 5;
inline void Character::clear_x() {
  _impl_.x_ = 0;
}
inline float Character::_internal_x() const {
  return _impl_.x_;
}
inline float Character::x() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.x)
  return _internal_x();
}
inline void Character::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Character::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.x)
}

// float y = 6;
inline void Character::clear_y() {
  _impl_.y_ = 0;
}
inline float Character::_internal_y() const {
  return _impl_.y_;
}
inline float Character::y() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.y)
  return _internal_y();
}
inline void Character::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Character::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.y)
}

// float z = 7;
inline void Character::clear_z() {
  _impl_.z_ = 0;
}
inline float Character::_internal_z() const {
  return _impl_.z_;
}
inline float Character::z() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.z)
  return _internal_z();
}
inline void Character::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Character::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.z)
}

// float pitch = 8;
inline void Character::clear_pitch() {
  _impl_.pitch_ = 0;
}
inline float Character::_internal_pitch() const {
  return _impl_.pitch_;
}
inline float Character::pitch() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.pitch)
  return _internal_pitch();
}
inline void Character::_internal_set_pitch(float value) {
  
  _impl_.pitch_ = value;
}
inline void Character::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.pitch)
}

// float yaw = 9;
inline void Character::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float Character::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float Character::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.yaw)
  return _internal_yaw();
}
inline void Character::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void Character::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.yaw)
}

// float roll = 10;
inline void Character::clear_roll() {
  _impl_.roll_ = 0;
}
inline float Character::_internal_roll() const {
  return _impl_.roll_;
}
inline float Character::roll() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.roll)
  return _internal_roll();
}
inline void Character::_internal_set_roll(float value) {
  
  _impl_.roll_ = value;
}
inline void Character::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.roll)
}

// float hp = 11;
inline void Character::clear_hp() {
  _impl_.hp_ = 0;
}
inline float Character::_internal_hp() const {
  return _impl_.hp_;
}
inline float Character::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.hp)
  return _internal_hp();
}
inline void Character::_internal_set_hp(float value) {
  
  _impl_.hp_ = value;
}
inline void Character::set_hp(float value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.hp)
}

// uint32 weapon = 12;
inline void Character::clear_weapon() {
  _impl_.weapon_ = 0u;
}
inline uint32_t Character::_internal_weapon() const {
  return _impl_.weapon_;
}
inline uint32_t Character::weapon() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.weapon)
  return _internal_weapon();
}
inline void Character::_internal_set_weapon(uint32_t value) {
  
  _impl_.weapon_ = value;
}
inline void Character::set_weapon(uint32_t value) {
  _internal_set_weapon(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.weapon)
}

// bool attack = 13;
inline void Character::clear_attack() {
  _impl_.attack_ = false;
}
inline bool Character::_internal_attack() const {
  return _impl_.attack_;
}
inline bool Character::attack() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.attack)
  return _internal_attack();
}
inline void Character::_internal_set_attack(bool value) {
  
  _impl_.attack_ = value;
}
inline void Character::set_attack(bool value) {
  _internal_set_attack(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.attack)
}

// uint32 getitem = 14;
inline void Character::clear_getitem() {
  _impl_.getitem_ = 0u;
}
inline uint32_t Character::_internal_getitem() const {
  return _impl_.getitem_;
}
inline uint32_t Character::getitem() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.getitem)
  return _internal_getitem();
}
inline void Character::_internal_set_getitem(uint32_t value) {
  
  _impl_.getitem_ = value;
}
inline void Character::set_getitem(uint32_t value) {
  _internal_set_getitem(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.getitem)
}

// bool isingame = 15;
inline void Character::clear_isingame() {
  _impl_.isingame_ = false;
}
inline bool Character::_internal_isingame() const {
  return _impl_.isingame_;
}
inline bool Character::isingame() const {
  // @@protoc_insertion_point(field_get:Protocol.Character.isingame)
  return _internal_isingame();
}
inline void Character::_internal_set_isingame(bool value) {
  
  _impl_.isingame_ = value;
}
inline void Character::set_isingame(bool value) {
  _internal_set_isingame(value);
  // @@protoc_insertion_point(field_set:Protocol.Character.isingame)
}

// -------------------------------------------------------------------

// Zombie

// uint32 zombieid = 1;
inline void Zombie::clear_zombieid() {
  _impl_.zombieid_ = 0u;
}
inline uint32_t Zombie::_internal_zombieid() const {
  return _impl_.zombieid_;
}
inline uint32_t Zombie::zombieid() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.zombieid)
  return _internal_zombieid();
}
inline void Zombie::_internal_set_zombieid(uint32_t value) {
  
  _impl_.zombieid_ = value;
}
inline void Zombie::set_zombieid(uint32_t value) {
  _internal_set_zombieid(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.zombieid)
}

// uint32 packet_size = 2;
inline void Zombie::clear_packet_size() {
  _impl_.packet_size_ = 0u;
}
inline uint32_t Zombie::_internal_packet_size() const {
  return _impl_.packet_size_;
}
inline uint32_t Zombie::packet_size() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.packet_size)
  return _internal_packet_size();
}
inline void Zombie::_internal_set_packet_size(uint32_t value) {
  
  _impl_.packet_size_ = value;
}
inline void Zombie::set_packet_size(uint32_t value) {
  _internal_set_packet_size(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.packet_size)
}

// uint32 packet_type = 3;
inline void Zombie::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t Zombie::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t Zombie::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.packet_type)
  return _internal_packet_type();
}
inline void Zombie::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void Zombie::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.packet_type)
}

// uint32 zombietype = 4;
inline void Zombie::clear_zombietype() {
  _impl_.zombietype_ = 0u;
}
inline uint32_t Zombie::_internal_zombietype() const {
  return _impl_.zombietype_;
}
inline uint32_t Zombie::zombietype() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.zombietype)
  return _internal_zombietype();
}
inline void Zombie::_internal_set_zombietype(uint32_t value) {
  
  _impl_.zombietype_ = value;
}
inline void Zombie::set_zombietype(uint32_t value) {
  _internal_set_zombietype(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.zombietype)
}

// float x = 5;
inline void Zombie::clear_x() {
  _impl_.x_ = 0;
}
inline float Zombie::_internal_x() const {
  return _impl_.x_;
}
inline float Zombie::x() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.x)
  return _internal_x();
}
inline void Zombie::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Zombie::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.x)
}

// float y = 6;
inline void Zombie::clear_y() {
  _impl_.y_ = 0;
}
inline float Zombie::_internal_y() const {
  return _impl_.y_;
}
inline float Zombie::y() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.y)
  return _internal_y();
}
inline void Zombie::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Zombie::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.y)
}

// float z = 7;
inline void Zombie::clear_z() {
  _impl_.z_ = 0;
}
inline float Zombie::_internal_z() const {
  return _impl_.z_;
}
inline float Zombie::z() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.z)
  return _internal_z();
}
inline void Zombie::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Zombie::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.z)
}

// float pitch = 8;
inline void Zombie::clear_pitch() {
  _impl_.pitch_ = 0;
}
inline float Zombie::_internal_pitch() const {
  return _impl_.pitch_;
}
inline float Zombie::pitch() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.pitch)
  return _internal_pitch();
}
inline void Zombie::_internal_set_pitch(float value) {
  
  _impl_.pitch_ = value;
}
inline void Zombie::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.pitch)
}

// float yaw = 9;
inline void Zombie::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float Zombie::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float Zombie::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.yaw)
  return _internal_yaw();
}
inline void Zombie::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void Zombie::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.yaw)
}

// float roll = 10;
inline void Zombie::clear_roll() {
  _impl_.roll_ = 0;
}
inline float Zombie::_internal_roll() const {
  return _impl_.roll_;
}
inline float Zombie::roll() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.roll)
  return _internal_roll();
}
inline void Zombie::_internal_set_roll(float value) {
  
  _impl_.roll_ = value;
}
inline void Zombie::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.roll)
}

// float hp = 11;
inline void Zombie::clear_hp() {
  _impl_.hp_ = 0;
}
inline float Zombie::_internal_hp() const {
  return _impl_.hp_;
}
inline float Zombie::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.hp)
  return _internal_hp();
}
inline void Zombie::_internal_set_hp(float value) {
  
  _impl_.hp_ = value;
}
inline void Zombie::set_hp(float value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.hp)
}

// bool attack = 12;
inline void Zombie::clear_attack() {
  _impl_.attack_ = false;
}
inline bool Zombie::_internal_attack() const {
  return _impl_.attack_;
}
inline bool Zombie::attack() const {
  // @@protoc_insertion_point(field_get:Protocol.Zombie.attack)
  return _internal_attack();
}
inline void Zombie::_internal_set_attack(bool value) {
  
  _impl_.attack_ = value;
}
inline void Zombie::set_attack(bool value) {
  _internal_set_attack(value);
  // @@protoc_insertion_point(field_set:Protocol.Zombie.attack)
}

// -------------------------------------------------------------------

// Time

// uint32 timer = 1;
inline void Time::clear_timer() {
  _impl_.timer_ = 0u;
}
inline uint32_t Time::_internal_timer() const {
  return _impl_.timer_;
}
inline uint32_t Time::timer() const {
  // @@protoc_insertion_point(field_get:Protocol.Time.timer)
  return _internal_timer();
}
inline void Time::_internal_set_timer(uint32_t value) {
  
  _impl_.timer_ = value;
}
inline void Time::set_timer(uint32_t value) {
  _internal_set_timer(value);
  // @@protoc_insertion_point(field_set:Protocol.Time.timer)
}

// uint32 packet_type = 2;
inline void Time::clear_packet_type() {
  _impl_.packet_type_ = 0u;
}
inline uint32_t Time::_internal_packet_type() const {
  return _impl_.packet_type_;
}
inline uint32_t Time::packet_type() const {
  // @@protoc_insertion_point(field_get:Protocol.Time.packet_type)
  return _internal_packet_type();
}
inline void Time::_internal_set_packet_type(uint32_t value) {
  
  _impl_.packet_type_ = value;
}
inline void Time::set_packet_type(uint32_t value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Protocol.Time.packet_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GStruct_2eproto
