// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gstruct.proto

#include "Gstruct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR Character::Character(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.charactertype_)*/0u
  , /*decltype(_impl_.packet_type_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.roll_)*/0
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.b_run_)*/0u
  , /*decltype(_impl_.b_jump_)*/0u
  , /*decltype(_impl_.isingame_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CharacterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterDefaultTypeInternal() {}
  union {
    Character _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterDefaultTypeInternal _Character_default_instance_;
PROTOBUF_CONSTEXPR jump::jump(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.packet_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct jumpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR jumpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~jumpDefaultTypeInternal() {}
  union {
    jump _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 jumpDefaultTypeInternal _jump_default_instance_;
PROTOBUF_CONSTEXPR Character_Attack::Character_Attack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.attack_)*/false
  , /*decltype(_impl_.packet_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Character_AttackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Character_AttackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Character_AttackDefaultTypeInternal() {}
  union {
    Character_Attack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Character_AttackDefaultTypeInternal _Character_Attack_default_instance_;
PROTOBUF_CONSTEXPR Zombie::Zombie(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.zombieid_)*/0u
  , /*decltype(_impl_.zombietype_)*/0u
  , /*decltype(_impl_.packet_type_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.roll_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ZombieDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZombieDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZombieDefaultTypeInternal() {}
  union {
    Zombie _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZombieDefaultTypeInternal _Zombie_default_instance_;
PROTOBUF_CONSTEXPR Zombie_attack::Zombie_attack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.zombieid_)*/0u
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.packet_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Zombie_attackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Zombie_attackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Zombie_attackDefaultTypeInternal() {}
  union {
    Zombie_attack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Zombie_attackDefaultTypeInternal _Zombie_attack_default_instance_;
PROTOBUF_CONSTEXPR Zombie_hp::Zombie_hp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.zombieid_)*/0u
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.packet_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Zombie_hpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Zombie_hpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Zombie_hpDefaultTypeInternal() {}
  union {
    Zombie_hp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Zombie_hpDefaultTypeInternal _Zombie_hp_default_instance_;
PROTOBUF_CONSTEXPR ZombieDataList::ZombieDataList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.zombies_)*/{}
  , /*decltype(_impl_.packet_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ZombieDataListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZombieDataListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZombieDataListDefaultTypeInternal() {}
  union {
    ZombieDataList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZombieDataListDefaultTypeInternal _ZombieDataList_default_instance_;
PROTOBUF_CONSTEXPR Vector3::Vector3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3DefaultTypeInternal() {}
  union {
    Vector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3DefaultTypeInternal _Vector3_default_instance_;
PROTOBUF_CONSTEXPR ZombiePath::ZombiePath(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/nullptr
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.zombieid_)*/0u
  , /*decltype(_impl_.packet_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ZombiePathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZombiePathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZombiePathDefaultTypeInternal() {}
  union {
    ZombiePath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZombiePathDefaultTypeInternal _ZombiePath_default_instance_;
PROTOBUF_CONSTEXPR PatrolPath::PatrolPath(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/nullptr
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.zombieid_)*/0u
  , /*decltype(_impl_.packet_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatrolPathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatrolPathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatrolPathDefaultTypeInternal() {}
  union {
    PatrolPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatrolPathDefaultTypeInternal _PatrolPath_default_instance_;
PROTOBUF_CONSTEXPR Detected::Detected(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.zombieid_)*/0u
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.packet_type_)*/0u
  , /*decltype(_impl_.player_insight_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DetectedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectedDefaultTypeInternal() {}
  union {
    Detected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectedDefaultTypeInternal _Detected_default_instance_;
PROTOBUF_CONSTEXPR Time::Time(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timer_)*/0
  , /*decltype(_impl_.packet_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeDefaultTypeInternal() {}
  union {
    Time _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeDefaultTypeInternal _Time_default_instance_;
PROTOBUF_CONSTEXPR Equip_Item::Equip_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.itemname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.packet_type_)*/0u
  , /*decltype(_impl_.itemtype_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Equip_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Equip_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Equip_ItemDefaultTypeInternal() {}
  union {
    Equip_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Equip_ItemDefaultTypeInternal _Equip_Item_default_instance_;
PROTOBUF_CONSTEXPR ping::ping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.packet_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct pingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR pingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~pingDefaultTypeInternal() {}
  union {
    ping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 pingDefaultTypeInternal _ping_default_instance_;
PROTOBUF_CONSTEXPR patrol_hit::patrol_hit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.zombieid_)*/0u
  , /*decltype(_impl_.packet_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct patrol_hitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR patrol_hitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~patrol_hitDefaultTypeInternal() {}
  union {
    patrol_hit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 patrol_hitDefaultTypeInternal _patrol_hit_default_instance_;
PROTOBUF_CONSTEXPR set_item::set_item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.itemname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.texture_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.itemid_)*/0u
  , /*decltype(_impl_.packet_type_)*/0u
  , /*decltype(_impl_.itemclass_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_.floor_)*/0u
  , /*decltype(_impl_.posx_)*/0
  , /*decltype(_impl_.posy_)*/0
  , /*decltype(_impl_.posz_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct set_itemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR set_itemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~set_itemDefaultTypeInternal() {}
  union {
    set_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 set_itemDefaultTypeInternal _set_item_default_instance_;
PROTOBUF_CONSTEXPR ItemDataList::ItemDataList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.packet_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemDataListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemDataListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemDataListDefaultTypeInternal() {}
  union {
    ItemDataList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemDataListDefaultTypeInternal _ItemDataList_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Gstruct_2eproto[17];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Gstruct_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Gstruct_2eproto = nullptr;

const uint32_t TableStruct_Gstruct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::Character, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::Character, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Character, _impl_.charactertype_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Character, _impl_.packet_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Character, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Character, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Character, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Character, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Character, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Character, _impl_.roll_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Character, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Character, _impl_.b_run_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Character, _impl_.b_jump_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Character, _impl_.isingame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::jump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::jump, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::jump, _impl_.packet_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::Character_Attack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::Character_Attack, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Character_Attack, _impl_.attack_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Character_Attack, _impl_.packet_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::Zombie, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::Zombie, _impl_.zombieid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Zombie, _impl_.zombietype_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Zombie, _impl_.packet_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Zombie, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Zombie, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Zombie, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Zombie, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Zombie, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Zombie, _impl_.roll_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::Zombie_attack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::Zombie_attack, _impl_.zombieid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Zombie_attack, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Zombie_attack, _impl_.packet_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::Zombie_hp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::Zombie_hp, _impl_.zombieid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Zombie_hp, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Zombie_hp, _impl_.packet_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ZombieDataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ZombieDataList, _impl_.zombies_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ZombieDataList, _impl_.packet_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::Vector3, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Vector3, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Vector3, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ZombiePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ZombiePath, _impl_.zombieid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ZombiePath, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ZombiePath, _impl_.packet_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ZombiePath, _impl_.location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PatrolPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PatrolPath, _impl_.zombieid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PatrolPath, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PatrolPath, _impl_.packet_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PatrolPath, _impl_.location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::Detected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::Detected, _impl_.zombieid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Detected, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Detected, _impl_.packet_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Detected, _impl_.player_insight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::Time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::Time, _impl_.timer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Time, _impl_.packet_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::Equip_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::Equip_Item, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Equip_Item, _impl_.itemname_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Equip_Item, _impl_.packet_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Equip_Item, _impl_.itemtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ping, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ping, _impl_.packet_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::patrol_hit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::patrol_hit, _impl_.zombieid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::patrol_hit, _impl_.packet_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::set_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::set_item, _impl_.itemid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::set_item, _impl_.itemname_),
  PROTOBUF_FIELD_OFFSET(::Protocol::set_item, _impl_.packet_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::set_item, _impl_.itemclass_),
  PROTOBUF_FIELD_OFFSET(::Protocol::set_item, _impl_.texture_path_),
  PROTOBUF_FIELD_OFFSET(::Protocol::set_item, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::Protocol::set_item, _impl_.floor_),
  PROTOBUF_FIELD_OFFSET(::Protocol::set_item, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::set_item, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::Protocol::set_item, _impl_.posz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemDataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemDataList, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemDataList, _impl_.packet_type_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::Character)},
  { 19, -1, -1, sizeof(::Protocol::jump)},
  { 27, -1, -1, sizeof(::Protocol::Character_Attack)},
  { 36, -1, -1, sizeof(::Protocol::Zombie)},
  { 51, -1, -1, sizeof(::Protocol::Zombie_attack)},
  { 60, -1, -1, sizeof(::Protocol::Zombie_hp)},
  { 69, -1, -1, sizeof(::Protocol::ZombieDataList)},
  { 77, -1, -1, sizeof(::Protocol::Vector3)},
  { 86, -1, -1, sizeof(::Protocol::ZombiePath)},
  { 96, -1, -1, sizeof(::Protocol::PatrolPath)},
  { 106, -1, -1, sizeof(::Protocol::Detected)},
  { 116, -1, -1, sizeof(::Protocol::Time)},
  { 124, -1, -1, sizeof(::Protocol::Equip_Item)},
  { 134, -1, -1, sizeof(::Protocol::ping)},
  { 142, -1, -1, sizeof(::Protocol::patrol_hit)},
  { 150, -1, -1, sizeof(::Protocol::set_item)},
  { 166, -1, -1, sizeof(::Protocol::ItemDataList)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_Character_default_instance_._instance,
  &::Protocol::_jump_default_instance_._instance,
  &::Protocol::_Character_Attack_default_instance_._instance,
  &::Protocol::_Zombie_default_instance_._instance,
  &::Protocol::_Zombie_attack_default_instance_._instance,
  &::Protocol::_Zombie_hp_default_instance_._instance,
  &::Protocol::_ZombieDataList_default_instance_._instance,
  &::Protocol::_Vector3_default_instance_._instance,
  &::Protocol::_ZombiePath_default_instance_._instance,
  &::Protocol::_PatrolPath_default_instance_._instance,
  &::Protocol::_Detected_default_instance_._instance,
  &::Protocol::_Time_default_instance_._instance,
  &::Protocol::_Equip_Item_default_instance_._instance,
  &::Protocol::_ping_default_instance_._instance,
  &::Protocol::_patrol_hit_default_instance_._instance,
  &::Protocol::_set_item_default_instance_._instance,
  &::Protocol::_ItemDataList_default_instance_._instance,
};

const char descriptor_table_protodef_Gstruct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rGstruct.proto\022\010Protocol\"\321\001\n\tCharacter\022"
  "\020\n\010playerid\030\001 \001(\r\022\025\n\rcharactertype\030\002 \001(\r"
  "\022\023\n\013packet_type\030\003 \001(\r\022\t\n\001x\030\004 \001(\002\022\t\n\001y\030\005 "
  "\001(\002\022\t\n\001z\030\006 \001(\002\022\r\n\005pitch\030\007 \001(\002\022\013\n\003yaw\030\010 \001"
  "(\002\022\014\n\004roll\030\t \001(\002\022\n\n\002hp\030\n \001(\002\022\r\n\005b_run\030\013 "
  "\001(\r\022\016\n\006b_jump\030\014 \001(\r\022\020\n\010isingame\030\r \001(\010\"-\n"
  "\004jump\022\020\n\010playerid\030\001 \001(\r\022\023\n\013packet_type\030\003"
  " \001(\r\"I\n\020Character_Attack\022\020\n\010playerid\030\001 \001"
  "(\r\022\016\n\006attack\030\002 \001(\010\022\023\n\013packet_type\030\003 \001(\r\""
  "\216\001\n\006Zombie\022\020\n\010zombieid\030\001 \001(\r\022\022\n\nzombiety"
  "pe\030\002 \001(\r\022\023\n\013packet_type\030\003 \001(\r\022\t\n\001x\030\004 \001(\002"
  "\022\t\n\001y\030\005 \001(\002\022\t\n\001z\030\006 \001(\002\022\r\n\005pitch\030\007 \001(\002\022\013\n"
  "\003yaw\030\010 \001(\002\022\014\n\004roll\030\t \001(\002\"H\n\rZombie_attac"
  "k\022\020\n\010zombieid\030\001 \001(\r\022\020\n\010playerid\030\002 \001(\r\022\023\n"
  "\013packet_type\030\003 \001(\r\">\n\tZombie_hp\022\020\n\010zombi"
  "eid\030\001 \001(\r\022\n\n\002hp\030\002 \001(\002\022\023\n\013packet_type\030\003 \001"
  "(\r\"H\n\016ZombieDataList\022!\n\007zombies\030\001 \003(\0132\020."
  "Protocol.Zombie\022\023\n\013packet_type\030\003 \001(\r\"*\n\007"
  "Vector3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002"
  "\"y\n\nZombiePath\022\020\n\010zombieid\030\001 \001(\r\022\037\n\004path"
  "\030\002 \001(\0132\021.Protocol.Vector3\022\023\n\013packet_type"
  "\030\003 \001(\r\022#\n\010location\030\004 \001(\0132\021.Protocol.Vect"
  "or3\"y\n\nPatrolPath\022\020\n\010zombieid\030\001 \001(\r\022\037\n\004p"
  "ath\030\002 \001(\0132\021.Protocol.Vector3\022\023\n\013packet_t"
  "ype\030\003 \001(\r\022#\n\010location\030\004 \001(\0132\021.Protocol.V"
  "ector3\"[\n\010Detected\022\020\n\010zombieid\030\001 \001(\r\022\020\n\010"
  "playerid\030\002 \001(\r\022\023\n\013packet_type\030\003 \001(\r\022\026\n\016p"
  "layer_insight\030\004 \001(\010\"*\n\004Time\022\r\n\005timer\030\001 \001"
  "(\002\022\023\n\013packet_type\030\003 \001(\r\"W\n\nEquip_Item\022\020\n"
  "\010playerid\030\001 \001(\r\022\020\n\010itemname\030\002 \001(\t\022\023\n\013pac"
  "ket_type\030\003 \001(\r\022\020\n\010itemtype\030\004 \001(\r\"-\n\004ping"
  "\022\020\n\010playerid\030\001 \001(\r\022\023\n\013packet_type\030\003 \001(\r\""
  "3\n\npatrol_hit\022\020\n\010zombieid\030\001 \001(\r\022\023\n\013packe"
  "t_type\030\003 \001(\r\"\262\001\n\010set_item\022\016\n\006itemid\030\001 \001("
  "\r\022\020\n\010itemname\030\002 \001(\t\022\023\n\013packet_type\030\003 \001(\r"
  "\022\021\n\titemclass\030\004 \001(\r\022\024\n\014texture_path\030\005 \001("
  "\t\022\r\n\005count\030\006 \001(\r\022\r\n\005floor\030\007 \001(\r\022\014\n\004posx\030"
  "\010 \001(\002\022\014\n\004posy\030\t \001(\002\022\014\n\004posz\030\n \001(\002\"F\n\014Ite"
  "mDataList\022!\n\005items\030\001 \003(\0132\022.Protocol.set_"
  "item\022\023\n\013packet_type\030\003 \001(\rb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Gstruct_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Gstruct_2eproto = {
    false, false, 1593, descriptor_table_protodef_Gstruct_2eproto,
    "Gstruct.proto",
    &descriptor_table_Gstruct_2eproto_once, nullptr, 0, 17,
    schemas, file_default_instances, TableStruct_Gstruct_2eproto::offsets,
    file_level_metadata_Gstruct_2eproto, file_level_enum_descriptors_Gstruct_2eproto,
    file_level_service_descriptors_Gstruct_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Gstruct_2eproto_getter() {
  return &descriptor_table_Gstruct_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Gstruct_2eproto(&descriptor_table_Gstruct_2eproto);
namespace Protocol {

// ===================================================================

class Character::_Internal {
 public:
};

Character::Character(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.Character)
}
Character::Character(const Character& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Character* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.charactertype_){}
    , decltype(_impl_.packet_type_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.pitch_){}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.roll_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.b_run_){}
    , decltype(_impl_.b_jump_){}
    , decltype(_impl_.isingame_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isingame_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.isingame_));
  // @@protoc_insertion_point(copy_constructor:Protocol.Character)
}

inline void Character::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , decltype(_impl_.charactertype_){0u}
    , decltype(_impl_.packet_type_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.pitch_){0}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.roll_){0}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.b_run_){0u}
    , decltype(_impl_.b_jump_){0u}
    , decltype(_impl_.isingame_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Character::~Character() {
  // @@protoc_insertion_point(destructor:Protocol.Character)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Character::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Character::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Character::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Character)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isingame_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.isingame_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Character::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 charactertype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.charactertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 packet_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.packet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float roll = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float hp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 b_run = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.b_run_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 b_jump = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.b_jump_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isingame = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.isingame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Character::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Character)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerid = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 charactertype = 2;
  if (this->_internal_charactertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_charactertype(), target);
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packet_type(), target);
  }

  // float x = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_x(), target);
  }

  // float y = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_y(), target);
  }

  // float z = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_z(), target);
  }

  // float pitch = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_pitch(), target);
  }

  // float yaw = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_yaw(), target);
  }

  // float roll = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_roll(), target);
  }

  // float hp = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_hp(), target);
  }

  // uint32 b_run = 11;
  if (this->_internal_b_run() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_b_run(), target);
  }

  // uint32 b_jump = 12;
  if (this->_internal_b_jump() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_b_jump(), target);
  }

  // bool isingame = 13;
  if (this->_internal_isingame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_isingame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Character)
  return target;
}

size_t Character::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Character)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerid = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 charactertype = 2;
  if (this->_internal_charactertype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_charactertype());
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packet_type());
  }

  // float x = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // float roll = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 4;
  }

  // float hp = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    total_size += 1 + 4;
  }

  // uint32 b_run = 11;
  if (this->_internal_b_run() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_b_run());
  }

  // uint32 b_jump = 12;
  if (this->_internal_b_jump() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_b_jump());
  }

  // bool isingame = 13;
  if (this->_internal_isingame() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Character::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Character::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Character::GetClassData() const { return &_class_data_; }


void Character::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Character*>(&to_msg);
  auto& from = static_cast<const Character&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Character)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_charactertype() != 0) {
    _this->_internal_set_charactertype(from._internal_charactertype());
  }
  if (from._internal_packet_type() != 0) {
    _this->_internal_set_packet_type(from._internal_packet_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = from._internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_b_run() != 0) {
    _this->_internal_set_b_run(from._internal_b_run());
  }
  if (from._internal_b_jump() != 0) {
    _this->_internal_set_b_jump(from._internal_b_jump());
  }
  if (from._internal_isingame() != 0) {
    _this->_internal_set_isingame(from._internal_isingame());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Character::CopyFrom(const Character& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Character)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Character::IsInitialized() const {
  return true;
}

void Character::InternalSwap(Character* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Character, _impl_.isingame_)
      + sizeof(Character::_impl_.isingame_)
      - PROTOBUF_FIELD_OFFSET(Character, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Character::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Gstruct_2eproto_getter, &descriptor_table_Gstruct_2eproto_once,
      file_level_metadata_Gstruct_2eproto[0]);
}

// ===================================================================

class jump::_Internal {
 public:
};

jump::jump(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.jump)
}
jump::jump(const jump& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  jump* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.packet_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.packet_type_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.packet_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.jump)
}

inline void jump::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , decltype(_impl_.packet_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

jump::~jump() {
  // @@protoc_insertion_point(destructor:Protocol.jump)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void jump::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void jump::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void jump::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.jump)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.packet_type_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.packet_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* jump::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 packet_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.packet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* jump::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.jump)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerid = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packet_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.jump)
  return target;
}

size_t jump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.jump)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerid = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packet_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData jump::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    jump::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*jump::GetClassData() const { return &_class_data_; }


void jump::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<jump*>(&to_msg);
  auto& from = static_cast<const jump&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.jump)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_packet_type() != 0) {
    _this->_internal_set_packet_type(from._internal_packet_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void jump::CopyFrom(const jump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.jump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool jump::IsInitialized() const {
  return true;
}

void jump::InternalSwap(jump* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(jump, _impl_.packet_type_)
      + sizeof(jump::_impl_.packet_type_)
      - PROTOBUF_FIELD_OFFSET(jump, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata jump::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Gstruct_2eproto_getter, &descriptor_table_Gstruct_2eproto_once,
      file_level_metadata_Gstruct_2eproto[1]);
}

// ===================================================================

class Character_Attack::_Internal {
 public:
};

Character_Attack::Character_Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.Character_Attack)
}
Character_Attack::Character_Attack(const Character_Attack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Character_Attack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.attack_){}
    , decltype(_impl_.packet_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.packet_type_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.packet_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.Character_Attack)
}

inline void Character_Attack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , decltype(_impl_.attack_){false}
    , decltype(_impl_.packet_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Character_Attack::~Character_Attack() {
  // @@protoc_insertion_point(destructor:Protocol.Character_Attack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Character_Attack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Character_Attack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Character_Attack::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Character_Attack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.packet_type_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.packet_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Character_Attack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool attack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.attack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 packet_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.packet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Character_Attack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Character_Attack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerid = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // bool attack = 2;
  if (this->_internal_attack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_attack(), target);
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packet_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Character_Attack)
  return target;
}

size_t Character_Attack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Character_Attack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerid = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // bool attack = 2;
  if (this->_internal_attack() != 0) {
    total_size += 1 + 1;
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packet_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Character_Attack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Character_Attack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Character_Attack::GetClassData() const { return &_class_data_; }


void Character_Attack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Character_Attack*>(&to_msg);
  auto& from = static_cast<const Character_Attack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Character_Attack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_attack() != 0) {
    _this->_internal_set_attack(from._internal_attack());
  }
  if (from._internal_packet_type() != 0) {
    _this->_internal_set_packet_type(from._internal_packet_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Character_Attack::CopyFrom(const Character_Attack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Character_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Character_Attack::IsInitialized() const {
  return true;
}

void Character_Attack::InternalSwap(Character_Attack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Character_Attack, _impl_.packet_type_)
      + sizeof(Character_Attack::_impl_.packet_type_)
      - PROTOBUF_FIELD_OFFSET(Character_Attack, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Character_Attack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Gstruct_2eproto_getter, &descriptor_table_Gstruct_2eproto_once,
      file_level_metadata_Gstruct_2eproto[2]);
}

// ===================================================================

class Zombie::_Internal {
 public:
};

Zombie::Zombie(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.Zombie)
}
Zombie::Zombie(const Zombie& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Zombie* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.zombieid_){}
    , decltype(_impl_.zombietype_){}
    , decltype(_impl_.packet_type_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.pitch_){}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.roll_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.zombieid_, &from._impl_.zombieid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.roll_) -
    reinterpret_cast<char*>(&_impl_.zombieid_)) + sizeof(_impl_.roll_));
  // @@protoc_insertion_point(copy_constructor:Protocol.Zombie)
}

inline void Zombie::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.zombieid_){0u}
    , decltype(_impl_.zombietype_){0u}
    , decltype(_impl_.packet_type_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.pitch_){0}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.roll_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Zombie::~Zombie() {
  // @@protoc_insertion_point(destructor:Protocol.Zombie)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Zombie::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Zombie::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Zombie::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Zombie)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.zombieid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.roll_) -
      reinterpret_cast<char*>(&_impl_.zombieid_)) + sizeof(_impl_.roll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Zombie::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 zombieid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.zombieid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 zombietype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.zombietype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 packet_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.packet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float roll = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Zombie::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Zombie)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 zombieid = 1;
  if (this->_internal_zombieid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_zombieid(), target);
  }

  // uint32 zombietype = 2;
  if (this->_internal_zombietype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_zombietype(), target);
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packet_type(), target);
  }

  // float x = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_x(), target);
  }

  // float y = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_y(), target);
  }

  // float z = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_z(), target);
  }

  // float pitch = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_pitch(), target);
  }

  // float yaw = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_yaw(), target);
  }

  // float roll = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Zombie)
  return target;
}

size_t Zombie::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Zombie)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 zombieid = 1;
  if (this->_internal_zombieid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_zombieid());
  }

  // uint32 zombietype = 2;
  if (this->_internal_zombietype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_zombietype());
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packet_type());
  }

  // float x = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // float roll = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Zombie::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Zombie::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Zombie::GetClassData() const { return &_class_data_; }


void Zombie::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Zombie*>(&to_msg);
  auto& from = static_cast<const Zombie&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Zombie)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_zombieid() != 0) {
    _this->_internal_set_zombieid(from._internal_zombieid());
  }
  if (from._internal_zombietype() != 0) {
    _this->_internal_set_zombietype(from._internal_zombietype());
  }
  if (from._internal_packet_type() != 0) {
    _this->_internal_set_packet_type(from._internal_packet_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Zombie::CopyFrom(const Zombie& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Zombie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zombie::IsInitialized() const {
  return true;
}

void Zombie::InternalSwap(Zombie* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Zombie, _impl_.roll_)
      + sizeof(Zombie::_impl_.roll_)
      - PROTOBUF_FIELD_OFFSET(Zombie, _impl_.zombieid_)>(
          reinterpret_cast<char*>(&_impl_.zombieid_),
          reinterpret_cast<char*>(&other->_impl_.zombieid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Zombie::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Gstruct_2eproto_getter, &descriptor_table_Gstruct_2eproto_once,
      file_level_metadata_Gstruct_2eproto[3]);
}

// ===================================================================

class Zombie_attack::_Internal {
 public:
};

Zombie_attack::Zombie_attack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.Zombie_attack)
}
Zombie_attack::Zombie_attack(const Zombie_attack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Zombie_attack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.zombieid_){}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.packet_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.zombieid_, &from._impl_.zombieid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.packet_type_) -
    reinterpret_cast<char*>(&_impl_.zombieid_)) + sizeof(_impl_.packet_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.Zombie_attack)
}

inline void Zombie_attack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.zombieid_){0u}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.packet_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Zombie_attack::~Zombie_attack() {
  // @@protoc_insertion_point(destructor:Protocol.Zombie_attack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Zombie_attack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Zombie_attack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Zombie_attack::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Zombie_attack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.zombieid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.packet_type_) -
      reinterpret_cast<char*>(&_impl_.zombieid_)) + sizeof(_impl_.packet_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Zombie_attack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 zombieid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.zombieid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 packet_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.packet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Zombie_attack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Zombie_attack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 zombieid = 1;
  if (this->_internal_zombieid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_zombieid(), target);
  }

  // uint32 playerid = 2;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packet_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Zombie_attack)
  return target;
}

size_t Zombie_attack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Zombie_attack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 zombieid = 1;
  if (this->_internal_zombieid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_zombieid());
  }

  // uint32 playerid = 2;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packet_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Zombie_attack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Zombie_attack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Zombie_attack::GetClassData() const { return &_class_data_; }


void Zombie_attack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Zombie_attack*>(&to_msg);
  auto& from = static_cast<const Zombie_attack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Zombie_attack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_zombieid() != 0) {
    _this->_internal_set_zombieid(from._internal_zombieid());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_packet_type() != 0) {
    _this->_internal_set_packet_type(from._internal_packet_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Zombie_attack::CopyFrom(const Zombie_attack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Zombie_attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zombie_attack::IsInitialized() const {
  return true;
}

void Zombie_attack::InternalSwap(Zombie_attack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Zombie_attack, _impl_.packet_type_)
      + sizeof(Zombie_attack::_impl_.packet_type_)
      - PROTOBUF_FIELD_OFFSET(Zombie_attack, _impl_.zombieid_)>(
          reinterpret_cast<char*>(&_impl_.zombieid_),
          reinterpret_cast<char*>(&other->_impl_.zombieid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Zombie_attack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Gstruct_2eproto_getter, &descriptor_table_Gstruct_2eproto_once,
      file_level_metadata_Gstruct_2eproto[4]);
}

// ===================================================================

class Zombie_hp::_Internal {
 public:
};

Zombie_hp::Zombie_hp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.Zombie_hp)
}
Zombie_hp::Zombie_hp(const Zombie_hp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Zombie_hp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.zombieid_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.packet_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.zombieid_, &from._impl_.zombieid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.packet_type_) -
    reinterpret_cast<char*>(&_impl_.zombieid_)) + sizeof(_impl_.packet_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.Zombie_hp)
}

inline void Zombie_hp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.zombieid_){0u}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.packet_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Zombie_hp::~Zombie_hp() {
  // @@protoc_insertion_point(destructor:Protocol.Zombie_hp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Zombie_hp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Zombie_hp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Zombie_hp::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Zombie_hp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.zombieid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.packet_type_) -
      reinterpret_cast<char*>(&_impl_.zombieid_)) + sizeof(_impl_.packet_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Zombie_hp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 zombieid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.zombieid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 packet_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.packet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Zombie_hp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Zombie_hp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 zombieid = 1;
  if (this->_internal_zombieid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_zombieid(), target);
  }

  // float hp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_hp(), target);
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packet_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Zombie_hp)
  return target;
}

size_t Zombie_hp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Zombie_hp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 zombieid = 1;
  if (this->_internal_zombieid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_zombieid());
  }

  // float hp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    total_size += 1 + 4;
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packet_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Zombie_hp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Zombie_hp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Zombie_hp::GetClassData() const { return &_class_data_; }


void Zombie_hp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Zombie_hp*>(&to_msg);
  auto& from = static_cast<const Zombie_hp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Zombie_hp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_zombieid() != 0) {
    _this->_internal_set_zombieid(from._internal_zombieid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = from._internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_packet_type() != 0) {
    _this->_internal_set_packet_type(from._internal_packet_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Zombie_hp::CopyFrom(const Zombie_hp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Zombie_hp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zombie_hp::IsInitialized() const {
  return true;
}

void Zombie_hp::InternalSwap(Zombie_hp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Zombie_hp, _impl_.packet_type_)
      + sizeof(Zombie_hp::_impl_.packet_type_)
      - PROTOBUF_FIELD_OFFSET(Zombie_hp, _impl_.zombieid_)>(
          reinterpret_cast<char*>(&_impl_.zombieid_),
          reinterpret_cast<char*>(&other->_impl_.zombieid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Zombie_hp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Gstruct_2eproto_getter, &descriptor_table_Gstruct_2eproto_once,
      file_level_metadata_Gstruct_2eproto[5]);
}

// ===================================================================

class ZombieDataList::_Internal {
 public:
};

ZombieDataList::ZombieDataList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ZombieDataList)
}
ZombieDataList::ZombieDataList(const ZombieDataList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ZombieDataList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.zombies_){from._impl_.zombies_}
    , decltype(_impl_.packet_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.packet_type_ = from._impl_.packet_type_;
  // @@protoc_insertion_point(copy_constructor:Protocol.ZombieDataList)
}

inline void ZombieDataList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.zombies_){arena}
    , decltype(_impl_.packet_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ZombieDataList::~ZombieDataList() {
  // @@protoc_insertion_point(destructor:Protocol.ZombieDataList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ZombieDataList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.zombies_.~RepeatedPtrField();
}

void ZombieDataList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ZombieDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ZombieDataList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.zombies_.Clear();
  _impl_.packet_type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZombieDataList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.Zombie zombies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_zombies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 packet_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.packet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZombieDataList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ZombieDataList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.Zombie zombies = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_zombies_size()); i < n; i++) {
    const auto& repfield = this->_internal_zombies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packet_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ZombieDataList)
  return target;
}

size_t ZombieDataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ZombieDataList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.Zombie zombies = 1;
  total_size += 1UL * this->_internal_zombies_size();
  for (const auto& msg : this->_impl_.zombies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packet_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZombieDataList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ZombieDataList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZombieDataList::GetClassData() const { return &_class_data_; }


void ZombieDataList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ZombieDataList*>(&to_msg);
  auto& from = static_cast<const ZombieDataList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ZombieDataList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.zombies_.MergeFrom(from._impl_.zombies_);
  if (from._internal_packet_type() != 0) {
    _this->_internal_set_packet_type(from._internal_packet_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZombieDataList::CopyFrom(const ZombieDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ZombieDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZombieDataList::IsInitialized() const {
  return true;
}

void ZombieDataList::InternalSwap(ZombieDataList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.zombies_.InternalSwap(&other->_impl_.zombies_);
  swap(_impl_.packet_type_, other->_impl_.packet_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ZombieDataList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Gstruct_2eproto_getter, &descriptor_table_Gstruct_2eproto_once,
      file_level_metadata_Gstruct_2eproto[6]);
}

// ===================================================================

class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:Protocol.Vector3)
}

inline void Vector3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:Protocol.Vector3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Vector3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Vector3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Vector3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3::GetClassData() const { return &_class_data_; }


void Vector3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector3*>(&to_msg);
  auto& from = static_cast<const Vector3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Vector3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_)
      + sizeof(Vector3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Gstruct_2eproto_getter, &descriptor_table_Gstruct_2eproto_once,
      file_level_metadata_Gstruct_2eproto[7]);
}

// ===================================================================

class ZombiePath::_Internal {
 public:
  static const ::Protocol::Vector3& path(const ZombiePath* msg);
  static const ::Protocol::Vector3& location(const ZombiePath* msg);
};

const ::Protocol::Vector3&
ZombiePath::_Internal::path(const ZombiePath* msg) {
  return *msg->_impl_.path_;
}
const ::Protocol::Vector3&
ZombiePath::_Internal::location(const ZombiePath* msg) {
  return *msg->_impl_.location_;
}
ZombiePath::ZombiePath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ZombiePath)
}
ZombiePath::ZombiePath(const ZombiePath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ZombiePath* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){nullptr}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.zombieid_){}
    , decltype(_impl_.packet_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path()) {
    _this->_impl_.path_ = new ::Protocol::Vector3(*from._impl_.path_);
  }
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Protocol::Vector3(*from._impl_.location_);
  }
  ::memcpy(&_impl_.zombieid_, &from._impl_.zombieid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.packet_type_) -
    reinterpret_cast<char*>(&_impl_.zombieid_)) + sizeof(_impl_.packet_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.ZombiePath)
}

inline void ZombiePath::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){nullptr}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.zombieid_){0u}
    , decltype(_impl_.packet_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ZombiePath::~ZombiePath() {
  // @@protoc_insertion_point(destructor:Protocol.ZombiePath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ZombiePath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.path_;
  if (this != internal_default_instance()) delete _impl_.location_;
}

void ZombiePath::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ZombiePath::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ZombiePath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.path_ != nullptr) {
    delete _impl_.path_;
  }
  _impl_.path_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  ::memset(&_impl_.zombieid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.packet_type_) -
      reinterpret_cast<char*>(&_impl_.zombieid_)) + sizeof(_impl_.packet_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZombiePath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 zombieid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.zombieid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 packet_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.packet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZombiePath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ZombiePath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 zombieid = 1;
  if (this->_internal_zombieid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_zombieid(), target);
  }

  // .Protocol.Vector3 path = 2;
  if (this->_internal_has_path()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::path(this),
        _Internal::path(this).GetCachedSize(), target, stream);
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packet_type(), target);
  }

  // .Protocol.Vector3 location = 4;
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ZombiePath)
  return target;
}

size_t ZombiePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ZombiePath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vector3 path = 2;
  if (this->_internal_has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.path_);
  }

  // .Protocol.Vector3 location = 4;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // uint32 zombieid = 1;
  if (this->_internal_zombieid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_zombieid());
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packet_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZombiePath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ZombiePath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZombiePath::GetClassData() const { return &_class_data_; }


void ZombiePath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ZombiePath*>(&to_msg);
  auto& from = static_cast<const ZombiePath&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ZombiePath)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_path()) {
    _this->_internal_mutable_path()->::Protocol::Vector3::MergeFrom(
        from._internal_path());
  }
  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::Protocol::Vector3::MergeFrom(
        from._internal_location());
  }
  if (from._internal_zombieid() != 0) {
    _this->_internal_set_zombieid(from._internal_zombieid());
  }
  if (from._internal_packet_type() != 0) {
    _this->_internal_set_packet_type(from._internal_packet_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZombiePath::CopyFrom(const ZombiePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ZombiePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZombiePath::IsInitialized() const {
  return true;
}

void ZombiePath::InternalSwap(ZombiePath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZombiePath, _impl_.packet_type_)
      + sizeof(ZombiePath::_impl_.packet_type_)
      - PROTOBUF_FIELD_OFFSET(ZombiePath, _impl_.path_)>(
          reinterpret_cast<char*>(&_impl_.path_),
          reinterpret_cast<char*>(&other->_impl_.path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZombiePath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Gstruct_2eproto_getter, &descriptor_table_Gstruct_2eproto_once,
      file_level_metadata_Gstruct_2eproto[8]);
}

// ===================================================================

class PatrolPath::_Internal {
 public:
  static const ::Protocol::Vector3& path(const PatrolPath* msg);
  static const ::Protocol::Vector3& location(const PatrolPath* msg);
};

const ::Protocol::Vector3&
PatrolPath::_Internal::path(const PatrolPath* msg) {
  return *msg->_impl_.path_;
}
const ::Protocol::Vector3&
PatrolPath::_Internal::location(const PatrolPath* msg) {
  return *msg->_impl_.location_;
}
PatrolPath::PatrolPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.PatrolPath)
}
PatrolPath::PatrolPath(const PatrolPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatrolPath* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){nullptr}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.zombieid_){}
    , decltype(_impl_.packet_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path()) {
    _this->_impl_.path_ = new ::Protocol::Vector3(*from._impl_.path_);
  }
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Protocol::Vector3(*from._impl_.location_);
  }
  ::memcpy(&_impl_.zombieid_, &from._impl_.zombieid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.packet_type_) -
    reinterpret_cast<char*>(&_impl_.zombieid_)) + sizeof(_impl_.packet_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.PatrolPath)
}

inline void PatrolPath::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){nullptr}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.zombieid_){0u}
    , decltype(_impl_.packet_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PatrolPath::~PatrolPath() {
  // @@protoc_insertion_point(destructor:Protocol.PatrolPath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatrolPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.path_;
  if (this != internal_default_instance()) delete _impl_.location_;
}

void PatrolPath::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatrolPath::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PatrolPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.path_ != nullptr) {
    delete _impl_.path_;
  }
  _impl_.path_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  ::memset(&_impl_.zombieid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.packet_type_) -
      reinterpret_cast<char*>(&_impl_.zombieid_)) + sizeof(_impl_.packet_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatrolPath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 zombieid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.zombieid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 packet_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.packet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatrolPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PatrolPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 zombieid = 1;
  if (this->_internal_zombieid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_zombieid(), target);
  }

  // .Protocol.Vector3 path = 2;
  if (this->_internal_has_path()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::path(this),
        _Internal::path(this).GetCachedSize(), target, stream);
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packet_type(), target);
  }

  // .Protocol.Vector3 location = 4;
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PatrolPath)
  return target;
}

size_t PatrolPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PatrolPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vector3 path = 2;
  if (this->_internal_has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.path_);
  }

  // .Protocol.Vector3 location = 4;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // uint32 zombieid = 1;
  if (this->_internal_zombieid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_zombieid());
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packet_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatrolPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatrolPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatrolPath::GetClassData() const { return &_class_data_; }


void PatrolPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatrolPath*>(&to_msg);
  auto& from = static_cast<const PatrolPath&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PatrolPath)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_path()) {
    _this->_internal_mutable_path()->::Protocol::Vector3::MergeFrom(
        from._internal_path());
  }
  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::Protocol::Vector3::MergeFrom(
        from._internal_location());
  }
  if (from._internal_zombieid() != 0) {
    _this->_internal_set_zombieid(from._internal_zombieid());
  }
  if (from._internal_packet_type() != 0) {
    _this->_internal_set_packet_type(from._internal_packet_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatrolPath::CopyFrom(const PatrolPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PatrolPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatrolPath::IsInitialized() const {
  return true;
}

void PatrolPath::InternalSwap(PatrolPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatrolPath, _impl_.packet_type_)
      + sizeof(PatrolPath::_impl_.packet_type_)
      - PROTOBUF_FIELD_OFFSET(PatrolPath, _impl_.path_)>(
          reinterpret_cast<char*>(&_impl_.path_),
          reinterpret_cast<char*>(&other->_impl_.path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PatrolPath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Gstruct_2eproto_getter, &descriptor_table_Gstruct_2eproto_once,
      file_level_metadata_Gstruct_2eproto[9]);
}

// ===================================================================

class Detected::_Internal {
 public:
};

Detected::Detected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.Detected)
}
Detected::Detected(const Detected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Detected* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.zombieid_){}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.packet_type_){}
    , decltype(_impl_.player_insight_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.zombieid_, &from._impl_.zombieid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_insight_) -
    reinterpret_cast<char*>(&_impl_.zombieid_)) + sizeof(_impl_.player_insight_));
  // @@protoc_insertion_point(copy_constructor:Protocol.Detected)
}

inline void Detected::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.zombieid_){0u}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.packet_type_){0u}
    , decltype(_impl_.player_insight_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Detected::~Detected() {
  // @@protoc_insertion_point(destructor:Protocol.Detected)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Detected::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Detected::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Detected::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Detected)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.zombieid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.player_insight_) -
      reinterpret_cast<char*>(&_impl_.zombieid_)) + sizeof(_impl_.player_insight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Detected::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 zombieid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.zombieid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 packet_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.packet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool player_insight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.player_insight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Detected::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Detected)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 zombieid = 1;
  if (this->_internal_zombieid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_zombieid(), target);
  }

  // uint32 playerid = 2;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packet_type(), target);
  }

  // bool player_insight = 4;
  if (this->_internal_player_insight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_player_insight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Detected)
  return target;
}

size_t Detected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Detected)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 zombieid = 1;
  if (this->_internal_zombieid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_zombieid());
  }

  // uint32 playerid = 2;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packet_type());
  }

  // bool player_insight = 4;
  if (this->_internal_player_insight() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Detected::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Detected::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Detected::GetClassData() const { return &_class_data_; }


void Detected::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Detected*>(&to_msg);
  auto& from = static_cast<const Detected&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Detected)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_zombieid() != 0) {
    _this->_internal_set_zombieid(from._internal_zombieid());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_packet_type() != 0) {
    _this->_internal_set_packet_type(from._internal_packet_type());
  }
  if (from._internal_player_insight() != 0) {
    _this->_internal_set_player_insight(from._internal_player_insight());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Detected::CopyFrom(const Detected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Detected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detected::IsInitialized() const {
  return true;
}

void Detected::InternalSwap(Detected* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Detected, _impl_.player_insight_)
      + sizeof(Detected::_impl_.player_insight_)
      - PROTOBUF_FIELD_OFFSET(Detected, _impl_.zombieid_)>(
          reinterpret_cast<char*>(&_impl_.zombieid_),
          reinterpret_cast<char*>(&other->_impl_.zombieid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Detected::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Gstruct_2eproto_getter, &descriptor_table_Gstruct_2eproto_once,
      file_level_metadata_Gstruct_2eproto[10]);
}

// ===================================================================

class Time::_Internal {
 public:
};

Time::Time(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.Time)
}
Time::Time(const Time& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Time* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timer_){}
    , decltype(_impl_.packet_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timer_, &from._impl_.timer_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.packet_type_) -
    reinterpret_cast<char*>(&_impl_.timer_)) + sizeof(_impl_.packet_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.Time)
}

inline void Time::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timer_){0}
    , decltype(_impl_.packet_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:Protocol.Time)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Time::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Time::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Time)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.packet_type_) -
      reinterpret_cast<char*>(&_impl_.timer_)) + sizeof(_impl_.packet_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Time::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float timer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.timer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 packet_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.packet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Time::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Time)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float timer = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_timer = this->_internal_timer();
  uint32_t raw_timer;
  memcpy(&raw_timer, &tmp_timer, sizeof(tmp_timer));
  if (raw_timer != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_timer(), target);
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packet_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Time)
  return target;
}

size_t Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Time)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float timer = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_timer = this->_internal_timer();
  uint32_t raw_timer;
  memcpy(&raw_timer, &tmp_timer, sizeof(tmp_timer));
  if (raw_timer != 0) {
    total_size += 1 + 4;
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packet_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Time::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Time::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Time::GetClassData() const { return &_class_data_; }


void Time::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Time*>(&to_msg);
  auto& from = static_cast<const Time&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Time)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_timer = from._internal_timer();
  uint32_t raw_timer;
  memcpy(&raw_timer, &tmp_timer, sizeof(tmp_timer));
  if (raw_timer != 0) {
    _this->_internal_set_timer(from._internal_timer());
  }
  if (from._internal_packet_type() != 0) {
    _this->_internal_set_packet_type(from._internal_packet_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {
  return true;
}

void Time::InternalSwap(Time* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Time, _impl_.packet_type_)
      + sizeof(Time::_impl_.packet_type_)
      - PROTOBUF_FIELD_OFFSET(Time, _impl_.timer_)>(
          reinterpret_cast<char*>(&_impl_.timer_),
          reinterpret_cast<char*>(&other->_impl_.timer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Time::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Gstruct_2eproto_getter, &descriptor_table_Gstruct_2eproto_once,
      file_level_metadata_Gstruct_2eproto[11]);
}

// ===================================================================

class Equip_Item::_Internal {
 public:
};

Equip_Item::Equip_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.Equip_Item)
}
Equip_Item::Equip_Item(const Equip_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Equip_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.itemname_){}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.packet_type_){}
    , decltype(_impl_.itemtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.itemname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.itemname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_itemname().empty()) {
    _this->_impl_.itemname_.Set(from._internal_itemname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.itemtype_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.itemtype_));
  // @@protoc_insertion_point(copy_constructor:Protocol.Equip_Item)
}

inline void Equip_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.itemname_){}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.packet_type_){0u}
    , decltype(_impl_.itemtype_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.itemname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.itemname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Equip_Item::~Equip_Item() {
  // @@protoc_insertion_point(destructor:Protocol.Equip_Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Equip_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.itemname_.Destroy();
}

void Equip_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Equip_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Equip_Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.itemname_.ClearToEmpty();
  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.itemtype_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.itemtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Equip_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string itemname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_itemname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.Equip_Item.itemname"));
        } else
          goto handle_unusual;
        continue;
      // uint32 packet_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.packet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 itemtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.itemtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Equip_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Equip_Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerid = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // string itemname = 2;
  if (!this->_internal_itemname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_itemname().data(), static_cast<int>(this->_internal_itemname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.Equip_Item.itemname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_itemname(), target);
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packet_type(), target);
  }

  // uint32 itemtype = 4;
  if (this->_internal_itemtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_itemtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Equip_Item)
  return target;
}

size_t Equip_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Equip_Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string itemname = 2;
  if (!this->_internal_itemname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_itemname());
  }

  // uint32 playerid = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packet_type());
  }

  // uint32 itemtype = 4;
  if (this->_internal_itemtype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_itemtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Equip_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Equip_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Equip_Item::GetClassData() const { return &_class_data_; }


void Equip_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Equip_Item*>(&to_msg);
  auto& from = static_cast<const Equip_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Equip_Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_itemname().empty()) {
    _this->_internal_set_itemname(from._internal_itemname());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_packet_type() != 0) {
    _this->_internal_set_packet_type(from._internal_packet_type());
  }
  if (from._internal_itemtype() != 0) {
    _this->_internal_set_itemtype(from._internal_itemtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Equip_Item::CopyFrom(const Equip_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Equip_Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equip_Item::IsInitialized() const {
  return true;
}

void Equip_Item::InternalSwap(Equip_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.itemname_, lhs_arena,
      &other->_impl_.itemname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Equip_Item, _impl_.itemtype_)
      + sizeof(Equip_Item::_impl_.itemtype_)
      - PROTOBUF_FIELD_OFFSET(Equip_Item, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Equip_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Gstruct_2eproto_getter, &descriptor_table_Gstruct_2eproto_once,
      file_level_metadata_Gstruct_2eproto[12]);
}

// ===================================================================

class ping::_Internal {
 public:
};

ping::ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ping)
}
ping::ping(const ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.packet_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.packet_type_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.packet_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.ping)
}

inline void ping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , decltype(_impl_.packet_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ping::~ping() {
  // @@protoc_insertion_point(destructor:Protocol.ping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ping::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.packet_type_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.packet_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 packet_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.packet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerid = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packet_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ping)
  return target;
}

size_t ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerid = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packet_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ping::GetClassData() const { return &_class_data_; }


void ping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ping*>(&to_msg);
  auto& from = static_cast<const ping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_packet_type() != 0) {
    _this->_internal_set_packet_type(from._internal_packet_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ping::CopyFrom(const ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ping::IsInitialized() const {
  return true;
}

void ping::InternalSwap(ping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ping, _impl_.packet_type_)
      + sizeof(ping::_impl_.packet_type_)
      - PROTOBUF_FIELD_OFFSET(ping, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Gstruct_2eproto_getter, &descriptor_table_Gstruct_2eproto_once,
      file_level_metadata_Gstruct_2eproto[13]);
}

// ===================================================================

class patrol_hit::_Internal {
 public:
};

patrol_hit::patrol_hit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.patrol_hit)
}
patrol_hit::patrol_hit(const patrol_hit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  patrol_hit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.zombieid_){}
    , decltype(_impl_.packet_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.zombieid_, &from._impl_.zombieid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.packet_type_) -
    reinterpret_cast<char*>(&_impl_.zombieid_)) + sizeof(_impl_.packet_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.patrol_hit)
}

inline void patrol_hit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.zombieid_){0u}
    , decltype(_impl_.packet_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

patrol_hit::~patrol_hit() {
  // @@protoc_insertion_point(destructor:Protocol.patrol_hit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void patrol_hit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void patrol_hit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void patrol_hit::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.patrol_hit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.zombieid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.packet_type_) -
      reinterpret_cast<char*>(&_impl_.zombieid_)) + sizeof(_impl_.packet_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* patrol_hit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 zombieid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.zombieid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 packet_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.packet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* patrol_hit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.patrol_hit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 zombieid = 1;
  if (this->_internal_zombieid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_zombieid(), target);
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packet_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.patrol_hit)
  return target;
}

size_t patrol_hit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.patrol_hit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 zombieid = 1;
  if (this->_internal_zombieid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_zombieid());
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packet_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData patrol_hit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    patrol_hit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*patrol_hit::GetClassData() const { return &_class_data_; }


void patrol_hit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<patrol_hit*>(&to_msg);
  auto& from = static_cast<const patrol_hit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.patrol_hit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_zombieid() != 0) {
    _this->_internal_set_zombieid(from._internal_zombieid());
  }
  if (from._internal_packet_type() != 0) {
    _this->_internal_set_packet_type(from._internal_packet_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void patrol_hit::CopyFrom(const patrol_hit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.patrol_hit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool patrol_hit::IsInitialized() const {
  return true;
}

void patrol_hit::InternalSwap(patrol_hit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(patrol_hit, _impl_.packet_type_)
      + sizeof(patrol_hit::_impl_.packet_type_)
      - PROTOBUF_FIELD_OFFSET(patrol_hit, _impl_.zombieid_)>(
          reinterpret_cast<char*>(&_impl_.zombieid_),
          reinterpret_cast<char*>(&other->_impl_.zombieid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata patrol_hit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Gstruct_2eproto_getter, &descriptor_table_Gstruct_2eproto_once,
      file_level_metadata_Gstruct_2eproto[14]);
}

// ===================================================================

class set_item::_Internal {
 public:
};

set_item::set_item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.set_item)
}
set_item::set_item(const set_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  set_item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.itemname_){}
    , decltype(_impl_.texture_path_){}
    , decltype(_impl_.itemid_){}
    , decltype(_impl_.packet_type_){}
    , decltype(_impl_.itemclass_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.floor_){}
    , decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.posz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.itemname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.itemname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_itemname().empty()) {
    _this->_impl_.itemname_.Set(from._internal_itemname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.texture_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.texture_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_texture_path().empty()) {
    _this->_impl_.texture_path_.Set(from._internal_texture_path(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.itemid_, &from._impl_.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.posz_) -
    reinterpret_cast<char*>(&_impl_.itemid_)) + sizeof(_impl_.posz_));
  // @@protoc_insertion_point(copy_constructor:Protocol.set_item)
}

inline void set_item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.itemname_){}
    , decltype(_impl_.texture_path_){}
    , decltype(_impl_.itemid_){0u}
    , decltype(_impl_.packet_type_){0u}
    , decltype(_impl_.itemclass_){0u}
    , decltype(_impl_.count_){0u}
    , decltype(_impl_.floor_){0u}
    , decltype(_impl_.posx_){0}
    , decltype(_impl_.posy_){0}
    , decltype(_impl_.posz_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.itemname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.itemname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.texture_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.texture_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

set_item::~set_item() {
  // @@protoc_insertion_point(destructor:Protocol.set_item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void set_item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.itemname_.Destroy();
  _impl_.texture_path_.Destroy();
}

void set_item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void set_item::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.set_item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.itemname_.ClearToEmpty();
  _impl_.texture_path_.ClearToEmpty();
  ::memset(&_impl_.itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.posz_) -
      reinterpret_cast<char*>(&_impl_.itemid_)) + sizeof(_impl_.posz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* set_item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 itemid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string itemname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_itemname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.set_item.itemname"));
        } else
          goto handle_unusual;
        continue;
      // uint32 packet_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.packet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 itemclass = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.itemclass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string texture_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_texture_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.set_item.texture_path"));
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 floor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float posx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float posy = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float posz = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.posz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* set_item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.set_item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 itemid = 1;
  if (this->_internal_itemid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_itemid(), target);
  }

  // string itemname = 2;
  if (!this->_internal_itemname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_itemname().data(), static_cast<int>(this->_internal_itemname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.set_item.itemname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_itemname(), target);
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packet_type(), target);
  }

  // uint32 itemclass = 4;
  if (this->_internal_itemclass() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_itemclass(), target);
  }

  // string texture_path = 5;
  if (!this->_internal_texture_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_texture_path().data(), static_cast<int>(this->_internal_texture_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.set_item.texture_path");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_texture_path(), target);
  }

  // uint32 count = 6;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_count(), target);
  }

  // uint32 floor = 7;
  if (this->_internal_floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_floor(), target);
  }

  // float posx = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posx = this->_internal_posx();
  uint32_t raw_posx;
  memcpy(&raw_posx, &tmp_posx, sizeof(tmp_posx));
  if (raw_posx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_posx(), target);
  }

  // float posy = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posy = this->_internal_posy();
  uint32_t raw_posy;
  memcpy(&raw_posy, &tmp_posy, sizeof(tmp_posy));
  if (raw_posy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_posy(), target);
  }

  // float posz = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posz = this->_internal_posz();
  uint32_t raw_posz;
  memcpy(&raw_posz, &tmp_posz, sizeof(tmp_posz));
  if (raw_posz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_posz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.set_item)
  return target;
}

size_t set_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.set_item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string itemname = 2;
  if (!this->_internal_itemname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_itemname());
  }

  // string texture_path = 5;
  if (!this->_internal_texture_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_texture_path());
  }

  // uint32 itemid = 1;
  if (this->_internal_itemid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_itemid());
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packet_type());
  }

  // uint32 itemclass = 4;
  if (this->_internal_itemclass() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_itemclass());
  }

  // uint32 count = 6;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  // uint32 floor = 7;
  if (this->_internal_floor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_floor());
  }

  // float posx = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posx = this->_internal_posx();
  uint32_t raw_posx;
  memcpy(&raw_posx, &tmp_posx, sizeof(tmp_posx));
  if (raw_posx != 0) {
    total_size += 1 + 4;
  }

  // float posy = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posy = this->_internal_posy();
  uint32_t raw_posy;
  memcpy(&raw_posy, &tmp_posy, sizeof(tmp_posy));
  if (raw_posy != 0) {
    total_size += 1 + 4;
  }

  // float posz = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posz = this->_internal_posz();
  uint32_t raw_posz;
  memcpy(&raw_posz, &tmp_posz, sizeof(tmp_posz));
  if (raw_posz != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData set_item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    set_item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*set_item::GetClassData() const { return &_class_data_; }


void set_item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<set_item*>(&to_msg);
  auto& from = static_cast<const set_item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.set_item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_itemname().empty()) {
    _this->_internal_set_itemname(from._internal_itemname());
  }
  if (!from._internal_texture_path().empty()) {
    _this->_internal_set_texture_path(from._internal_texture_path());
  }
  if (from._internal_itemid() != 0) {
    _this->_internal_set_itemid(from._internal_itemid());
  }
  if (from._internal_packet_type() != 0) {
    _this->_internal_set_packet_type(from._internal_packet_type());
  }
  if (from._internal_itemclass() != 0) {
    _this->_internal_set_itemclass(from._internal_itemclass());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_floor() != 0) {
    _this->_internal_set_floor(from._internal_floor());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posx = from._internal_posx();
  uint32_t raw_posx;
  memcpy(&raw_posx, &tmp_posx, sizeof(tmp_posx));
  if (raw_posx != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posy = from._internal_posy();
  uint32_t raw_posy;
  memcpy(&raw_posy, &tmp_posy, sizeof(tmp_posy));
  if (raw_posy != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posz = from._internal_posz();
  uint32_t raw_posz;
  memcpy(&raw_posz, &tmp_posz, sizeof(tmp_posz));
  if (raw_posz != 0) {
    _this->_internal_set_posz(from._internal_posz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void set_item::CopyFrom(const set_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.set_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_item::IsInitialized() const {
  return true;
}

void set_item::InternalSwap(set_item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.itemname_, lhs_arena,
      &other->_impl_.itemname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.texture_path_, lhs_arena,
      &other->_impl_.texture_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(set_item, _impl_.posz_)
      + sizeof(set_item::_impl_.posz_)
      - PROTOBUF_FIELD_OFFSET(set_item, _impl_.itemid_)>(
          reinterpret_cast<char*>(&_impl_.itemid_),
          reinterpret_cast<char*>(&other->_impl_.itemid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata set_item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Gstruct_2eproto_getter, &descriptor_table_Gstruct_2eproto_once,
      file_level_metadata_Gstruct_2eproto[15]);
}

// ===================================================================

class ItemDataList::_Internal {
 public:
};

ItemDataList::ItemDataList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ItemDataList)
}
ItemDataList::ItemDataList(const ItemDataList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ItemDataList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.packet_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.packet_type_ = from._impl_.packet_type_;
  // @@protoc_insertion_point(copy_constructor:Protocol.ItemDataList)
}

inline void ItemDataList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.packet_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ItemDataList::~ItemDataList() {
  // @@protoc_insertion_point(destructor:Protocol.ItemDataList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemDataList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void ItemDataList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ItemDataList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.packet_type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemDataList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.set_item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 packet_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.packet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemDataList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ItemDataList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.set_item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packet_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ItemDataList)
  return target;
}

size_t ItemDataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ItemDataList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.set_item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 packet_type = 3;
  if (this->_internal_packet_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packet_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemDataList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemDataList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemDataList::GetClassData() const { return &_class_data_; }


void ItemDataList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemDataList*>(&to_msg);
  auto& from = static_cast<const ItemDataList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ItemDataList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_packet_type() != 0) {
    _this->_internal_set_packet_type(from._internal_packet_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemDataList::CopyFrom(const ItemDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ItemDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemDataList::IsInitialized() const {
  return true;
}

void ItemDataList::InternalSwap(ItemDataList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.packet_type_, other->_impl_.packet_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemDataList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Gstruct_2eproto_getter, &descriptor_table_Gstruct_2eproto_once,
      file_level_metadata_Gstruct_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::Character*
Arena::CreateMaybeMessage< ::Protocol::Character >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::Character >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::jump*
Arena::CreateMaybeMessage< ::Protocol::jump >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::jump >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::Character_Attack*
Arena::CreateMaybeMessage< ::Protocol::Character_Attack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::Character_Attack >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::Zombie*
Arena::CreateMaybeMessage< ::Protocol::Zombie >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::Zombie >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::Zombie_attack*
Arena::CreateMaybeMessage< ::Protocol::Zombie_attack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::Zombie_attack >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::Zombie_hp*
Arena::CreateMaybeMessage< ::Protocol::Zombie_hp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::Zombie_hp >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ZombieDataList*
Arena::CreateMaybeMessage< ::Protocol::ZombieDataList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ZombieDataList >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::Vector3*
Arena::CreateMaybeMessage< ::Protocol::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ZombiePath*
Arena::CreateMaybeMessage< ::Protocol::ZombiePath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ZombiePath >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::PatrolPath*
Arena::CreateMaybeMessage< ::Protocol::PatrolPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PatrolPath >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::Detected*
Arena::CreateMaybeMessage< ::Protocol::Detected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::Detected >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::Time*
Arena::CreateMaybeMessage< ::Protocol::Time >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::Time >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::Equip_Item*
Arena::CreateMaybeMessage< ::Protocol::Equip_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::Equip_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ping*
Arena::CreateMaybeMessage< ::Protocol::ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ping >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::patrol_hit*
Arena::CreateMaybeMessage< ::Protocol::patrol_hit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::patrol_hit >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::set_item*
Arena::CreateMaybeMessage< ::Protocol::set_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::set_item >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ItemDataList*
Arena::CreateMaybeMessage< ::Protocol::ItemDataList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ItemDataList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
