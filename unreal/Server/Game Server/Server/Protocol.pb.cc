//// Generated by the protocol buffer compiler.  DO NOT EDIT!
//// source: Protocol.proto
//// Protobuf C++ Version: 5.26.0-rc1
//
//#include "Protocol.pb.h"
//
//#include <algorithm>
//#include "google/protobuf/io/coded_stream.h"
//#include "google/protobuf/extension_set.h"
//#include "google/protobuf/wire_format_lite.h"
//#include "google/protobuf/descriptor.h"
//#include "google/protobuf/generated_message_reflection.h"
//#include "google/protobuf/reflection_ops.h"
//#include "google/protobuf/wire_format.h"
//#include "google/protobuf/generated_message_tctable_impl.h"
//// @@protoc_insertion_point(includes)
//
//// Must be included last.
//#include "google/protobuf/port_def.inc"
//PROTOBUF_PRAGMA_INIT_SEG
//namespace _pb = ::google::protobuf;
//namespace _pbi = ::google::protobuf::internal;
//namespace _fl = ::google::protobuf::internal::field_layout;
//namespace Protocol {
//
//inline constexpr BuffData::Impl_::Impl_(
//    ::_pbi::ConstantInitialized) noexcept
//      : victims_{},
//        _victims_cached_byte_size_{0},
//        buffid_{::uint64_t{0u}},
//        remaintime_{0},
//        _cached_size_{0} {}
//
//template <typename>
//PROTOBUF_CONSTEXPR BuffData::BuffData(::_pbi::ConstantInitialized)
//    : _impl_(::_pbi::ConstantInitialized()) {}
//struct BuffDataDefaultTypeInternal {
//  PROTOBUF_CONSTEXPR BuffDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
//  ~BuffDataDefaultTypeInternal() {}
//  union {
//    BuffData _instance;
//  };
//};
//
//PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
//    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuffDataDefaultTypeInternal _BuffData_default_instance_;
//
//inline constexpr S_TEST::Impl_::Impl_(
//    ::_pbi::ConstantInitialized) noexcept
//      : buffs_{},
//        id_{::uint64_t{0u}},
//        hp_{0u},
//        attack_{0u},
//        _cached_size_{0} {}
//
//template <typename>
//PROTOBUF_CONSTEXPR S_TEST::S_TEST(::_pbi::ConstantInitialized)
//    : _impl_(::_pbi::ConstantInitialized()) {}
//struct S_TESTDefaultTypeInternal {
//  PROTOBUF_CONSTEXPR S_TESTDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
//  ~S_TESTDefaultTypeInternal() {}
//  union {
//    S_TEST _instance;
//  };
//};
//
//PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
//    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_TESTDefaultTypeInternal _S_TEST_default_instance_;
//}  // namespace Protocol
//static ::_pb::Metadata file_level_metadata_Protocol_2eproto[2];
//static constexpr const ::_pb::EnumDescriptor**
//    file_level_enum_descriptors_Protocol_2eproto = nullptr;
//static constexpr const ::_pb::ServiceDescriptor**
//    file_level_service_descriptors_Protocol_2eproto = nullptr;
//const ::uint32_t
//    TableStruct_Protocol_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
//        protodesc_cold) = {
//        ~0u,  // no _has_bits_
//        PROTOBUF_FIELD_OFFSET(::Protocol::BuffData, _internal_metadata_),
//        ~0u,  // no _extensions_
//        ~0u,  // no _oneof_case_
//        ~0u,  // no _weak_field_map_
//        ~0u,  // no _inlined_string_donated_
//        ~0u,  // no _split_
//        ~0u,  // no sizeof(Split)
//        PROTOBUF_FIELD_OFFSET(::Protocol::BuffData, _impl_.buffid_),
//        PROTOBUF_FIELD_OFFSET(::Protocol::BuffData, _impl_.remaintime_),
//        PROTOBUF_FIELD_OFFSET(::Protocol::BuffData, _impl_.victims_),
//        ~0u,  // no _has_bits_
//        PROTOBUF_FIELD_OFFSET(::Protocol::S_TEST, _internal_metadata_),
//        ~0u,  // no _extensions_
//        ~0u,  // no _oneof_case_
//        ~0u,  // no _weak_field_map_
//        ~0u,  // no _inlined_string_donated_
//        ~0u,  // no _split_
//        ~0u,  // no sizeof(Split)
//        PROTOBUF_FIELD_OFFSET(::Protocol::S_TEST, _impl_.id_),
//        PROTOBUF_FIELD_OFFSET(::Protocol::S_TEST, _impl_.hp_),
//        PROTOBUF_FIELD_OFFSET(::Protocol::S_TEST, _impl_.attack_),
//        PROTOBUF_FIELD_OFFSET(::Protocol::S_TEST, _impl_.buffs_),
//};
//
//static const ::_pbi::MigrationSchema
//    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
//        {0, -1, -1, sizeof(::Protocol::BuffData)},
//        {11, -1, -1, sizeof(::Protocol::S_TEST)},
//};
//static const ::_pb::Message* const file_default_instances[] = {
//    &::Protocol::_BuffData_default_instance_._instance,
//    &::Protocol::_S_TEST_default_instance_._instance,
//};
//const char descriptor_table_protodef_Protocol_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
//    protodesc_cold) = {
//    "\n\016Protocol.proto\022\010Protocol\"\?\n\010BuffData\022\016"
//    "\n\006buffId\030\001 \001(\004\022\022\n\nremainTime\030\002 \001(\002\022\017\n\007vi"
//    "ctims\030\003 \003(\004\"S\n\006S_TEST\022\n\n\002id\030\001 \001(\004\022\n\n\002hp\030"
//    "\002 \001(\r\022\016\n\006attack\030\003 \001(\r\022!\n\005buffs\030\004 \003(\0132\022.P"
//    "rotocol.BuffDatab\006proto3"
//};
//static ::absl::once_flag descriptor_table_Protocol_2eproto_once;
//const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
//    false,
//    false,
//    184,
//    descriptor_table_protodef_Protocol_2eproto,
//    "Protocol.proto",
//    &descriptor_table_Protocol_2eproto_once,
//    nullptr,
//    0,
//    2,
//    schemas,
//    file_default_instances,
//    TableStruct_Protocol_2eproto::offsets,
//    file_level_metadata_Protocol_2eproto,
//    file_level_enum_descriptors_Protocol_2eproto,
//    file_level_service_descriptors_Protocol_2eproto,
//};
//
//// This function exists to be marked as weak.
//// It can significantly speed up compilation by breaking up LLVM's SCC
//// in the .pb.cc translation units. Large translation units see a
//// reduction of more than 35% of walltime for optimized builds. Without
//// the weak attribute all the messages in the file, including all the
//// vtables and everything they use become part of the same SCC through
//// a cycle like:
//// GetMetadata -> descriptor table -> default instances ->
////   vtables -> GetMetadata
//// By adding a weak function here we break the connection from the
//// individual vtables back into the descriptor table.
//PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
//  return &descriptor_table_Protocol_2eproto;
//}
//namespace Protocol {
//// ===================================================================
//
//class BuffData::_Internal {
// public:
//};
//
//BuffData::BuffData(::google::protobuf::Arena* arena)
//    : ::google::protobuf::Message(arena) {
//  SharedCtor(arena);
//  // @@protoc_insertion_point(arena_constructor:Protocol.BuffData)
//}
//inline PROTOBUF_NDEBUG_INLINE BuffData::Impl_::Impl_(
//    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
//    const Impl_& from)
//      : victims_{visibility, arena, from.victims_},
//        _victims_cached_byte_size_{0},
//        _cached_size_{0} {}
//
//BuffData::BuffData(
//    ::google::protobuf::Arena* arena,
//    const BuffData& from)
//    : ::google::protobuf::Message(arena) {
//  BuffData* const _this = this;
//  (void)_this;
//  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
//      from._internal_metadata_);
//  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
//  ::memcpy(reinterpret_cast<char *>(&_impl_) +
//               offsetof(Impl_, buffid_),
//           reinterpret_cast<const char *>(&from._impl_) +
//               offsetof(Impl_, buffid_),
//           offsetof(Impl_, remaintime_) -
//               offsetof(Impl_, buffid_) +
//               sizeof(Impl_::remaintime_));
//
//  // @@protoc_insertion_point(copy_constructor:Protocol.BuffData)
//}
//inline PROTOBUF_NDEBUG_INLINE BuffData::Impl_::Impl_(
//    ::google::protobuf::internal::InternalVisibility visibility,
//    ::google::protobuf::Arena* arena)
//      : victims_{visibility, arena},
//        _victims_cached_byte_size_{0},
//        _cached_size_{0} {}
//
//inline void BuffData::SharedCtor(::_pb::Arena* arena) {
//  new (&_impl_) Impl_(internal_visibility(), arena);
//  ::memset(reinterpret_cast<char *>(&_impl_) +
//               offsetof(Impl_, buffid_),
//           0,
//           offsetof(Impl_, remaintime_) -
//               offsetof(Impl_, buffid_) +
//               sizeof(Impl_::remaintime_));
//}
//BuffData::~BuffData() {
//  // @@protoc_insertion_point(destructor:Protocol.BuffData)
//  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
//  SharedDtor();
//}
//inline void BuffData::SharedDtor() {
//  ABSL_DCHECK(GetArena() == nullptr);
//  _impl_.~Impl_();
//}
//
//const ::google::protobuf::MessageLite::ClassData*
//BuffData::GetClassData() const {
//  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
//      ClassDataFull _data_ = {
//          {
//              nullptr,  // OnDemandRegisterArenaDtor
//              PROTOBUF_FIELD_OFFSET(BuffData, _impl_._cached_size_),
//              false,
//          },
//          &BuffData::MergeImpl,
//          &BuffData::kDescriptorMethods,
//      };
//  return &_data_;
//}
//PROTOBUF_NOINLINE void BuffData::Clear() {
//// @@protoc_insertion_point(message_clear_start:Protocol.BuffData)
//  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
//  ::uint32_t cached_has_bits = 0;
//  // Prevent compiler warnings about cached_has_bits being unused
//  (void) cached_has_bits;
//
//  _impl_.victims_.Clear();
//  ::memset(&_impl_.buffid_, 0, static_cast<::size_t>(
//      reinterpret_cast<char*>(&_impl_.remaintime_) -
//      reinterpret_cast<char*>(&_impl_.buffid_)) + sizeof(_impl_.remaintime_));
//  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
//}
//
//const char* BuffData::_InternalParse(
//    const char* ptr, ::_pbi::ParseContext* ctx) {
//  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
//  return ptr;
//}
//
//
//PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
//const ::_pbi::TcParseTable<2, 3, 0, 0, 2> BuffData::_table_ = {
//  {
//    0,  // no _has_bits_
//    0, // no _extensions_
//    3, 24,  // max_field_number, fast_idx_mask
//    offsetof(decltype(_table_), field_lookup_table),
//    4294967288,  // skipmap
//    offsetof(decltype(_table_), field_entries),
//    3,  // num_field_entries
//    0,  // num_aux_entries
//    offsetof(decltype(_table_), field_names),  // no aux_entries
//    &_BuffData_default_instance_._instance,
//    ::_pbi::TcParser::GenericFallback,  // fallback
//    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
//    ::_pbi::TcParser::GetTable<::Protocol::BuffData>(),  // to_prefetch
//    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
//  }, {{
//    {::_pbi::TcParser::MiniParse, {}},
//    // uint64 buffId = 1;
//    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BuffData, _impl_.buffid_), 63>(),
//     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BuffData, _impl_.buffid_)}},
//    // float remainTime = 2;
//    {::_pbi::TcParser::FastF32S1,
//     {21, 63, 0, PROTOBUF_FIELD_OFFSET(BuffData, _impl_.remaintime_)}},
//    // repeated uint64 victims = 3;
//    {::_pbi::TcParser::FastV64P1,
//     {26, 63, 0, PROTOBUF_FIELD_OFFSET(BuffData, _impl_.victims_)}},
//  }}, {{
//    65535, 65535
//  }}, {{
//    // uint64 buffId = 1;
//    {PROTOBUF_FIELD_OFFSET(BuffData, _impl_.buffid_), 0, 0,
//    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
//    // float remainTime = 2;
//    {PROTOBUF_FIELD_OFFSET(BuffData, _impl_.remaintime_), 0, 0,
//    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
//    // repeated uint64 victims = 3;
//    {PROTOBUF_FIELD_OFFSET(BuffData, _impl_.victims_), 0, 0,
//    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt64)},
//  }},
//  // no aux_entries
//  {{
//  }},
//};
//
//::uint8_t* BuffData::_InternalSerialize(
//    ::uint8_t* target,
//    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
//  // @@protoc_insertion_point(serialize_to_array_start:Protocol.BuffData)
//  ::uint32_t cached_has_bits = 0;
//  (void)cached_has_bits;
//
//  // uint64 buffId = 1;
//  if (this->_internal_buffid() != 0) {
//    target = stream->EnsureSpace(target);
//    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
//        1, this->_internal_buffid(), target);
//  }
//
//  // float remainTime = 2;
//  static_assert(sizeof(::uint32_t) == sizeof(float),
//                "Code assumes ::uint32_t and float are the same size.");
//  float tmp_remaintime = this->_internal_remaintime();
//  ::uint32_t raw_remaintime;
//  memcpy(&raw_remaintime, &tmp_remaintime, sizeof(tmp_remaintime));
//  if (raw_remaintime != 0) {
//    target = stream->EnsureSpace(target);
//    target = ::_pbi::WireFormatLite::WriteFloatToArray(
//        2, this->_internal_remaintime(), target);
//  }
//
//  // repeated uint64 victims = 3;
//  {
//    int byte_size = _impl_._victims_cached_byte_size_.Get();
//    if (byte_size > 0) {
//      target = stream->WriteUInt64Packed(
//          3, _internal_victims(), byte_size, target);
//    }
//  }
//
//  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
//    target =
//        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
//            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
//  }
//  // @@protoc_insertion_point(serialize_to_array_end:Protocol.BuffData)
//  return target;
//}
//
//::size_t BuffData::ByteSizeLong() const {
//// @@protoc_insertion_point(message_byte_size_start:Protocol.BuffData)
//  ::size_t total_size = 0;
//
//  ::uint32_t cached_has_bits = 0;
//  // Prevent compiler warnings about cached_has_bits being unused
//  (void) cached_has_bits;
//
//  // repeated uint64 victims = 3;
//  {
//    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
//        this->_internal_victims())
//    ;
//    _impl_._victims_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
//    std::size_t tag_size = data_size == 0
//        ? 0
//        : 1 + ::_pbi::WireFormatLite::Int32Size(
//                            static_cast<int32_t>(data_size))
//    ;
//    total_size += tag_size + data_size;
//  }
//  // uint64 buffId = 1;
//  if (this->_internal_buffid() != 0) {
//    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
//        this->_internal_buffid());
//  }
//
//  // float remainTime = 2;
//  static_assert(sizeof(::uint32_t) == sizeof(float),
//                "Code assumes ::uint32_t and float are the same size.");
//  float tmp_remaintime = this->_internal_remaintime();
//  ::uint32_t raw_remaintime;
//  memcpy(&raw_remaintime, &tmp_remaintime, sizeof(tmp_remaintime));
//  if (raw_remaintime != 0) {
//    total_size += 5;
//  }
//
//  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
//}
//
//
//void BuffData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
//  auto* const _this = static_cast<BuffData*>(&to_msg);
//  auto& from = static_cast<const BuffData&>(from_msg);
//  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.BuffData)
//  ABSL_DCHECK_NE(&from, _this);
//  ::uint32_t cached_has_bits = 0;
//  (void) cached_has_bits;
//
//  _this->_internal_mutable_victims()->MergeFrom(from._internal_victims());
//  if (from._internal_buffid() != 0) {
//    _this->_impl_.buffid_ = from._impl_.buffid_;
//  }
//  static_assert(sizeof(::uint32_t) == sizeof(float),
//                "Code assumes ::uint32_t and float are the same size.");
//  float tmp_remaintime = from._internal_remaintime();
//  ::uint32_t raw_remaintime;
//  memcpy(&raw_remaintime, &tmp_remaintime, sizeof(tmp_remaintime));
//  if (raw_remaintime != 0) {
//    _this->_impl_.remaintime_ = from._impl_.remaintime_;
//  }
//  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
//}
//
//void BuffData::CopyFrom(const BuffData& from) {
//// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.BuffData)
//  if (&from == this) return;
//  Clear();
//  MergeFrom(from);
//}
//
//PROTOBUF_NOINLINE bool BuffData::IsInitialized() const {
//  return true;
//}
//
//void BuffData::InternalSwap(BuffData* PROTOBUF_RESTRICT other) {
//  using std::swap;
//  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
//  _impl_.victims_.InternalSwap(&other->_impl_.victims_);
//  ::google::protobuf::internal::memswap<
//      PROTOBUF_FIELD_OFFSET(BuffData, _impl_.remaintime_)
//      + sizeof(BuffData::_impl_.remaintime_)
//      - PROTOBUF_FIELD_OFFSET(BuffData, _impl_.buffid_)>(
//          reinterpret_cast<char*>(&_impl_.buffid_),
//          reinterpret_cast<char*>(&other->_impl_.buffid_));
//}
//
//::google::protobuf::Metadata BuffData::GetMetadata() const {
//  return ::_pbi::AssignDescriptors(&descriptor_table_Protocol_2eproto_getter,
//                                   &descriptor_table_Protocol_2eproto_once,
//                                   file_level_metadata_Protocol_2eproto[0]);
//}
//// ===================================================================
//
//class S_TEST::_Internal {
// public:
//};
//
//S_TEST::S_TEST(::google::protobuf::Arena* arena)
//    : ::google::protobuf::Message(arena) {
//  SharedCtor(arena);
//  // @@protoc_insertion_point(arena_constructor:Protocol.S_TEST)
//}
//inline PROTOBUF_NDEBUG_INLINE S_TEST::Impl_::Impl_(
//    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
//    const Impl_& from)
//      : buffs_{visibility, arena, from.buffs_},
//        _cached_size_{0} {}
//
//S_TEST::S_TEST(
//    ::google::protobuf::Arena* arena,
//    const S_TEST& from)
//    : ::google::protobuf::Message(arena) {
//  S_TEST* const _this = this;
//  (void)_this;
//  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
//      from._internal_metadata_);
//  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
//  ::memcpy(reinterpret_cast<char *>(&_impl_) +
//               offsetof(Impl_, id_),
//           reinterpret_cast<const char *>(&from._impl_) +
//               offsetof(Impl_, id_),
//           offsetof(Impl_, attack_) -
//               offsetof(Impl_, id_) +
//               sizeof(Impl_::attack_));
//
//  // @@protoc_insertion_point(copy_constructor:Protocol.S_TEST)
//}
//inline PROTOBUF_NDEBUG_INLINE S_TEST::Impl_::Impl_(
//    ::google::protobuf::internal::InternalVisibility visibility,
//    ::google::protobuf::Arena* arena)
//      : buffs_{visibility, arena},
//        _cached_size_{0} {}
//
//inline void S_TEST::SharedCtor(::_pb::Arena* arena) {
//  new (&_impl_) Impl_(internal_visibility(), arena);
//  ::memset(reinterpret_cast<char *>(&_impl_) +
//               offsetof(Impl_, id_),
//           0,
//           offsetof(Impl_, attack_) -
//               offsetof(Impl_, id_) +
//               sizeof(Impl_::attack_));
//}
//S_TEST::~S_TEST() {
//  // @@protoc_insertion_point(destructor:Protocol.S_TEST)
//  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
//  SharedDtor();
//}
//inline void S_TEST::SharedDtor() {
//  ABSL_DCHECK(GetArena() == nullptr);
//  _impl_.~Impl_();
//}
//
//const ::google::protobuf::MessageLite::ClassData*
//S_TEST::GetClassData() const {
//  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
//      ClassDataFull _data_ = {
//          {
//              nullptr,  // OnDemandRegisterArenaDtor
//              PROTOBUF_FIELD_OFFSET(S_TEST, _impl_._cached_size_),
//              false,
//          },
//          &S_TEST::MergeImpl,
//          &S_TEST::kDescriptorMethods,
//      };
//  return &_data_;
//}
//PROTOBUF_NOINLINE void S_TEST::Clear() {
//// @@protoc_insertion_point(message_clear_start:Protocol.S_TEST)
//  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
//  ::uint32_t cached_has_bits = 0;
//  // Prevent compiler warnings about cached_has_bits being unused
//  (void) cached_has_bits;
//
//  _impl_.buffs_.Clear();
//  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
//      reinterpret_cast<char*>(&_impl_.attack_) -
//      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.attack_));
//  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
//}
//
//const char* S_TEST::_InternalParse(
//    const char* ptr, ::_pbi::ParseContext* ctx) {
//  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
//  return ptr;
//}
//
//
//PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
//const ::_pbi::TcParseTable<2, 4, 1, 0, 2> S_TEST::_table_ = {
//  {
//    0,  // no _has_bits_
//    0, // no _extensions_
//    4, 24,  // max_field_number, fast_idx_mask
//    offsetof(decltype(_table_), field_lookup_table),
//    4294967280,  // skipmap
//    offsetof(decltype(_table_), field_entries),
//    4,  // num_field_entries
//    1,  // num_aux_entries
//    offsetof(decltype(_table_), aux_entries),
//    &_S_TEST_default_instance_._instance,
//    ::_pbi::TcParser::GenericFallback,  // fallback
//    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
//    ::_pbi::TcParser::GetTable<::Protocol::S_TEST>(),  // to_prefetch
//    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
//  }, {{
//    // repeated .Protocol.BuffData buffs = 4;
//    {::_pbi::TcParser::FastMtR1,
//     {34, 63, 0, PROTOBUF_FIELD_OFFSET(S_TEST, _impl_.buffs_)}},
//    // uint64 id = 1;
//    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(S_TEST, _impl_.id_), 63>(),
//     {8, 63, 0, PROTOBUF_FIELD_OFFSET(S_TEST, _impl_.id_)}},
//    // uint32 hp = 2;
//    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(S_TEST, _impl_.hp_), 63>(),
//     {16, 63, 0, PROTOBUF_FIELD_OFFSET(S_TEST, _impl_.hp_)}},
//    // uint32 attack = 3;
//    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(S_TEST, _impl_.attack_), 63>(),
//     {24, 63, 0, PROTOBUF_FIELD_OFFSET(S_TEST, _impl_.attack_)}},
//  }}, {{
//    65535, 65535
//  }}, {{
//    // uint64 id = 1;
//    {PROTOBUF_FIELD_OFFSET(S_TEST, _impl_.id_), 0, 0,
//    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
//    // uint32 hp = 2;
//    {PROTOBUF_FIELD_OFFSET(S_TEST, _impl_.hp_), 0, 0,
//    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
//    // uint32 attack = 3;
//    {PROTOBUF_FIELD_OFFSET(S_TEST, _impl_.attack_), 0, 0,
//    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
//    // repeated .Protocol.BuffData buffs = 4;
//    {PROTOBUF_FIELD_OFFSET(S_TEST, _impl_.buffs_), 0, 0,
//    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
//  }}, {{
//    {::_pbi::TcParser::GetTable<::Protocol::BuffData>()},
//  }}, {{
//  }},
//};
//
//::uint8_t* S_TEST::_InternalSerialize(
//    ::uint8_t* target,
//    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
//  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_TEST)
//  ::uint32_t cached_has_bits = 0;
//  (void)cached_has_bits;
//
//  // uint64 id = 1;
//  if (this->_internal_id() != 0) {
//    target = stream->EnsureSpace(target);
//    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
//        1, this->_internal_id(), target);
//  }
//
//  // uint32 hp = 2;
//  if (this->_internal_hp() != 0) {
//    target = stream->EnsureSpace(target);
//    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
//        2, this->_internal_hp(), target);
//  }
//
//  // uint32 attack = 3;
//  if (this->_internal_attack() != 0) {
//    target = stream->EnsureSpace(target);
//    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
//        3, this->_internal_attack(), target);
//  }
//
//  // repeated .Protocol.BuffData buffs = 4;
//  for (unsigned i = 0, n = static_cast<unsigned>(
//                           this->_internal_buffs_size());
//       i < n; i++) {
//    const auto& repfield = this->_internal_buffs().Get(i);
//    target =
//        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
//            4, repfield, repfield.GetCachedSize(),
//            target, stream);
//  }
//
//  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
//    target =
//        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
//            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
//  }
//  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_TEST)
//  return target;
//}
//
//::size_t S_TEST::ByteSizeLong() const {
//// @@protoc_insertion_point(message_byte_size_start:Protocol.S_TEST)
//  ::size_t total_size = 0;
//
//  ::uint32_t cached_has_bits = 0;
//  // Prevent compiler warnings about cached_has_bits being unused
//  (void) cached_has_bits;
//
//  // repeated .Protocol.BuffData buffs = 4;
//  total_size += 1UL * this->_internal_buffs_size();
//  for (const auto& msg : this->_internal_buffs()) {
//    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
//  }
//  // uint64 id = 1;
//  if (this->_internal_id() != 0) {
//    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
//        this->_internal_id());
//  }
//
//  // uint32 hp = 2;
//  if (this->_internal_hp() != 0) {
//    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
//        this->_internal_hp());
//  }
//
//  // uint32 attack = 3;
//  if (this->_internal_attack() != 0) {
//    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
//        this->_internal_attack());
//  }
//
//  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
//}
//
//
//void S_TEST::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
//  auto* const _this = static_cast<S_TEST*>(&to_msg);
//  auto& from = static_cast<const S_TEST&>(from_msg);
//  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_TEST)
//  ABSL_DCHECK_NE(&from, _this);
//  ::uint32_t cached_has_bits = 0;
//  (void) cached_has_bits;
//
//  _this->_internal_mutable_buffs()->MergeFrom(
//      from._internal_buffs());
//  if (from._internal_id() != 0) {
//    _this->_impl_.id_ = from._impl_.id_;
//  }
//  if (from._internal_hp() != 0) {
//    _this->_impl_.hp_ = from._impl_.hp_;
//  }
//  if (from._internal_attack() != 0) {
//    _this->_impl_.attack_ = from._impl_.attack_;
//  }
//  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
//}
//
//void S_TEST::CopyFrom(const S_TEST& from) {
//// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_TEST)
//  if (&from == this) return;
//  Clear();
//  MergeFrom(from);
//}
//
//PROTOBUF_NOINLINE bool S_TEST::IsInitialized() const {
//  return true;
//}
//
//void S_TEST::InternalSwap(S_TEST* PROTOBUF_RESTRICT other) {
//  using std::swap;
//  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
//  _impl_.buffs_.InternalSwap(&other->_impl_.buffs_);
//  ::google::protobuf::internal::memswap<
//      PROTOBUF_FIELD_OFFSET(S_TEST, _impl_.attack_)
//      + sizeof(S_TEST::_impl_.attack_)
//      - PROTOBUF_FIELD_OFFSET(S_TEST, _impl_.id_)>(
//          reinterpret_cast<char*>(&_impl_.id_),
//          reinterpret_cast<char*>(&other->_impl_.id_));
//}
//
//::google::protobuf::Metadata S_TEST::GetMetadata() const {
//  return ::_pbi::AssignDescriptors(&descriptor_table_Protocol_2eproto_getter,
//                                   &descriptor_table_Protocol_2eproto_once,
//                                   file_level_metadata_Protocol_2eproto[1]);
//}
//// @@protoc_insertion_point(namespace_scope)
//}  // namespace Protocol
//namespace google {
//namespace protobuf {
//}  // namespace protobuf
//}  // namespace google
//// @@protoc_insertion_point(global_scope)
//PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
//static ::std::false_type _static_init_ PROTOBUF_UNUSED =
//    (::_pbi::AddDescriptors(&descriptor_table_Protocol_2eproto),
//     ::std::false_type{});
//#include "google/protobuf/port_undef.inc"
