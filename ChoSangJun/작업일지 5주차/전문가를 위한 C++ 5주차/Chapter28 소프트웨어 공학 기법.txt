


================================================
﻿// helloworld.cpp

/////////////////////////////////////////////////////////////////
// 2023.07.30 공부
// Chapter28 소프트웨어 공학 기법
/////////////////////////////////////////////////////////////////

#include <iostream>
#include <vector>
#include <string>
#include <format>
#include <utility>
#include <fstream>
#include <filesystem>
#include <ranges>
#include <ratio>
#include <random>
#include <variant>
#include <any>
#include <tuple>
#include <queue>

#include "save.h"

using namespace std;

// 소프트웨어 라이프 사이클 모델

// - 폭포수 모델 - 소프트웨어를 조리법과 같은 절차를 따르자
//   - 계획 -> 설계 -> 구현 -> 단위 시험 -> 서브시스템 -> 통합 시험 -> 평가
// 장점 - 간결하다. 간결하기에 관리하기 쉽다.
// 단점 - 실전에서는 다음 단계를 거치지 않고서는 현재 단계를 완벽하게 끝낼 수 없어서 그대로 적용하기 힘들다.
// 요구사항이 아주 구체적이고 규모가 작은 프로젝트라면 폭포수 모델이 효과적이다.

// - 사시미 모델 - 각 단계를 서로 겹치는 방식으로 폭포수 모델을 개선했다.

// - 나선형 모델 - 위험 중심 소프트웨어 개발 프로세스, 반복 프로세스의 하나로 분류
//   - 장점 - 폭포수 모델의 장점에 반복 프로세스를 적용한 것이다. 폭포수 모델의 프로세스를 주기 단위로 반복
//          - 피드백을 반영하기 좋다. 매 주기마다 시스템에 대한 이해가 깊어지면서 설계를 개선할 수 있기 때문
//   - 단점 - 실제 효과를 극대화하기 위해 반복 주기를 최소화하기 힘들다는 것이다.

// 애자일 방법론 - 흔히 스크럼 기법을 사용
// 애자일 선언문
// - 프로세스와 도구보다는 개인과 상호작용
// - 완벽한 문서보다는 실제 작동하는 소프트웨어
// - 고객과 협상하기보다는 고객과 협력하기
// - 계획을 따르기보다는 변화에 대처하기


// 소프트웨어 공학 방법론
// - UP(통합 프로세스)
//	- 착수
//	- 상술
//	- 구축
//	- 이행

// - RUP(레셔널 통합 프로세스) - 나선형 모델이나 폭포수 모델과 달리 단순히 이론에 그치지 않고
//  IBM 산하의 래셔널 소프트웨어에서 실제로 만든 소프트웨어 제품이다.
// 대규모 조직에서 사용한다.

// 스크럼
// 역할 세가지
// - PO는 고객과 다른 사람을 연결한다.
// - SM은 프로세스의 운영을 담당한다.
// - 팀 그 자체
// 스크럼 프로세스는 데일리 스크럼 또는 스탠드업이라 부르는 미팅을 매일 가진다.
// 장점 - 개발기간 동안 미처 예상하지 못한 문제에 대처하는데 굉장히 뛰어나다.


// 익스트림 프로그래밍 XP이론 - 소프트웨어 개발에 관련된 길잡이 중에서 가장 뛰어난 것들을 모은 내용에
// 새로운 원칙을 약간 추가한것

// 구체적인 피드백
// - 페어 프로그래밍
// - 진행하면서 계획하기
// - 지속적인 테스트
// - 고객과 함계 진행

// 지속적인 프로세스
// - 지속적인 통합
// - 수시로 리팩터링하기
// - 조금씩 릴리스하기

// 눈높이 맞추기
// - 코드 작성 규칙
// - 코드 공유
// - 간결한 설계
// - 공통 메타포

// 프로그래머 복지
// - 최적 작업 시간


// 나만의 프로세스와 방법론 만들기
// - 새로운 개념 받아들이기
// - 새로운 아이디어 적극적으로 제시하기
// - 효과 있는 것과 효과 없는 것 구분하기
// - 방법론 준수하기

int main()
{
	
	save("helloworld.cpp");
}


// Chapter28 소프트웨어 공학 기법 完


================================================
