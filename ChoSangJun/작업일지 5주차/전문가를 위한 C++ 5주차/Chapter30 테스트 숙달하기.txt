


================================================
﻿// helloworld.cpp

/////////////////////////////////////////////////////////////////
// 2023.07.30 공부
// Chapter30 테스트 숙달하기
/////////////////////////////////////////////////////////////////

#include <iostream>
#include <vector>
#include <string>
#include <format>
#include <utility>
#include <fstream>
#include <filesystem>
#include <ranges>
#include <ratio>
#include <random>
#include <variant>
#include <any>
#include <tuple>
#include <queue>

#include "save.h"

using namespace std;


// 버그 추적도구
// 버그질라(오픈소스)
// - 버그 설정에 대한 커스터마이즈
// - 새로 발생했거나 상태가 변경된 버그를 이메일로 알려주는 기능
// - 버그와 해결 방법에 대한 의존성 추적
// - 리포팅 및 검색 도구
// - 버그를 수집하고 업데이트하기 위한 웹기반 인터페이스


// 단위 테스트 - 버그는 테스트를 거쳐야 찾을 수 있다.
// - 클래스나 서브시스템을 세부 기능 단위로 검사하는 것이다.

// 단위 테스트 프로세스
// [1] 테스트 구체화 수준 정하기 - 단위 테스트를 작성하는 과정도 어쩔 수 없이 시간을 잡아먹는다.
// [2] 개별 테스트에 대한 브레인스토밍
// [3] 샘플 데이터와 결과 마련하기
// [4] 테스트 코드 작성하기
//	   - 각 테스트에서 한 가지만 테스트해야 한다.
//	   - 테스트 코드를 구체적으로 작성한다.
//	   - 테스트 코드에서 로그를 상세히 남긴다.
//	   - 다른 테스트에 의존하거나 여러 테스트가 얽히게 작성하면 안된다.
//     - 실제 서브시스템을 사용하지 말고, 그 동작을 흉내 내는 스텀이나 목업을 사용하는 것이 좋다.
//     - 단위 테스트 코드가 잘 작성되었는지 코드 리뷰터의 검토를 받는다.
// [5] 테스트 코드 실행하기


// 비주얼 C++는 테스트 프레임워크를 기본으로 제공한다.


// 통합 테스트 - 컴포넌트들이 서로 마주치는 영역을 테스트한다.
// [1] 통합 테스트의 에
// - JSON 기반 파일 직렬화
// - 공유 리소스에 대한 리더와 라이터
// - 서드파티 라이브러리에 대한 래퍼
// [2] 통합 테스트 방법 - 성능이나 구성 관점에서 보면 단위 테스트와 통합테스트를 구분하는 것이 좋다.


// 시스템 테스트


// 회귀 테스트


// 성공적인 테스트를 위한 팁
// - 시간을 충분히 투자해서 자동화된 테스트 시스템을 제대로 설계한다.
// - 스트레스 테스트도 반드시 수행한다.
// - 고객의 시스템과 유사한 플랫폼이나 다양한 종류의 플랫폼에서 테스트한다.
// - 의도적으로 시스템에 문제를 주입하도록 테스트를 작성한다.
// - 버그와 테스트는 서로 밀접하게 엮여 있다.
// - 실패한 테스트는 삭제하지 않는다.



int main()
{
	
	save("helloworld.cpp");
}


// Chapter30 테스트 숙달하기 完


================================================
