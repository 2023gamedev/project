


================================================
﻿// helloworld.cpp

/////////////////////////////////////////////////////////////////
// 2023.07.30 공부
// Chapter31 디버깅 완전 정복
/////////////////////////////////////////////////////////////////

#include <iostream>
#include <vector>
#include <string>
#include <format>
#include <utility>
#include <fstream>
#include <filesystem>
#include <ranges>
#include <ratio>
#include <random>
#include <variant>
#include <any>
#include <tuple>
#include <queue>

#include "save.h"

using namespace std;


// 디버깅 기본 원칙 - 내가 작성하는 코드에 버그가 발생한다고 솔직히 인전하는 것이다.

// 버그 분류
// 치명적인 버그와 비치명적인 버그로 나뉜다.
// 시각적으로 문제를 일으키는 미관상 버그도 있다.

// 버그 방지
// - 코드 작성에 들어가기 전에 먼저 설계부터 한다.
// - 코드 검토를 거친다.
// - 테스트하고,테스트하고, 또 테스트한다.
// - 자동화된 단위 테스트를 작성한다.
// - 에러 발생 상황을 예측해서 적절히 대비한다.
// - 메모리 누수를 방지하도록 스마트 포인터를 사용한다.
// - 컴파일 경고 메시지를 확인한다.
// - 정적 코드 분석 도구를 활용한다.
// - 바람직한 코드 스타일을 적용한다.


// 버그 대비
// - 에러 로깅 - 애플리케이션이나 컴퓨터 시스템이 실행되는 동안에 발생한 에러 메시지를 영속적인
//              저장 장치에 기록하는 프로세스
// - 디버그 트레이스
//   - 멀티스레드 프로그램이라면 스레드ID
//   - 해당 트레이스를 생성한 함수 이름
//   - 트레이스를 생성한 코드의 파일 이름
// - 어서션 (assert()) - 어서션은 심각한 문제가 발생할 가능성이 있는 부분에서만 사용한다.
// - 크래시 덤프 - 애플리케이션이 갑자기 뻗어버릴 때 생성되는 덤프파일


// 디버깅 테크닉
// - 버그 리포팅한 상황과 비슷한 입력값을 버그가 발생할 때와 똑같은 환경에서 최대한 많이 시도해본다.
// - 버그에 관련된 코드를 짧게 검토한다.
// - 비슷한 기능을 자동화된 테스트로 검사한다.
// - 버그 재현에 동원할 하드웨어가 충분하다면 여러 머신에서 병렬로 테스트해서 시간을 절약한다.
// - 스트레스 테스트를 수행한다.

// 재현 가능한 디버깅 - 두가지 방식으로 접근할 수 있다.
// - 디버그 메시지 로깅: 프로그램에 디버그 메시지를 충분히 추가해서 버그를 재현하는 과정에서 출력되는 내용을 확인한다.
// - 디버거 활용: 프로그램을 한 단계씩 실행시키면서 원하는 시점의 메모리와 변수의 상태를 관찰할 수 있다.

// 재현 불가능한 디버깅
// - 재현 불가능한 버그를 재현 가능한 버그로 전환할 수 있는지 살펴본다.
// - 에러 로그를 분석한다.
// - 트레이스 정보를 구해서 분석한다.
// - 크래시 덤프 파일이 있다면 분석한다.
// - 코드를 검토한다. 아쉽게도 이게 유일한 방법일 때가 많다.
// - 메모리 와치 도구를 활용한다.
// - 버그 리포트를 기록하고 업데이트 한다.
// - 버그의 근본 원인을 찾을 수 없다면 로그나 트레이스를 남기는 코드를 더 추가한다.

// 회귀 디버깅 - 회귀 버그는 예전에 문제없던 기능이 제대로 작동하지 않게 많드는 버그를 말한다.

// 메모리 문제 디버깅
// - 메모리 해제 에러
// - 메모리 접근 에러


// 멀티스레드 디버깅
// - 디버거 사용하기
// - 로그 기반 디버깅
// - 강제로 잠재우거나 문맥을 전환하는 문장 전환하기
// - 코드 리뷰하기


// 핵심 - 코드를 작성하는 동안 버그가 발생하지 않도록 최선을 다하되, 나중에 발생할 버그에 미리 대비한다.

int main()
{
	
	save("helloworld.cpp");
}


// Chapter31 디버깅 완전 정복 完


================================================
