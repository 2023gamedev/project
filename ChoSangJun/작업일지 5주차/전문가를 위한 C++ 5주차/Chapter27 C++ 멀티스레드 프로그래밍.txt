


================================================
﻿// helloworld.cpp

/////////////////////////////////////////////////////////////////
// 2023.07.27 공부
// Chapter27 C++ 멀티스레드 프로그래밍
/////////////////////////////////////////////////////////////////

#include <iostream>
#include <vector>
#include <string>
#include <format>
#include <utility>
#include <fstream>
#include <filesystem>
#include <ranges>
#include <ratio>
#include <random>
#include <variant>
#include <any>
#include <tuple>
#include <queue>

#include "save.h"

using namespace std;

// 이 부분은 거의 글로 써져있다.

// 멀티스레드 프로그래밍 - 여러 연산을 병렬로 처리할 수 있다.

// 요즘 나오는 고성능 그래픽 카드는 코어를 무려 4000개 이상 장착하고 있으며,
// 현재도 그 수는 계속 증가하고 있다. 이렇게 제작된 그래픽 카드는 단순히 게임용으로만 사용하지 않고,
// 수학 연산의 비중이 높은 작업을 처리하는 데도 활용된다. 이미지나 비디오 처리, 단백질 분석(신약 개발)
// , 세티(외계지적생명체탐사) 프로젝트에서 신호를 처리하는 작업 등에 활용된다.


// 멀티스레드 프로그래밍이 필요한 이유 두가지
// - 주어진 연산 작업을 작은 조각으로 나눠서 각각을 멀티프로세서 시스템에서 병렬로 실행하면 전반적인
//  성능을 크게 높일 수 있다.
// - 연산을 다른 관점에서 모듈화할 수 있다.


// 경쟁 상태 - 데이터 경쟁 - 여러 스레드가 공유 메모리에 동시에 접근할 수 있는 상태에서
// 최소 하나의 스레드가 그 메모리에 데이터를 쓸 때 발생


// 테어링 - 데이터 경쟁의 특수한 경우이며, 읽기 테어링과 쓰기 테어링이 있다.


// 데드락 - 교착 상태


// 스레드 <thread> 
//
//void counter(int id, int numIterations)
//{
//	for (int i{ 0 }; i < numIterations; ++i) {
//		cout << "Counter " << id << " has value " << i << endl;
//	}
//}
//
//thread t1{ counter, 1, 6 };
//thread t2{ counter, 2, 4 };
//t1.join();
//t2.join();
//
//
//class Request
//{
//public:
//	Request(int id) : m_id{id} {}
//	void process() { cout << "Processing request " << m_id << endl; }
//
//private:
//	int m_id;
//};
//
//Request req{ 100 };
//thread t{ &Request::process, &req };
//t.join();
//
//
//// 스레드 로컬 저장소
//// - 스레드마다 이 변수를 복제해서 스레드가 없어질 때까지 유지한다.
//
//int k;
//thread_local int n;
//
//void threadFunction(int id)
//{
//	cout << format("Thread {}: k= {}, n={}\n", id, k, n);
//	++n;
//	++k;
//
//}
//
//thread t1{ threadFunction, 1 }; t1.join();
//thread t2{ threadFunction, 2 }; t2.join();
//
//Thread1: k = 0, n = 0
//Thread2 : k = 1, n = 0
//
//
//// 스레드 취소 -> C++20 jthread 클래스
//// - 소멸자에서 자동으로 조인한다.
//// - 협조적 취소를 지원한다.
//
//
//
//
//// 아토믹 연산 라이브러리 - 원자적 연산 <atomic>
//
//// std::atomic 타입을 사용하면 명시적으로 동기화 기법을 사용하지 않고도
//// 스레드에 안전하게 만들 수 있다.
//atomic<int> counter {0}; // 글로벌 변수
//++counter;				 // 여러 스레드에서 실행한다.
//
//
//// 뮤텍스 - 상호 배제
//// [1] 스핀 락 - 스레드가 락을 얻기 위해 바쁘게 루프를 도는 데 사용하는 뮤텍스의 일종으로
////				 주어진 작업을 수행한 후 락을 해제한다.
//// [2] 시간 제약이 없는 뮤텍스 클래스
//// [3] 시간 제약이 있는 뮤텍스 클래스
//
//
//// lock
//// [1] lock_guard <mutex>
////    - explicit lock_guard(mutex_type& m); - 뮤텍스에 대한 레퍼런스를 인수로 받는 생성자다.
////    - lock_guard(mutex_type& m, adopt_lock_t); - 뮤텍스에 대한 레퍼런스와 std::adopt_lock_t의 인스턴스를
////													인수로 받는 생성자다.
//// [2] unique_lock - 락을 선언하고 한참 뒤 실행될 때 락을 걸도록 지연시키는 고급 기능을 제공한다.
//// [3] shared_lock - unique_lock과 똑같은 타입의 생성자와 메서드를 제공하고,
////					 내부 공유 뮤텍스에 대해 공유 소유권에 관련된 메서드를 호출한다는 점이 다르다.
//// [4] 한 번에 여러 개의 락을 동시에 걸기
//// [5] scoped_lock - lock_guard와 비슷하지만 뮤텍스를 지정하는 인수의 개수에 제한이 없다.
//
//
//// std::call_once - call_once의 인수로 지정한 함수나 메서드가 단 한번만 호출되게 할 수 있다.
//
//
//// 상태 변수 - 다른 스레드에 의해 특정한 상태에 도달하거나 특별히 지정한 시간이 경과될 때까지
////			  스레드의 실행을 멈추고 기다리게 할 수 있다. - 윈도우의 이벤트 객체와 비슷하다고 보면 된다.
//
//
//// 세마포어 - 경량 동기화 프리미티브로서 뮤텍스, 래치, 배리어와 같은 다른 동기화
////			 메커니즘의 구성 요소로 사용할 수 있다.
//
//
//
//// std::promise와 std::future
//
//
//// 멀티스레드 예제
//class Logger
//{
//public:
//	// 로그 항목을 파일에 저장하는 백그라운드 스레드를 구동한다.
//	Logger();
//	// 복제 생성자와 대입 연산자를 삭제한다.
//	Logger(const Logger& src) = delete;
//	Logger& operator=(const Logger& rhs) = delete;
//	// 로그 항목을 큐에 저장하는 함수
//	void log(std::string entry);
//
//private:
//	// 백그라운드 스레드에서 실행할 함수
//	void processEntries();
//	// 큐를 처리하는 헬퍼 메서드
//	void processEntriesHelper(std::queue<std::string>& queue,std::ofstream& ofs) const;
//	// 큐 동기화에 사용할 뮤텍스와 상태 변수
//	std::mutex m_mutex;
//	std::condition_variable m_condVar;
//	std::queue<std::string> m_queue;
//	// 백그라운드 스레드
//	std::thread m_thread;
//};
//
//Logger::Logger()
//{
//	// 백그라운드 스레드를 구동한다.
//	m_thread = thread{ &Logger::processEntries, this };
//
//}
//
//void Logger::log(string entry)
//{
//	// 뮤텍스에 락을 걸고 큐에 항목을 추가한다.
//	unique_lock lock{ m_mutex };
//	m_queue.push(move(entry));
//	// 상태 변수에 알림을 보내서 스레드를 깨운다.
//	m_condVar.notify_all();
//}
//
//void Logger::processEntries()
//{
//	// 로그 파일을 연다
//	ofstream logFile{ "log.txt" };
//	if (logFile.fail()) {
//		cerr << "Failed to open logfile" << endl;
//		return;
//	}
//
//	// m_mutex에 대한 락을 생성한다. 아직 이에 대한 락을 열지 않는다.
//	unique_lock lock{ m_mutex, defer_lock };
//	while (true) {
//		lock.lock();
//
//		// 알림을 기다린다.
//		m_condVar.wait(lock);
//
//		// 상태 변수로 알림이 왔으며, 큐에 뭔가 들어 있다.
//
//		// 락을 갖고 있는 동안 현재 큐의 내용을 스택의 빈 로컬 큐와 맞바꾼다.
//		queue<string> localQueue;
//		localQueue.swap(m_queue);
//
//		// 현재 큐에 로컬 큐로 모든 항목을 옮겼다면
//		// 락을 반납하고 다른 스레드를 해제시키고, 항목들에 대한 처리 작업을 수행한다.
//		lock.unlock();
//		
//		// 스택에 있는 로컬 큐의 항목을 처리한다.
//		// 락을 해제한 후에 진행하므로, 다른 스레드가 블록되지 않는다.
//		processEntriesHelper(localQueue, logFile);
//	}
//	
//}
//
//void Logger::processEntriesHelper(queue<string>& queue, ofstream& ofs) const
//{
//	while (!queue.empty()) {
//		ofs << queue.front() << endl;
//		queue.pop();
//	}
//}
//
//void logSomeMessages(int id, Logger& logger)
//{
//	for (int i{ 0 }; i < 10; ++i) {
//		logger.log(format("Log entry {} from thread {}", i, id));
//	}
//}
//
//Logger logger;
//vector<thread> threads;
//// 스레드 몇 개를 생성한다. 모두 동일한 Logger 인스턴스를 다룬다.
//for (int i{ 0 }; i < 10; ++i) {
//	threads.emplace_back(logSomeMessages, i, ref(logger));
//}
//// 모든 스레드가 끝나길 기다린다.
//for (auto& t : threads) {
//	t.join();
//}


// 스레드 풀 - 종료할 때까지 스레드를 필요할 때마다 생성했다 삭제하는 식으로 구현하지 않고
//			  필요한 수만큼 스레드 풀을 구성하는 방법



// 바람직한 스레드 디자인과 구현을 위한 가이드라인
// - 표준 라이브러리에서 제공하는 병렬 알고리즘을 활용한다.
// - 애플리케이션을 종료하기 전에 반드시 조인해야 할 thread 객체가 하나도 남지 않게 한다.
// - 동기화 메커니즘이 없는 동기화 방식이 최고다.
// - 가능하다면 싱글 스레드 소유권 패턴을 적용한다.
// - 아토믹 타입과 아토믹 연산을 최대한 많이 사용한다.
// - 변경될 수 있는 공유 데이터는 락으로 보호한다.
// - 락을 거는 기간은 짧을수록 좋다.
// - 여러개의 락을 걸때는 직접 구현하지 말고 std::lock()이나 std::try_lock()을 사용한다.
// - RAII 락 객체를 사용한다.
// - 멀티스레드를 지원하는 프로파일러를 활용한다.
// - 멀티스레드를 지원하는 디버거를 활용한다.
// - 스레드가 많을 때는 필요할 때마다 생성했다가 삭제하지 말고 스레드 풀을 이용한다.
// - 하이레벨 멀티스레딩 라이브러리를 활용한다.

int main()
{
	
	save("helloworld.cpp");
}


// Chapter27 C++ 멀티스레드 프로그래밍 完


================================================
