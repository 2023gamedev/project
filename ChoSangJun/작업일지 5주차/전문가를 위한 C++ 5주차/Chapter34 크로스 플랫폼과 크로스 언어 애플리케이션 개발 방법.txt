


================================================
﻿// helloworld.cpp

/////////////////////////////////////////////////////////////////
// 2023.07.30 공부
// Chapter34 크로스 플랫폼과 크로스 언어 애플리케이션 개발 방법
/////////////////////////////////////////////////////////////////

#include <iostream>
#include <fstream>
#include <format>

#include "save.h"

using namespace std;


// 아키텍처 - 일반적으로 프로그램이 실행될 프로세서를 가리킨다.
// [1] 정수 크기 - 크로스 플랫폼을 지원하도록 코드를 작성하려면 기본 정수 타입 대신 <cstdint>에 정의된 타입을 사용하는 것이 좋다.
// [2] 바이너리 호환성
// [3] 주소 크기
// [4] 바이트 순서 (빅 엔디안, 리틀 엔디안) <- C++20 std::endian


// 구현의 차이점에 대처하는 방법
// - 지속정인 통합, 자동테스트


// 플랫폼 종속적인 기능
// - GUI
// - 네트워킹
// - OS 이벤트와 애플리케이션 상호 작용
// - 로우레벨 파일
// - 스레드


// 크로스 언어 개발

// C#에서 C++코드 호출하기
// C#에서 제공하는 인터롭 서비스를 활용하면 C# 애플리케이션에서 C++ 코드를 간편하게 호출할 수 잇다.


// C++ 코드에서 스크립트 호출하기 <cstdlib>
//system("python my_python_script.py");	// 파이썬 스크립트 호출하기
//system("perl my_perl_script.py");		// 펄 스크립트 호출하기
//system("my_shell_script.py");			// 셸 스크립트 호출하기




// 중요한 점은 C++는 유연한 언어라는 점이다.
// 얼마든지 다른 언어나 플랫폼과 연동할 수 있고, 향후에도 지속적으로 지원될 수 있을 정도로 배경과
// 코드베이스가 탄탄하기 때문이다.

int main()
{
	
	save("helloworld.cpp");
}


// Chapter34 크로스 플랫폼과 크로스 언어 애플리케이션 개발 방법 完


================================================
