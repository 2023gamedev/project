


================================================
﻿/////////////////////////////////////////////////////////////////
// 2023.07.13 공부
// Chapter 9 게임 루프
/////////////////////////////////////////////////////////////////

#include <iostream>

#include "save.h"

// 게임 시간 진행을 유저 입력, 프로세서 속도와 디커플링한다.
 
// 이 책에서 패턴을 하나만 남겨야 한다면 게임 루프 패턴을 고를 것이다. - 전형적인 게임 프로그래밍 패턴

/*
// 대화형 프로그래밍
while (true) {
	char* command = readCommand();
	handleCommand(command);
}


// 이벤트 루프 - 거의 비슷
while (true) {
	Event* event = waitForEvent();
	dispatchEvent(event);
}

// 루프에서 사용자 입력을 처리하지만 마냥 기다리고 있지 않는다는점, 이게 게임 루프의 첫번째 핵심이다.
while (true) {
	processInput();
	update();
	render();
}


// 게임 월드에서의 시간
// 1. 한 프레임에 얼마나 많은 작업을 하는가
// 2. 코드가 실행되는 플랫폼의 속도
// 이 두가지가 프레임 레이트를 결정


// 어떤 하드웨어에서라도 일정한 속도로 실행될 수 있도록 하는 것이 게임 루프의 또 다른 핵심 업무다.

// 게임 루프는 전체 게임 코드 중에서도 가장 핵심 -> 최적화를 고려하여 깐깐하게 만들어야 한다.


// 예제
// 최대한 빨리 달리기
while (true) {
	processInput();
	update();
	render();
}

// 한숨 돌리기
// 입력처리 -> 게임 업데이트 -> 렌더링 ------------> 다시 입력처리
while (true) {
	double start = getCurrentTime();
	processInput();
	update();
	render();

	sleep(start + MS_PER_FRAME - getCurrentTime());
}

// 한번은 짧게, 한번은 길게
// 1. 업데이트할 때마다 정해진 만큼 게임 시간이 진행된다.
// 2. 업데이트하는 데에는 현실 세계의 시간이 어느 정도 걸린다.
// 2번이 1번보다 오래 걸리면 게임은 느려진다.
double lastTime = getCurrentTime();
while (true) {
	double current = getCurrentTime();
	double elapsed = current - lastTime;
	processInput();
	update();
	render();
	lastTime = current;
}
// 시간 간격이 커지면 더 많이 움직이게 되며 맞춰지지만
// 성능에 따라 오차가 더 커지는 치명적인 문제점이 있다.


// 따라잡기
double previous = getCurrentTime();
double lag = 0.0;
while (true) {
	double current = getCurrentTime();
	double elapsed = current - previous;
	previous = current;
	lag += elapsed;
	processInput();
	update();
	render();

	while (lag >= MS_PER_UPDATE) {
		update();
		lag -= MS_PER_UPDATE;
	}
	render();
}
//                 < - >
// 입력 처리 -> 게임 업데이트 -> 렌더링


// lag값을 이용해 렌더링 할때 return (lag/ MS_PER_UPDATE)로 넘겨 보간한다.


// 대부분 게임 루프를 사용하기보다는 엔진에 들어 있는 게임 루프를 사용한다.
// 플랫폼 이벤트 루프
// - 간단하다
// - 플랫폼에 잘 맞는다.
// - 시간을 제어할 수 없다.

// 게임 엔진 루프 사용
// - 코드를 직접 작성하지 않아도 된다.
// - 코드를 직접 작성할 수 없다.

// 직접 만든 루프 사용
// - 완전한 제어
// - 플랫폼과 상호작용해야 한다.

*/
int main()
{



	save("GameProgrammingPatternStudy.cpp");
}
================================================
