


================================================
﻿// helloworld.cpp

/////////////////////////////////////////////////////////////////
// 2023.07.22 공부
// Chapter14 에러 처리
/////////////////////////////////////////////////////////////////

#include <iostream>
#include <vector>
#include <string>
#include <format>
#include <utility>
#include <fstream>
#include <filesystem>

#include "save.h"

using namespace std;

// 익셉션 - 코드에서 발생한 '예외' 상황이나 에러를 알려주는 메커니즘으로서 코드의 정상적인 실행 흐름과는
// 별도로 실행된다. 어떤 코드가 익셉션을 던지면 프로그램의 정상 실행 흐름을 잠시 멈추고 익셉션 핸들러로 제어권을 넘긴다.


// 익셉션은 에러를 효과적으로 처리하는 기법으로 적극 활용하기 바란다.

//
//vector<int> readIntegerFile(string_view filename) {
//	ifstream inputStream{ filename.data() };
//	// 파일에 담긴 정숫값을 하나씩 읽어서 벡터에 추가한다.
//	vector<int> integers;
//	int temp;
//	while (inputStream >> temp) {
//		integers.push_back(temp);
//	}
//	return integers;
//}
//
//const string filename{ "IntegerFile.txt" };
//vector<int> myInts {  readIntegerFile(filename)};
//for (const auto& element : myInts) {
//	cout << element << " ";
//}
//cout << endl;
//
//
//double SafeDivide(double num, double den) {
//	if (den == 0) {
//		throw invalid_argument {"Divide by zero"};
//	}
//	return num / den;
//}
//
//try {
//	cout << SafeDivide(5, 2) << endl;
//	cout << SafeDivide(10, 0) << endl;
//	cout << SafeDivide(3, 3) << endl;
//}
//catch (const invalid_argument& e) {
//	cout << "Caught exception: " << e.what() << endl;
//}
//
//
//vector<int> readIntegerFile(string_view filename) {
//	ifstream inputStream{ filename.data() };
//
//
//	if (inputStream.fail()) {
//		// 파일 열기에 실패한 경우 익셉션을 던진다.
//		throw exception{};
//	}
//
//
//	// 파일에 담긴 정숫값을 하나씩 읽어서 벡터에 추가한다.
//	vector<int> integers;
//	int temp;
//	while (inputStream >> temp) {
//		integers.push_back(temp);
//	}
//	return integers;
//}
//
//const string filename{ "IntegerFile.txt" };
//vector<int> myInts {  readIntegerFile(filename)};
//try {
//	myImnts = readIntegerFile(filename);
//}
//catch (const exception& e) {
//	cerr << "Unable to open file " << filename << endl;
//	return 1;
//}
//for (const auto& element : myInts) {
//	cout << element << " ";
//}
//cout << endl;
//
//
//
//
//vector<int> readIntegerFile(string_view filename) {
//	ifstream inputStream{ filename.data() };
//
//
//	if (inputStream.fail()) {
//		// 파일 열기에 실패한 경우 익셉션을 던진다.
//		throw invalid_argument {"Unable to open the file."};
//	}
//
//
//	// 파일에 담긴 정숫값을 하나씩 읽어서 벡터에 추가한다.
//	vector<int> integers;
//	int temp;
//	while (inputStream >> temp) {
//		integers.push_back(temp);
//	}
//
//	if (!inputStream.eof()) {
//		// 파일 끝(EOF)에 도달하지 않았다.
//		// 다시 말해 파일을 읽는 도중 에러가 발생했다.
//		// 따라서 익셉션을 던진다.
//		throw runtime_error {"Error reading rhe file."};
//	}
//	return integers;
//}
//
//try {
//	myInts = readIntegerFile(filename);
//}
//catch (const invalid_argument& e) {
//	cerr << e.what() << endl;
//	return 1;
//}
//catch (const runtime_error& e) {
//	cerr << e.what() << endl;
//	return 2;
//}
//
//
//// noexcept - 어떠한 익셉션도 던지지 않겠다.
//
//
//// 익셉션 클래스 직접 정의하기 - 두가지 장점이 있다.
//// - C++ 표준 라이브러리의 익셉션 개수에는 제한이 있다. -> 더 특정 에러에 더 의미 있는 이름을 가진 클래스를 만들 수 있다.
//// - 익셉션에 원하는 정보를 추가할 수 있다.
//// 익셉션을 직접 정의할 때는 반드시 표준 exception 클래스를 직접 또는 간접적으로 상속하는 것이 좋다.
//class FileError : public exception
//{
//public:
//	FileError(string filename) : m_filename{ move(filename) } {	}
//	const char* what() const noexcept override { return messages.c_str(); }
//	virtual const stirng& getFilename() const noexcept { return m_filename; }
//protected:
//	virtual void setMessage(string message) { m_message = move(message); }
//private:
//	string m_filename;
//	string m_message;
//};
//
//
//// 중첩 익셉션 - A 타입의 익셉션전에 먼저 온 B타입의 익셉션만 처리하게끔 하는 기능
//
//
//// throw - 익셉션을 다시 던지는 용도로도 사용된다.
//
//
//// 익셉션을 던지면 익셉션 핸들러가 있는 곳까지의 스택을 모두 풀어버리는데
//// 이때 포인터 변수를 헤제하고 리소스를 정리하는 직업은 실행되지 않는다.
//// 그걸 막기 위해 스택 기반 할당 방식을 적용해야 하지만 힘들다면 두가지 중 하나를 활용하자
//// 1. 스마트 포인터 활용
//// 2. 잡고,정리하고,다시 던지기
//
//
//
//// 생성자 초기자를 위한 함수 try 블록 - 사실 사용하지 않는 것이 좋다.
//MyClass::MyClass()
//try
//	: <ctor-initializer>
//{
//	/* ... 생성자 본문 ... */
//}
//catch (const exception& e)
//{
//	/* ... */
//}
//
//
//// 소멸자에서 발생하는 에러는 반드시 소멸자 안에서 처리해야 한다.

int main()
{
	

	save("helloworld.cpp");
}


// Chapter14 에러 처리 完================================================
