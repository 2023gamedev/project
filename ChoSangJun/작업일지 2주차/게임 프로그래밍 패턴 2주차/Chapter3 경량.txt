


================================================
﻿/////////////////////////////////////////////////////////////////
// 2023.07.02 공부
// Chapter 3 경량
// 3.1 숲에 들어갈 나무들
/////////////////////////////////////////////////////////////////


#include <iostream>

#include "save.h"


// 공유를 통해 많은 수의 소립 객체들을 효과적으로 지원합니다.

// 구비구비 뻗어 있는 숲을 글로는 몇 문장으로 표현할 수 있지만, 실시간 게임으로 구현하는 것은 전혀 다른 얘기다.
// 우리가 나무들이 화면을 가득 채운 빽빽한 숲을 볼 때, 그래픽스 프로그래머는 
// 1초에 60번씩 GPU에 전달해야 하는 몇백만 개의 폴리곤을 본다.

// 이런 숲을 그리기 위해서는 전체 데이터를 CPU에서 GPU로 버스를 통해 전달해야 한다.

int main()
{



	save("GameProgrammingPatternStudy.cpp");
}
================================================



================================================
﻿/////////////////////////////////////////////////////////////////
// 2023.07.02 공부
// Chapter 3 경량
// 3.1 숲에 들어갈 나무들
/////////////////////////////////////////////////////////////////


#include <iostream>

#include "save.h"


// 공유를 통해 많은 수의 소립 객체들을 효과적으로 지원합니다.

// 구비구비 뻗어 있는 숲을 글로는 몇 문장으로 표현할 수 있지만, 실시간 게임으로 구현하는 것은 전혀 다른 얘기다.
// 우리가 나무들이 화면을 가득 채운 빽빽한 숲을 볼 때, 그래픽스 프로그래머는 
// 1초에 60번씩 GPU에 전달해야 하는 몇백만 개의 폴리곤을 본다.

// 이런 숲을 그리기 위해서는 전체 데이터를 CPU에서 GPU로 버스를 통해 전달해야 한다.

// 나무마다 필요한 데이터는 다음과 같다.
// - 줄기, 가지, 잎의 형태를 나타내는 폴리곤 메쉬
// - 나무 껍질과 잎사귀 텍스쳐
// - 숲에서의 위치와 방향
// - 각각의 나무가 다르게 보이도록 크기와 음영 같은 값을 조절할 수 있는 매개변수

/*
class Tree {
private:
	Mesh mesh_;
	Texture bark_;
	Texture leaves_;
	Vector position_;
	double height_;
	double thickness_;
	Color barkTint_;
	Color leafTint_;
};
*/


int main()
{



	save("GameProgrammingPatternStudy.cpp");
}
================================================



================================================
﻿/////////////////////////////////////////////////////////////////
// 2023.07.02 공부
// Chapter 3 경량
// 3.1 숲에 들어갈 나무들
/////////////////////////////////////////////////////////////////


#include <iostream>

#include "save.h"


// 공유를 통해 많은 수의 소립 객체들을 효과적으로 지원합니다.

// 구비구비 뻗어 있는 숲을 글로는 몇 문장으로 표현할 수 있지만, 실시간 게임으로 구현하는 것은 전혀 다른 얘기다.
// 우리가 나무들이 화면을 가득 채운 빽빽한 숲을 볼 때, 그래픽스 프로그래머는 
// 1초에 60번씩 GPU에 전달해야 하는 몇백만 개의 폴리곤을 본다.

// 이런 숲을 그리기 위해서는 전체 데이터를 CPU에서 GPU로 버스를 통해 전달해야 한다.

// 나무마다 필요한 데이터는 다음과 같다.
// - 줄기, 가지, 잎의 형태를 나타내는 폴리곤 메쉬
// - 나무 껍질과 잎사귀 텍스쳐
// - 숲에서의 위치와 방향
// - 각각의 나무가 다르게 보이도록 크기와 음영 같은 값을 조절할 수 있는 매개변수

/*
class Tree {
private:
	Mesh mesh_;
	Texture bark_;
	Texture leaves_;
	Vector position_;
	double height_;
	double thickness_;
	Color barkTint_;
	Color leafTint_;
};
*/

// 핵심은 숲에 나무가 수천 그루 넘게 있다고 해도 대부분 비슷해 보인다는 점이다.
// 즉, 나무 객체에 들어 있는 데이터 대부분이 인스턴스별로 다르지 않다는 뜻이다.

// 모든 나무가 다 같이 사용하는 데이터를 뽑아내 새로운 클래스에 모아보자.
/*
class TreeModel {
private:
	Mesh mesh_;
	Texture bark_;
	Texture leaves_;
};
// 게임 내에서 같은 메쉬와 텍스쳐를 여러 번 메모리에 올릴 이유가 전혀 없기 때문에 TreeModel 객체는 하나만 존재하게된다.
// 이제 각 나무 인스턴스는 공유 객체인 TreeModel을 참조하기만 한다.
// Tree 클래스에는 인스턴스별로 다른 상태 값만 남겨둔다.
class Tree {
private:
	TreeModel* model_;

	Vector position_;
	double height_;
	double thickness_;
	Color barkTint_;
	Color leafTint_;
};
*/
// 주 메모리에 객체를 저장하기 위해서라면 이 정도로 충분한다.
// 하지만 렌더링은 또 다른 얘기다. 화면에 숲을 그리기 위해서는 먼저 데이터를 GPU로 전달해야 한다.


int main()
{



	save("GameProgrammingPatternStudy.cpp");
}
================================================



================================================
﻿/////////////////////////////////////////////////////////////////
// 2023.07.02 공부
// Chapter 3 경량
// 3.2 수천개의 인스턴스
/////////////////////////////////////////////////////////////////


#include <iostream>

#include "save.h"

// GPU로 보내는 데이터 양을 최소화하기 위해서는 고유 데이터인 TreeModel을 딱 한 번만 보낼 수 있어야 한다.
// 그런 후에 나무마다 값이 다른 것들을 전달하고,
// 마지막으로 GPU에 '전체 나무 인스턴스를 그릴때 공유 데이터를 사용해' 라고 말하면 된다.

// Direct3D, OpenGL 모두 그런 기능인 인스턴스 렌더링을 지원한다.
// 이들 API에서 인스턴스 렌더링을 하려면 데이터 스트림이 두개 필요하다.
// 1. 공유데이터가 들어가는 스트림
// 2. 다르게 보이기 위해 필요한 매개변수가 들어가는 스트림

int main()
{



	save("GameProgrammingPatternStudy.cpp");
}
================================================



================================================
﻿/////////////////////////////////////////////////////////////////
// 2023.07.02 공부
// Chapter 3 경량
// 3.3 경량 패턴
/////////////////////////////////////////////////////////////////


#include <iostream>

#include "save.h"

// 경량 패턴은 말 그대로 어떤 객체의 수가 너무 많아서 좀 더 가볍게 만들고 싶을 때 사용한다.

// 경량 패턴은 객체를 두 종류로 나눈다.
// 1. 자유문맥(context-free)상태 - 모든 객체의 데이터 값이 같아서 공유할 수 있는 데이터
// 2. 외부 상태(extrinsic state) - 나머지 데이터


int main()
{



	save("GameProgrammingPatternStudy.cpp");
}
================================================



================================================
﻿/////////////////////////////////////////////////////////////////
// 2023.07.02 공부
// Chapter 3 경량
// 3.4 지형 정보
/////////////////////////////////////////////////////////////////


#include <iostream>

#include "save.h"

// 땅을 타일 기반으로 만들 것이다. 즉, 땅은 작은 타일들이 모여 있는 거대한 격자인 셈이다.
// 지형 종류에는 게임플레이에 영향을 주는 여러 속성이 들어 있다.
// - 플레이어가 얼마나 빠르게 이동할 수 있는지를 결정하는 이동 비용 값
// - 강이나 바다처럼 보트로 건너갈 수 있는 곳인지 여부
// - 렌더링할 때 사용할 텍스쳐

// 우리 게임 프로그래머는 최적화에 집착하기 때문에, 이들 속성을 지형 타일마다 따로 저장하는 일은 있을 수 없다.
// 대신 지형 종류에 열거형을 사용하는 게 일반적이다.

/*
enum Terrain {
	TERRAIN_GRASS,
	TERRAIN_HILL,
	TERRAIN_RIVER
	// 그 외 다른 지형들...
};

// 이제 월드는 지형을 거대한 격자로 관리한다.
class World {
private:
	Terrain tiles_[WIDTH][HEIGHT];
};

// 타일 관련 데이터는 다음과 같이 얻을 수 있다.
int World::getMovementCost(int x, int y) {
	switch (tiles_[x][y])
	{
	case TERRAIN_GRASS: return 1;
	case TERRAIN_HILL: return 3;
	case TERRAIN_RIVER: return 2;
	// 그 외 다른 지형들
	}
}

bool World::isWater(int x, int y) {
	switch (tiles_[x][y])
	{
	case TERRAIN_GRASS: return false;
	case TERRAIN_HILL: return false;
	case TERRAIN_RIVER: return true;
		// 그 외 다른 지형들
	}
}
// 이 코드는 동작하지만 지저분하다.
// 이동 비용이나 물인지 땅인지 여부는 지형에 관한 데이터인데 이 코드에서는 하드코딩되어 있다.

// 아래와 같이 지형 클래스를 따로 만드는게 훨씬 낫다.
class Terrain {
public:
	Terrain(int movementCost, bool isWater, Texture texture)
		: movementCost_(movementCost),
		  isWater_(isWater),
		  texture_(texture) {

	}

	int getMovementCost() const { return movementCost_; }
	bool isWater() const { return isWater_; }
	const Texture& getTexture() const { return texture; }

private:
	int movementCost_;
	bool isWater_;
	Texture texture_;

};
// Terrain 클래스에는 타일 위치와 관련된 내용은 전혀 없는 것을 볼 수 있다.
// 그렇다. 자유문맥에 해당한다.

// 따라서 지형 종류별로 Terrain 객체가 여러 개 있을 필요가 없다.

class World {
private:
	Terrain* tiles_[WIDTH][HEIGHT];
	// 그 외...
};
// 지형 종류가 같은 타일들은 모두 같은 Terrain 인스턴스 포인터를 갖는다.


// Terrain 인스턴스가 여러 곳에서 사용되다 보니, 동적으로 할당하면 생명주기를 관리하기가 어렵다.
// 따라서 World 클래스에 저장한다.
class World {
public:
	World()
		: grassTerrain_(1, false, GRASS_TEXTURE),
		  hillTerrain_(3, false, HILL_TEXTURE),
		  riverTerrain_(2, false, RIVER_TEXTURE) {

	}


private:
	Terrain grassTerrain_;
	Terrain hillTerrain_;
	Terrain riverTerrain_;
	// 그 외...
};

void World::generateTerrain() {
	// 땅에 풀을 채운다.
	for (int x = 0; x < WIDTH; x++) {
		for (int y = 0; y < HEIGHT; y++) {
			// 언덕을 몇 개 놓는다.
			if (random(10) == 0) {
				tiles_[x][y] = &hillTerrain_;
			}
			else {
				tiles_[x][y] = &grassTerrain_;
			}
		}
	}
	
	// 강을 하나 놓는다.
	int x = random(WIDTH);
	for (int y = 0; y < HEIGHT; y++) {
		tiles_[x][y] = &riverTerrain_;
	}
}

// 이제 지형 속성 값을 World의 메서드 대신 Terrain 객체에서 바로 얻을 수 있다.
const Terrain& World::getTile(int x, int y) const {
	return *tiles_[x][y];
}


// World 클래스는 더 이상 지형의 세부 정보와 커플링되지 않는다. 타일 속성은 Terrain 객체에서 바로 얻을 수 있다.
int cost = world.getTile(2, 3).getMovementCost();

*/
int main()
{



	save("GameProgrammingPatternStudy.cpp");
}
================================================



================================================
﻿/////////////////////////////////////////////////////////////////
// 2023.07.02 공부
// Chapter 3 경량
// 3.5 성능에 대해서
/////////////////////////////////////////////////////////////////


#include <iostream>

#include "save.h"


// 성능에 대해 깐깐한 사람이라면 포인터가 열거형보다 느리다고 트집 잡을 만한 요소가 있다고 말할 수 있다.
// 지형 데이터를 포인터로 접근한다는 것은 간접 조화(indirect lookup)한다는 뜻이다.
// 이동 비용 같은 지형 데이터 값을 얻으려면 먼저 격자 데이터로부터 지형 객체 포인터를 얻은 다음
// 포인터를 통해서 이동 비용 값을 얻어야 한다. 이렇게 포인터를 따라가면
// 캐시 미스가 발생 할 수 있어 성능이 조금 떨어질 수는 있다.

// 최적화의 황금률은 언제나 먼저 측정하는 것이다.
// 최신 컴퓨터 하드웨어는 너무 복잡해서 더이상 추측만으로는 최적화하기 어렵다.

// 확실한 것은 경량 객체를 한 번은 고려해봐야 한다는 점이다. 경량 패턴을 사용하면
// 객체를 마구 늘리지 않으면서도 객체지향 방식의 장점을 취할 수 있다.
// 열거형을 선언해 수많은 다중 선택문을 만들 생각이라면 경량 패턴을 먼저 고려해보자.

int main()
{



	save("GameProgrammingPatternStudy.cpp");
}
================================================
