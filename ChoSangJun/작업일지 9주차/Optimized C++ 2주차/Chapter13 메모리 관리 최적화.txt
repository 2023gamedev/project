


================================================
﻿/////////////////////////////////////////////////////////////////
// 2023.08.27 공부
// Chapter13 메모리 관리 최적화
/////////////////////////////////////////////////////////////////

#include <iostream>

#include "save.h"

// 메모리 관리자는 동적 변수의 메모리 할당을 감독하는  C++ 런타임 시스템의 함수 및 자료구조 집합입니다.



// 동적 변수의 생명 주기
// 동적 변수의 생명 주기는 5단계로 나눌 수 있습니다.
// - 할당
// - 배치
// - 사용
// - 파괴
// - 해제


// 메모리를 할당하고 해제하는 메모리 관리 함수
// - operator new()는 할당을 구현합니다.
// - operator delete()는 할당된 메모리를 해제합니다.
// - new 표현식은 동적 변수를 생성합니다.
// - delete 표현식은 동적 변수를 없앱니다.
// - 소멸자를 명시적으로 호출하면 동적 변수를 파괴합니다.


// C++98에 관한 내용이 이 부분에 많이 등장하여 생략

// 정리
// - 메모리 관리자보다 성능을 향상할 수 있는 종은 장소가 있을지도 모릅니다.
// - 몇몇 대규모 오픈 소스 프로그램에서 기본 메모리 관리자를 교체한 결과 성능 향상은 무시할 정도부터
//   30%까지 다양했습니다.
// - 특히 똑같은 크기를 요청하는 메모리 관리자는 쉽게 만들 수 있고 효율적으로 실행됩니다.
// - 특정 클래스의 인스턴스 할당을 요청할 때 요청하는 바이트 수가 모두 똑같습니다.
// - operator new()는 클래스 수준에서 재정의할 수 있습니다.
// - 표준 라이브러리 컨테이너 클래스 std::list, std::map, std::multimap, std::set, std::multiset은
//   모두 똑같은 여러 노드에서 자료구조를 만듭니다.
// - 표준 라이브러리 컨테이너는 클래스 한정 operator new()와 동일한 방법으로 메모리 관리를 사용자가 지정할 수 있도록
//   인수 Allocator를 받습니다.
// - 사용자 정의 메모리 관리자나 할당자를 만들면 효과적일 수 있지만, 메모리 관리자를 호출하는 코드를 모두 제거하는 최적화 기법과
//   비교화면 얻는 이점이 적습니다.




int main()
{
    save("Optimized C++study.cpp");
}

// Chapter13 메모리 관리 최적화 完================================================
