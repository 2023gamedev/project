


================================================
﻿/////////////////////////////////////////////////////////////////
// 2023.08.25 공부
// Chapter4 문자열 최적화
/////////////////////////////////////////////////////////////////

#include <iostream>

#include "save.h"

// std::string은 굉장히 많이 사용됩니다.

// 문자열에는 구현과 관계없이 비용이 높은 함수가 있습니다. 이 함수들은 메모리를 동적으로 할당하고
// , 표현식에서 값처럼 작동하며 내부에서 복사를 많이 합니다.



std::string remove_ctrl(std::string s) {
    std::string result;
    for (int i = 0; i < s.length(); ++i) {
        if (s[i] >= 0x20) {
            result = result + s[i];
        }

    }
    return result;
}


// 문자열의 내용을 변경하는 연산자로 임시 문자열 제거하기
std::string remove_ctrl_mutating(std::string s) {
    std::string result;
    for (int i = 0; i < s.length(); ++i) {
        if (s[i] >= 0x20) {
            result += s[i];
        }

    }
    return result;
}


// 저장 공간을 예약해 재할당 줄이기
std::string remove_ctrl_reserve(std::string s) {
    std::string result;
    result.reserve(s.length());
    for (int i = 0; i < s.length(); ++i) {
        if (s[i] >= 0x20) {
            result += s[i];
        }

    }
    return result;
}


// 문자열 인수의 복사 제거하기
std::string remove_ctrl_ref_args(std::string const& s) {
    std::string result;
    result.reserve(s.length());
    for (int i = 0; i < s.length(); ++i) {
        if (s[i] >= 0x20) {
            result += s[i];
        }

    }
    return result;
}


// 반복자로 포인터 역참조 제거하기
std::string remove_ctrl_ref_args_it(std::string const& s) {
    std::string result;
    result.reserve(s.length());
    for (auto it = s.begin(), end = s.end(); it != end; ++it) {
        if (*it >= 0x20) {
            result += *it;
        }

    }
    return result;
}


// 반환된 문자열 값의 복사 제거하기
void remove_ctrl_ref_result_it(std::string& result, std::string const& s) {
    result.clear();
    result.reserve(s.length());
    for (auto it = s.begin(), end = s.end(); it != end; ++it) {
        if (*it >= 0x20) {
            result += *it;
        }

    }

}


// 문자열 대신 문자 배열 사용하기
void remove_ctrl_cstrings(char* destp, char const* srcp, size_t size) {
    for (size_t i = 0; i < size; ++i) {
        if (srcp[i] >= 0x20) {
            *destp++ = srcp[i];
        }
    }
    *destp = 0;
}




// 정리
// - 문자열은 동적으로 할당되기 때문에 사용하는 데 비용이 많이 듭니다. 또한 표현식에서
//   값처럼 작동하며 구현 코드에서 복사를 많이 합니다.
// - 문자열을 값이 아닌 객체로 처리하면 할당 및 복사 횟수를 줄일 수 있습니다.
// - 문자열 공간을 예약하면 할당 오버헤드를 줄일 수 있습니다.
// - 문자열을 가리키는 cosnt 참조를 함수에 전달하는 방법은 값을 전달하는 방법과 비슷하지만 더 효율적입니다.
// - 함수의 출력용 매개변수를 참조로 전달하면 인수의 저장공간을 재사용하므로 새로운 저장 공간을 할당하는 방법보다 훨씬
//   효율적입니다.
// - 할당 오버헤드를 제거하는 작업도 최적화라고 할 수 있습니다.
// - 다른 알고리즘을 사용하는 것은 최적화하기 쉽고 더 효율적인 방법입니다.
// - 표준 라이브러리 클래스는 범용적으로 간단하게 구현해야 합니다. 반드시 성능이 뛰어나야 한다거나
//   특정 용도에 최적화되어야 할 필요는 없습니다.





int main()
{
    save("Optimized C++study.cpp");
}

// Chapter4 문자열 최적화 完================================================
