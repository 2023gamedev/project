


================================================
﻿/////////////////////////////////////////////////////////////////
// 2023.08.25 공부
// Chapter3 성능 측정
/////////////////////////////////////////////////////////////////

#include <iostream>

#include "save.h"


// 널리 사용할 수 있으면서도 유용하며 비용이 저렴한 도구
// 1. 프로파일러 - 일반적으로 컴파일러 제작사가 컴파일러와 함께 제공하며
//                프로그램 실행 중에 호출된 각 함수를 수행하는데 걸린 누적 시간을 표로 정리한 뒤 보고서를 작성
// 2. 소프트웨어 타이머 - 개발자가 만들 수 있는 도구
// 3. 노트

// --------------- 이 책에서 가장 중요한 부분 ------------
// 숙력된 최적화 기술을 갖춘 개발자에 최적화 작업 접근 방법
// - 테스트 가능한 예측을 만들고, 적어둔다.
// - 코드 변경 사항을 기록한다.
// - 사용 가능한 최고의 측정기로 측정한다.
// - 실험 결과의 자세한 내용을 보관합니다.


// 90/10 규칙 : 최적화 기본 규칙에는 '프로그램 코드의 10%가 실행 시간의 90%를 소비한다.'라는 규칙이 있다.
// 90%의 코드를 최적화한다고 시간 낭비하지 말아라


// 암달의 법칙 - 컴퓨터 공학의 선구자인 진 암달이 만들었으며 코드의 일부를 최적화 할 때 전반적인 성능이
//              얼마나 향상되는지 설명합니다. - 공식이 있지만 생략합니다.



// 성능 측정 기준과 목표 설정
// - 시작 시간
// - 종료 시간
// - 응답 시간
//   - 0.1초 미만: 사용자가 직접적인 제어권을 가짐
//   - 0.1초 ~ 1초: 사용자가 제어권을 가짐
//   - 1초 ~ 10초: 컴퓨터에 제어권이 있음
//   - 10초 이상: 커피 마실 시간
// - 처리량


// 프로파일러
// - 보고서를 여러 가지 형식으로 생성할 수 있습니다.
// - 가능한 저렴한 비용으로 측정할 수 있도록 설계되었습니다.
// - 코드에서 가장 자주 실행되는 함수 목록을 표시해준다는 점입니다.



// 윈도우 8 이상의 운영체제에서 void GetSystemTimePreciesAsFileTime(FILETIME*)은
// 현재 시스템의 고정 주파수 및 마이크로초의 정확도를 유지한 상태에서 고해상도 틱을 생성합니다.


// 순환 - GetTickCount()
//
//DWORD start = GetTickCount();
//DoBigTask();
//DWORD end = GetTickCount();
//cout << "Startup took" << end - start << " ms" << endl;
//
//// GetTickCount 보다 GEtTickCount64()를 사용하라
//
//
//// 측정 장애물 극복하기
//// - 별거 아닌 걸로 속 태우지 마세요.
//// - 상대적 성능을 측정하세요
//// - 모듈 테스트를 측정해 반복성을 향상하세요
//// - 측정 기준을 사용해 성능을 튜닝하세요
//// - 여러 차례 반복한 결과의 평균으로 정확도를 높이세요
//// - 우선순위를 높여 운영체제의 비결정적 행동을 줄이세요
//// - 비결정적인 무언가가 발생해도 앞으로 나아가세요.
//
//
//
//// 스톱워치 클래스
//template <typename T> class basic_stopwatch : T {
//    typedef typename T BaseTimer;
//public:
//    // 생성자. 황동의 시작 타이밍을 정합니다(선택적)
//    explicit basic_stopwatch(bool start);
//    explicit basic_stopwatch(char const* activity = "stopwatch", bool start = true);
//    basic_stopwatch(std::ostream::& log, char const* activity = "stopwatch", bool start = true);
//
//    // 스톱워치를 멈추고 파괴합니다.
//    ~basic_stopwatch();
//
//    // 마지막 랩 타입(마지막으로 멈춘 시간)을 얻습니다.
//    unsigned LapGet() const;
//
//    // 스톱워치가 실행 중이라면 true를 반환합니다.
//    bool IsStarted() const;
//
//    // 누적된 시간을 보여주되 실행을 멈추지 않고 랩 타임을 설정/반환합니다.
//    unsigned Show(char const* event = "show");
//
//    // 스톱워치를 (다시) 시작하고, 랩 타임을 설정/반환합니다.
//    unsigned Start(char const* event_name = "start");
//
//    // 실행 중인 스톱워치를 멈추고, 랩 타임을 설정/반환합니다.
//    unsigned Stop(char const* event_name = "stop");
//
//private:
//    char const* m_activity; // "활동" 문자열
//    unsigned        m_lap;      // 랩 타임(마지막으로 멈춘 시각)
//    std::ostream& m_log;      // 이벤트를 기록할 스트림
//
//};
//
//
//
//// 정리
//// - 성능은 반드시 측정해야 합니다.
//// - 테스트 가능한 예측을 만들고 적어둡니다.
//// - 코드 변경 사항을 기록해둡니다.
//// - 각 테스트를 문서화했다면, 빠르게 반복 수행할 수 있습니다.
//// - 프로그램의 코드의 10%가 실행 시간의 90%를 소비합니다.
//// - 정확한 측정을 위해서는 정밀하고 동시에 충실해야 합니다.
//// - 해상도는 정확하지 않습니다.
//// - 윈도우의 clock()함수는 신회할 수 있는 1밀리초 클록 틱을 제공합니다.
////   윈도우 8이상에서는 GetSystemTimePreciseAsFileTime() 함수가 1마이크로초 미만 틱을 제공합니다.
//// - 개발자가 큰 성능 변화를 가져오는 부분만 받아들인다면, 방법론에 크게 신경 쓸 필요가 없어집니다.
//// - C++문장의 비용이 얼마나 높은지 추정하려면, 문장이 메모리를 몇번 읽고 썼는지 세면 됩니다.
//
//
//
//


int main()
{
    save("Optimized C++study.cpp");
}

// Chapter3 성능 측정 完================================================
