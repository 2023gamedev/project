


================================================
﻿/////////////////////////////////////////////////////////////////
// 2023.08.26 공부
// Chapter6 동적 할당 변수 최적화
/////////////////////////////////////////////////////////////////

#include <iostream>

#include "save.h"

// 메모리 관리자의 호출 횟수를 줄이는 방법을 알고만 있다면 효과적으로 최적화할 수 있습니다.


// 변수의 저장 기간
// - 정적 저장 기간
// - 스레드 지역 저장 기간
// - 자동 저장 기간
// - 동적 저장 기간

// 변수의 소유권
// - 전역 소유권
// - 유효 범위가 지정된 소유권
// - 멤버 소유권
// - 동적 변수의 소유권


// 엔티티 - 프로그램에서 역할에 따라 의미를 얻는 변수
// - 엔티티는 유일합니다.
// - 엔티티는 변경할 수 있습니다.
// - 엔티티는 복사할 수 없습니다.
// - 엔티티는 비교할 수 없습니다.

// - 값은 서로 교환할 수 있고 비교할 수 있습니다.
// - 값은 변경할 수 없습니다.
// - 값은 복사할 수 있습니다.


// 동적 변수 사용 줄이기
// - 클래스 인스턴스를 정적으로 만드세요
// - 클래스 멤버 변수를 정적으로 만드세요


// 정적 자료구조를 사용하세요
// - std::vector대신 std::array를 사용하세요
// - 스택에 큰 버퍼를 만드세요
// - 연결 자료구조를 정적으로 만드세요
// - 이진 트리를 배열로 만드세요.
// - 데큐 대신 원형 버퍼를 사용하세요.
// - new 대신 std::make_shared를 사용하세요


// 동적 변수의 재할당 줄이기
// - 동적 변수를 미리 할당해 재할당을 방지하세요 --> v.reserve()
// - 반복문 바깥에서 동적 변수를 만드세요 ----> 지금은 컴파일러가 좋아져서 상관없다는 얘기를 들었던 것 같은데
//                                            동적 변수도 그런지는 모르겠습니다.



// 정리
// - 지식 없이 동적 할당 변수를 사용하면 C++ 프로그램의 성능이 엄청나게 저하되는 킬러 역할을 합니다.
//   성능 관점에서 보자면 new는 여러분의 친구가 아닙니다.
// - 메모리 관리자의 호출 횟수를 줄이는 방법을 알고 있다면 효과적으로 최적화할 수 있습니다.
// - 프로그램은 ::operator new()와 ::operator delete()의 정의를 제공해 전역 범위에서의 메모리 할당 방법을 변경할 수 있습니다.
// - 프로그램은 malloc()과 free()를 대체해 전역 범위에서의 메모리 관리 방법을 변경할 수 있습니다.
// - 스마트 포인터는 동적 변수의 소유권을 자동화합니다.
// - 동적 변수의 소유권을 공유하면 비용이 더 큽니다.
// - 클래스 인스턴스를 정적으로 만드세요.
// - 클래스 멤버 변수를 정적으로 만들고 필요하다면 두 단계 초기화를 사용하세요.
// - 동적 변수를 소유하기 위한 소유 포인터를 사용하세요. 그리고 소유권을 공유하는 대신 소유하지 않는 포인터를 사용하세요.
// - 출력용 매개변수에 데이터를 전달하는 복사 없는 함수를 만드세요.
// - 이동 문법을 구현하세요/
// - 평평한 자료구조를 더 많이 사용하세요.




int main()
{
    save("Optimized C++study.cpp");
}

// Chapter6 동적 할당 변수 최적화 完================================================
