


================================================
﻿/////////////////////////////////////////////////////////////////
// 2023.08.09 공부
// Chapter2 auto
/////////////////////////////////////////////////////////////////

#include <iostream>

#include "save.h"

// auto를 잘 활용하면 타자의 양이 줄어들 뿐만 아니라, 형식을 직접 지정했을 때
// 겪게 되는 정확성 문제와 성능 문제도 방지할 수 있다. 그러나 가끔은 auto가
// 프로그래머가 보기에 아주 엉뚱한 형식을 연역하기도 한다.
// 그런 경우 애초에 했던 결과를 내도록 auto를 이끄는 방법을 알아두는 것이 중요하다.


// 항목 5: 명시적 형식 선언보다는 auto를 선호하라

//template<typename It>
//void dwim(It b, It e)
//{
//    for (; b != e; ++b) {
//        typename std::iterator_traits<It>::value_type currValue = *b;
//    }
//}
//
//int x1;
//
//auto x2;    // 오류: 초기자가 꼭 필요함
//
//auto x3 = 0;
//
//auto derefUPLess = 
//    [](const std::unique_ptr<Widget>& p1, const std::unique_ptr<Widget>& p2) {return *p1 < *p2;};
//
//
//// std::function - 함수포인터 개념을 일반화한것
//
//
//// 대체로 std::function이 auto로 선언된 객체보다 메모리를 더 많이 소비한다. 또한 더 느리다 -> auto 사용!
//
//// auto 형식들은 초기화 표현식의 형식이 변하면 자동으로 변한다.
//// auto를 사용하면 리팩터링이 어느 정도 수월해진다.
//
//
//// 기억해 둘 사항들
//// - auto 변수는 반드시 초기화해야 하며, 이식성 또는 효율성 문제를 유발할 수 있는 형식 불일치가 발생하는 경우가 거의
////   없으며, 대체로 변수의 형식을 명시적으로 지정할 때보다 타자량도 더 적다.
//
//
//// 항목 6: auto가 원치 않은 형식으로 연역될 때에는 명시적 형식의 초기치를 사용하라.
//
//
//Widget w;
//
//bool highPrioirity = feature(w)[5];
//
//processWidget(w, highPrioirity);
//
//
//auto highPrioirity = feature(w)[5];     // w의 우선순위가 높은가?
//// 이렇게 바뀐 코드도 여전히 컴파일되나, 이제는 그 행동을 예측할 수 없다.
//processWidget(w, highPrioirity);        // 미정의 행동


// 형식 명시 초기치 관용구
//auto highPriority = static_cast<bool>(features(w)[5]);


// 기억해 둘 사항들
// - "보이지 않는" 대리자 형식 때문에 auto가 초기화 표현식의 형식을 "잘못" 연역할 수 있다.
// - 형식 명시 초기치 관용구는 auto가 원하는 형식을 연역하도록 강제한다.

int main()
{


    save("EffectiveModernC++Study.cpp");
}


================================================

