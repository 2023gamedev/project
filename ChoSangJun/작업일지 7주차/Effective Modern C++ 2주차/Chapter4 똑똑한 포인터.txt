


================================================
﻿/////////////////////////////////////////////////////////////////
// 2023.08.11 공부
// Chapter4 똑똑한 포인터
/////////////////////////////////////////////////////////////////

#include <iostream>
#include <vector>
#include <list>

#include "save.h"

// 생 포인터(raw pointer)를 사랑하기 힘든 이유
// 1. 선언만 봐서는 하나의 객체를 가리키는지 배열을 가리키는지 구분할 수 없다.
// 2. 선언만 봐서는 포인터를 다 사용한 후 포인터가 가리키는 객체를 독자가 직접 파괴해야 하는지 알 수 없다.
// 3. delete로 파괴하더라도 delete인지 delete[]를 사용해야 하는 지 알 수 없는 경우가 있다.

// 항목 18: 소유권 독점 자원의 관리에는 std::unique_ptr를 사용하라
// 기억해 둘 사항들
// - std::unique_ptr는 독정 소유권 의미론을 가진 자원의 관리를 위한, 작고 빠른 이동 전용 똑똑한 포인터이다.
// - 기본적으로 자원 파괴는 delete를 통해 일어나나, 커스텀 삭제자를 지정할 수 도 있다.
// - std::uniaue_ptr를 std::shared_ptr로 손쉽게 변환할 수 있다.
  // std::shared_ptr<Investment> sp = makeInverstment(인수들);

// 항목 19: 소유권 공유 자원의 관리에는 std::shared_ptr를 사용하라
// 기억해 둘 사항들
// - std::shared_ptr는 임의의 공유 자원의 수명을 편리하게 관리할 수 있는 수단을 제공한다.
// - 대체로 std::shared_ptr 객체는 그 크기가 std::unique_ptr 객체의 두 배이다.
// - 자원은 기본적으로 delete를 통해 파괴되나, 커스텀 삭제자도 지원된다.
// - 생 포인터 형식의 변수로부터 std::shared_ptr를 생성하는 일은 피해야 한다.

// 항목 20: std::shared_ptr처럼 작동하되 대상을 잃을 수도 있는 포인터가 필요하면 std::weak_ptr를 사용하라
// 기억해 둘 사항들
// - std::shared_ptr처럼 작동하되 대상을 잃을 수도 있는 포인터가 필요하면 std::weak_ptr를 사용하라
// - std::weak_ptr의 잠재적인 용도로는 캐싱, 관찰자 목록, 그리고 std::shared_ptr 순환 고리 방지가 있다.

// 항목 21: new를 직접 사용하는 것보다 std::make_unique와 std::make_shared를 선호하라
//auto pBigObj = std::make_shared<ReallyBigType>();
//// 기억해 둘 사항들
//// - new의 직접 사용에 비해, make 함수를 사용하면 소스 코드 중복의 여지가 없어지고 예외 안정성이 향샹된다.
//
//// 항목 22: Pimpl 관용구를 사용할 때에는 특수 멤버함수들을 구현 파일에서 정의하라
//// - Pimpl - 클래스의 자료 멤버들을 구현 클래스를 가리키는 포인터로 대체하고, 일차 클래스에 쓰이는
////           자료 멤버들을 그 구현 클래스로 옮기고, 포인터를 통해서 그 자료멤버들에 간접적으로 접근하는 기법이다.
//
//class Widget {
//public:
//    Widget();
//    ~Widget();
//
//private:
//    struct Impl;
//    Impl* pImpl;
//};
//
//struct Widget::Impl {
//    std::string name;
//    std::vector<double> data;
//    Gadget g1, g2, g3;
//};
//
//Widget::Widget() : pImpl(new Impl) {
//    
//}
//
//Widget::~Widget() {
//    delete pImpl;
//}

// 기억해 둘 사항들
// - Pimpl 관용구는 클래스 구현과 클래스 클라이언트 사이의 컴파일 의존성을 줄임으로써 빌드 시간을 감소한다. 



int main()
{


    save("EffectiveModernC++Study.cpp");
}


================================================
