{detect}
 -{cansee}
  -canattack
  -cannotattack 
 -hasshout
 -hasfootsound
 -hordeaction
 -hasinvestigated
 -hasnotthing

(단위 cm - Unreal unit(UU))			// ******* 나중에 m단위로 표기하는 걸로 바꾸기
//좀비 시야거리: 1000 => 1200
//   발소리 탐지: 500 => 800
*    ===> 800~500 정확한 위치에서 반경 100 이내 랜덤지점 탐색
     ===> 500~300 " 50 이내 랜덤지점 탐색
	 ===> 300~0   정확한 위치로 탐색
//   샤우팅 탐지: 2000 => 2500
//   공격 사정거리: 150
//   호드 사운드 탐지: 450 => 항상 100% & 정확한 지점으로


* 0순위 - 도망가기
1순위 - 공격
2순위 - 시야
3순위 - 샤우팅
4순위 - 발소리
5순위 - 무리행동
6순위 - 마지막 발견장소
7순위 - 패트롤


[+] 추가 할 내용
//1. 숨고르기 (확률 40%)
* 2. 발소리 탐지 실수 추가 (정확한 위치로 못 찾아감) -> [샤우팅 좀비는 더 멀리 그리고 더 정확히 찾게 만들기]
*  2.1. 발소리 탐지 거리 지금은 너무 짧으니 더 늘리고 대신 멀리서 포착할 수록 실수 범위 더 크게 
//3. 무리행동 (다른 좀비가 무언가에 반응하면 같이 반응하기)
* 4. 좀비 체력이 낮으면 도망가기(일정확률 주고) & 자동 체력회복하고 다시 복귀하기 -> [러닝좀비는 체력이 절반 이하면 바로 도망]
//5. 시야 탐지 실패 확률 추가


//[+] 탐지에 확률 넣기 (발소리, 시야)
// - 시야: 거리에 따라 탐지 확률
//  - 근방 1200~1000 => 10% (3초)
//  - 근방 1000~800 => 30%//50% (2초)
//  - 근방 800~500 => 50%//70% (1초)
//  - 근방 500~0 => 100%
 - 발소리: 거리에 따른 탐지 확률 + 탐지 위치 원래 지점에서 랜덤 반경으로 지정
  - 근방 800~500 => 30%//50% + 정확한 위치에서 반경 100 이내 랜덤지점 탐색 (3초)
  - 근방 500~300 => 50%//70% +  " 이내 랜덤지점 탐색 (2초)
  - 근방 300~0 => 100% + 정확한 위치로 탐색
// =====> 탐지는 틱마다(0.1초) 돌아가서 한번 실패하면 일정 시간동안 계속 실패하도록 하는 시스템 구현해놓음 (괄호 안에 넣은 '?초'가 해당 시간임)
[+] moveto 우선순위 정해주기
 - 시야, 샤우팅, 발소리, 마지막 발견장소
  - 시야 근방 500 이내에 탐지되었을때 => 시야 탐색
  - 샤우팅 근방 500 이내에 탐지되었을때 => 샤우팅
  - 발소리 근방 300 이내에 탐지되었을때 => 발소리
  - 시야 
  - 샤우팅
  - 발소리 
  - 호드 사운드  
  - 마지막 발견장소
* [+] 기억력 시스템
==> 그냥 지금처럼 어떤 하나의 탐지가 끝나면 싹 다 클리어하고 새로 탐색 시작하게 하자
